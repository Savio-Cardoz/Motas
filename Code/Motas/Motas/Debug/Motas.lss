
Motas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000018b0  00001944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800062  00800062  00001946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  00001976  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000144f  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f2  00000000  00000000  00002fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c42  00000000  00000000  000037a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a4  00000000  00000000  000043ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e9  00000000  00000000  00004a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cde  00000000  00000000  00005179  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00005e57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	47 c8       	rjmp	.-3954   	; 0xfffff092 <__eeprom_end+0xff7ef092>
       4:	27 c8       	rjmp	.-4018   	; 0xfffff054 <__eeprom_end+0xff7ef054>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	b7 c7       	rjmp	.+3950   	; 0xf80 <__vector_8>
      12:	d5 c7       	rjmp	.+4010   	; 0xfbe <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 eb       	ldi	r30, 0xB0	; 176
      3a:	f8 e1       	ldi	r31, 0x18	; 24
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a2 36       	cpi	r26, 0x62	; 98
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	a2 e6       	ldi	r26, 0x62	; 98
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a5 38       	cpi	r26, 0x85	; 133
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	3c d3       	rcall	.+1656   	; 0x6d2 <main>
      5a:	28 cc       	rjmp	.-1968   	; 0xfffff8ac <__eeprom_end+0xff7ef8ac>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Atmega_init>:
#include "Atmega_Config.h"
#include "Peripheral_Drivers.h"
#include "debug_func.h"

void Atmega_init()
{
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
      66:	3f d0       	rcall	.+126    	; 0xe6 <USART_Init>
	
#if DEBUG_ON
	SendDebug("Serial OK!");
#endif // DEBUG_ON
	
	Init_Ultrasonic_Sensor();
      68:	c1 d9       	rcall	.-3198   	; 0xfffff3ec <__eeprom_end+0xff7ef3ec>
	Init_Pir();
      6a:	95 d9       	rcall	.-3286   	; 0xfffff396 <__eeprom_end+0xff7ef396>
	Init_Timer1();
      6c:	20 da       	rcall	.-3008   	; 0xfffff4ae <__eeprom_end+0xff7ef4ae>
	Init_Timer0();
      6e:	06 da       	rcall	.-3060   	; 0xfffff47c <__eeprom_end+0xff7ef47c>
	Init_Gpio();
      70:	69 da       	rcall	.-2862   	; 0xfffff544 <__eeprom_end+0xff7ef544>
	DebugLedInit();
      72:	de d0       	rcall	.+444    	; 0x230 <DebugLedInit>
	Trigger_Ultrasonic_Sensor();
      74:	8a d8       	rcall	.-3820   	; 0xfffff18a <__eeprom_end+0xff7ef18a>
	sei();
      76:	78 94       	sei
      78:	df 91       	pop	r29
      7a:	cf 91       	pop	r28
      7c:	08 95       	ret

0000007e <__vector_11>:
	temp2 = int_data / 4096;
	dec_adc_value = dec_adc_value + (temp2 * 4096);
	temp2 = temp1;
	temp1 = temp1 % 256;
	temp2 = temp2 / 256;
	dec_adc_value = dec_adc_value + (temp2 * 256);
      7e:	1f 92       	push	r1
	temp2 = temp1;
      80:	0f 92       	push	r0
      82:	00 90 5f 00 	lds	r0, 0x005F
      86:	0f 92       	push	r0
	temp1 = temp1 % 16;
      88:	11 24       	eor	r1, r1
      8a:	2f 93       	push	r18
      8c:	3f 93       	push	r19
      8e:	4f 93       	push	r20
      90:	5f 93       	push	r21
      92:	6f 93       	push	r22
	temp2 = temp2 / 16;
      94:	7f 93       	push	r23
      96:	8f 93       	push	r24
      98:	9f 93       	push	r25
      9a:	af 93       	push	r26
      9c:	bf 93       	push	r27
      9e:	ef 93       	push	r30
      a0:	ff 93       	push	r31
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	1f 92       	push	r1
	dec_adc_value = (dec_adc_value + (temp2 * 16) + temp1);
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	8c e2       	ldi	r24, 0x2C	; 44
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	fc 01       	movw	r30, r24
      b2:	80 81       	ld	r24, Z
      b4:	50 d0       	rcall	.+160    	; 0x156 <Ring_Add>
      b6:	89 83       	std	Y+1, r24	; 0x01
      b8:	8f ef       	ldi	r24, 0xFF	; 255
      ba:	89 83       	std	Y+1, r24	; 0x01
      bc:	0f 90       	pop	r0
      be:	df 91       	pop	r29
      c0:	cf 91       	pop	r28
      c2:	ff 91       	pop	r31
      c4:	ef 91       	pop	r30
      c6:	bf 91       	pop	r27
      c8:	af 91       	pop	r26
      ca:	9f 91       	pop	r25
      cc:	8f 91       	pop	r24
	temp1 = dec_adc_value;
      ce:	7f 91       	pop	r23
      d0:	6f 91       	pop	r22
      d2:	5f 91       	pop	r21
      d4:	4f 91       	pop	r20
	USART_SendByte((dec_adc_value / 10000) | 0x30);
      d6:	3f 91       	pop	r19
      d8:	2f 91       	pop	r18
      da:	0f 90       	pop	r0
      dc:	00 92 5f 00 	sts	0x005F, r0
      e0:	0f 90       	pop	r0
      e2:	1f 90       	pop	r1
      e4:	18 95       	reti

000000e6 <USART_Init>:
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	89 e2       	ldi	r24, 0x29	; 41
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2c e0       	ldi	r18, 0x0C	; 12
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	80 e4       	ldi	r24, 0x40	; 64
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	fc 01       	movw	r30, r24
	dec_adc_value = temp1 % 10000;
      fe:	10 82       	st	Z, r1
     100:	8b e2       	ldi	r24, 0x2B	; 43
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2b e2       	ldi	r18, 0x2B	; 43
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	22 60       	ori	r18, 0x02	; 2
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	8a e2       	ldi	r24, 0x2A	; 42
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	28 e9       	ldi	r18, 0x98	; 152
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <USART_SendByte>:
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	1f 92       	push	r1
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	89 83       	std	Y+1, r24	; 0x01
     12e:	00 00       	nop
     130:	8b e2       	ldi	r24, 0x2B	; 43
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	88 2f       	mov	r24, r24
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	80 72       	andi	r24, 0x20	; 32
     13e:	99 27       	eor	r25, r25
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	b1 f3       	breq	.-20     	; 0x130 <USART_SendByte+0xe>
	USART_SendByte((dec_adc_value / 1000) | 0x30);
     144:	8c e2       	ldi	r24, 0x2C	; 44
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	29 81       	ldd	r18, Y+1	; 0x01
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
     14e:	0f 90       	pop	r0
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <Ring_Add>:
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	00 d0       	rcall	.+0      	; 0x15c <Ring_Add+0x6>
     15c:	00 d0       	rcall	.+0      	; 0x15e <Ring_Add+0x8>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	8a 83       	std	Y+2, r24	; 0x02
     164:	80 91 6f 00 	lds	r24, 0x006F
     168:	88 2f       	mov	r24, r24
     16a:	90 e0       	ldi	r25, 0x00	; 0
	dec_adc_value = temp1 % 1000;
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	2c e0       	ldi	r18, 0x0C	; 12
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	b9 01       	movw	r22, r18
     174:	74 db       	rcall	.-2328   	; 0xfffff85e <__eeprom_end+0xff7ef85e>
     176:	89 83       	std	Y+1, r24	; 0x01
     178:	80 91 70 00 	lds	r24, 0x0070
     17c:	99 81       	ldd	r25, Y+1	; 0x01
     17e:	98 17       	cp	r25, r24
     180:	79 f0       	breq	.+30     	; 0x1a0 <Ring_Add+0x4a>
     182:	80 91 6f 00 	lds	r24, 0x006F
     186:	88 2f       	mov	r24, r24
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	8f 58       	subi	r24, 0x8F	; 143
     18c:	9f 4f       	sbci	r25, 0xFF	; 255
     18e:	2a 81       	ldd	r18, Y+2	; 0x02
     190:	fc 01       	movw	r30, r24
     192:	20 83       	st	Z, r18
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	80 93 6f 00 	sts	0x006F, r24
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <Ring_Add+0x4e>
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	9f ef       	ldi	r25, 0xFF	; 255
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <Ring_Remove>:
	USART_SendByte((dec_adc_value /100) | 0x30);
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <Ring_Remove+0x6>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <Ring_Remove+0x8>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	90 91 6f 00 	lds	r25, 0x006F
     1c2:	80 91 70 00 	lds	r24, 0x0070
     1c6:	98 17       	cp	r25, r24
     1c8:	d1 f0       	breq	.+52     	; 0x1fe <Ring_Remove+0x4c>
     1ca:	80 91 70 00 	lds	r24, 0x0070
	dec_adc_value = temp1 % 100;
     1ce:	88 2f       	mov	r24, r24
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	8f 58       	subi	r24, 0x8F	; 143
     1d4:	9f 4f       	sbci	r25, 0xFF	; 255
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	88 2f       	mov	r24, r24
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9a 83       	std	Y+2, r25	; 0x02
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	80 91 70 00 	lds	r24, 0x0070
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	2c e0       	ldi	r18, 0x0C	; 12
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	b9 01       	movw	r22, r18
     1f2:	35 db       	rcall	.-2454   	; 0xfffff85e <__eeprom_end+0xff7ef85e>
     1f4:	80 93 70 00 	sts	0x0070, r24
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	9a 81       	ldd	r25, Y+2	; 0x02
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <Ring_Remove+0x50>
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	9f ef       	ldi	r25, 0xFF	; 255
	USART_SendByte((dec_adc_value / 10) | 0x30);
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <Is_Buffer_Empty>:
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	90 91 6f 00 	lds	r25, 0x006F
     21c:	80 91 70 00 	lds	r24, 0x0070
	dec_adc_value = temp1 % 10;
     220:	98 17       	cp	r25, r24
     222:	11 f4       	brne	.+4      	; 0x228 <Is_Buffer_Empty+0x18>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	01 c0       	rjmp	.+2      	; 0x22a <Is_Buffer_Empty+0x1a>
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <DebugLedInit>:

#include <avr/io.h>
#include "debug_func.h"

void DebugLedInit()
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
	RED_LED_DIR_REG |= (1 << RED_LED);
     238:	84 e3       	ldi	r24, 0x34	; 52
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	24 e3       	ldi	r18, 0x34	; 52
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	21 60       	ori	r18, 0x01	; 1
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	YELLOW_LED_DIR_REG |= (1 << YELLOW_LED);
     24a:	84 e3       	ldi	r24, 0x34	; 52
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	24 e3       	ldi	r18, 0x34	; 52
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	f9 01       	movw	r30, r18
     254:	20 81       	ld	r18, Z
     256:	22 60       	ori	r18, 0x02	; 2
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
	
	RED_LED_PORT &= ~(1 << RED_LED);
     25c:	85 e3       	ldi	r24, 0x35	; 53
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	25 e3       	ldi	r18, 0x35	; 53
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	2e 7f       	andi	r18, 0xFE	; 254
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
	YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     26e:	85 e3       	ldi	r24, 0x35	; 53
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	25 e3       	ldi	r18, 0x35	; 53
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	2d 7f       	andi	r18, 0xFD	; 253
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <DebugLedTransmit>:
		param led_colour:	LED_RED
							LED_YELLOW
							LED_ORANGE
*/
void DebugLedTransmit(debug_led_state_t led_state, debug_led_colour_t led_colour)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	00 d0       	rcall	.+0      	; 0x28c <DebugLedTransmit+0x6>
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	6a 83       	std	Y+2, r22	; 0x02
	if(led_state == LED_ON)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	a9 f5       	brne	.+106    	; 0x304 <DebugLedTransmit+0x7e>
	{
		switch(led_colour)
     29a:	8a 81       	ldd	r24, Y+2	; 0x02
     29c:	88 2f       	mov	r24, r24
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	91 05       	cpc	r25, r1
     2a4:	39 f0       	breq	.+14     	; 0x2b4 <DebugLedTransmit+0x2e>
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	91 05       	cpc	r25, r1
     2aa:	c1 f0       	breq	.+48     	; 0x2dc <DebugLedTransmit+0x56>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	91 05       	cpc	r25, r1
     2b0:	59 f0       	breq	.+22     	; 0x2c8 <DebugLedTransmit+0x42>
     2b2:	5f c0       	rjmp	.+190    	; 0x372 <DebugLedTransmit+0xec>
		{
			case LED_RED:
				RED_LED_PORT |= (1 << RED_LED);
     2b4:	85 e3       	ldi	r24, 0x35	; 53
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	25 e3       	ldi	r18, 0x35	; 53
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	f9 01       	movw	r30, r18
     2be:	20 81       	ld	r18, Z
     2c0:	21 60       	ori	r18, 0x01	; 1
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
				break;
     2c6:	1d c0       	rjmp	.+58     	; 0x302 <DebugLedTransmit+0x7c>
				
			case LED_YELLOW:
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     2c8:	85 e3       	ldi	r24, 0x35	; 53
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	25 e3       	ldi	r18, 0x35	; 53
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	f9 01       	movw	r30, r18
     2d2:	20 81       	ld	r18, Z
     2d4:	22 60       	ori	r18, 0x02	; 2
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
				break;
     2da:	13 c0       	rjmp	.+38     	; 0x302 <DebugLedTransmit+0x7c>
				
			case LED_ORANGE:
				RED_LED_PORT |= (1 << RED_LED);
     2dc:	85 e3       	ldi	r24, 0x35	; 53
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	25 e3       	ldi	r18, 0x35	; 53
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	21 60       	ori	r18, 0x01	; 1
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     2ee:	85 e3       	ldi	r24, 0x35	; 53
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	25 e3       	ldi	r18, 0x35	; 53
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	22 60       	ori	r18, 0x02	; 2
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
				break;
     300:	00 00       	nop
     302:	37 c0       	rjmp	.+110    	; 0x372 <DebugLedTransmit+0xec>
		} 
	}
	else if(led_state == LED_OFF)
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	88 23       	and	r24, r24
     308:	a1 f5       	brne	.+104    	; 0x372 <DebugLedTransmit+0xec>
	{
		switch(led_colour)
     30a:	8a 81       	ldd	r24, Y+2	; 0x02
     30c:	88 2f       	mov	r24, r24
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	91 05       	cpc	r25, r1
     314:	39 f0       	breq	.+14     	; 0x324 <DebugLedTransmit+0x9e>
     316:	83 30       	cpi	r24, 0x03	; 3
     318:	91 05       	cpc	r25, r1
     31a:	c1 f0       	breq	.+48     	; 0x34c <DebugLedTransmit+0xc6>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	91 05       	cpc	r25, r1
     320:	59 f0       	breq	.+22     	; 0x338 <DebugLedTransmit+0xb2>
     322:	27 c0       	rjmp	.+78     	; 0x372 <DebugLedTransmit+0xec>
		{
			case LED_RED:
			RED_LED_PORT &= ~(1 << RED_LED);
     324:	85 e3       	ldi	r24, 0x35	; 53
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	25 e3       	ldi	r18, 0x35	; 53
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	20 81       	ld	r18, Z
     330:	2e 7f       	andi	r18, 0xFE	; 254
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
			break;
     336:	1d c0       	rjmp	.+58     	; 0x372 <DebugLedTransmit+0xec>
		
			case LED_YELLOW:
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     338:	85 e3       	ldi	r24, 0x35	; 53
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	25 e3       	ldi	r18, 0x35	; 53
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	f9 01       	movw	r30, r18
     342:	20 81       	ld	r18, Z
     344:	2d 7f       	andi	r18, 0xFD	; 253
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
			break;
     34a:	13 c0       	rjmp	.+38     	; 0x372 <DebugLedTransmit+0xec>
		
			case LED_ORANGE:
			RED_LED_PORT &= ~(1 << RED_LED);
     34c:	85 e3       	ldi	r24, 0x35	; 53
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	25 e3       	ldi	r18, 0x35	; 53
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	2e 7f       	andi	r18, 0xFE	; 254
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     35e:	85 e3       	ldi	r24, 0x35	; 53
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	25 e3       	ldi	r18, 0x35	; 53
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	2d 7f       	andi	r18, 0xFD	; 253
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
			break;
     370:	00 00       	nop
		}
	}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <Dfplayer_Cmd>:
	argument 1: Type of command. Refer Dfplayer.h for command name definitions
	argument 2: Parameter to the command         
	                                                            
************************************************************************/
void Dfplayer_Cmd(uint8_t cmd, uint16_t parameter)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	63 97       	sbiw	r28, 0x13	; 19
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	89 8b       	std	Y+17, r24	; 0x11
     392:	7b 8b       	std	Y+19, r23	; 0x13
     394:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t cmd_lenght = 0x06;			// Currently all commands that'll be used have a lenght of 6. So this is fixed
     396:	86 e0       	ldi	r24, 0x06	; 6
     398:	89 83       	std	Y+1, r24	; 0x01
	uint8_t tempholder = 0;
     39a:	1a 82       	std	Y+2, r1	; 0x02

	/*	Create the CMD string	*/
	command.header = CMD_STRT_BYTE;
     39c:	8e e7       	ldi	r24, 0x7E	; 126
     39e:	80 93 7d 00 	sts	0x007D, r24
	command.version = CMD_VER;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	80 93 7e 00 	sts	0x007E, r24
	command.lenght = cmd_lenght;
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	80 93 7f 00 	sts	0x007F, r24
	command.type = cmd;
     3ae:	89 89       	ldd	r24, Y+17	; 0x11
     3b0:	80 93 80 00 	sts	0x0080, r24
	command.feedback = CMD_RECV_NFB;
     3b4:	10 92 81 00 	sts	0x0081, r1
	command.parah = parameter / 256;
     3b8:	8a 89       	ldd	r24, Y+18	; 0x12
     3ba:	9b 89       	ldd	r25, Y+19	; 0x13
     3bc:	89 2f       	mov	r24, r25
     3be:	99 27       	eor	r25, r25
     3c0:	80 93 82 00 	sts	0x0082, r24
	command.paral = parameter % 256;
     3c4:	8a 89       	ldd	r24, Y+18	; 0x12
     3c6:	80 93 83 00 	sts	0x0083, r24
	command.tail = CMD_END_BYTE;
     3ca:	8f ee       	ldi	r24, 0xEF	; 239
     3cc:	80 93 84 00 	sts	0x0084, r24
	
	Dfplayer_Send(&command);
     3d0:	8d e7       	ldi	r24, 0x7D	; 125
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	90 d0       	rcall	.+288    	; 0x4f6 <Dfplayer_Send>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	a0 e2       	ldi	r26, 0x20	; 32
     3dc:	b1 e4       	ldi	r27, 0x41	; 65
     3de:	8b 83       	std	Y+3, r24	; 0x03
     3e0:	9c 83       	std	Y+4, r25	; 0x04
     3e2:	ad 83       	std	Y+5, r26	; 0x05
     3e4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	4a e7       	ldi	r20, 0x7A	; 122
     3ec:	53 e4       	ldi	r21, 0x43	; 67
     3ee:	6b 81       	ldd	r22, Y+3	; 0x03
     3f0:	7c 81       	ldd	r23, Y+4	; 0x04
     3f2:	8d 81       	ldd	r24, Y+5	; 0x05
     3f4:	9e 81       	ldd	r25, Y+6	; 0x06
     3f6:	d0 d9       	rcall	.-3168   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	8f 83       	std	Y+7, r24	; 0x07
     3fe:	98 87       	std	Y+8, r25	; 0x08
     400:	a9 87       	std	Y+9, r26	; 0x09
     402:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e8       	ldi	r20, 0x80	; 128
     40a:	5f e3       	ldi	r21, 0x3F	; 63
     40c:	6f 81       	ldd	r22, Y+7	; 0x07
     40e:	78 85       	ldd	r23, Y+8	; 0x08
     410:	89 85       	ldd	r24, Y+9	; 0x09
     412:	9a 85       	ldd	r25, Y+10	; 0x0a
     414:	b0 d8       	rcall	.-3744   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     416:	88 23       	and	r24, r24
     418:	2c f4       	brge	.+10     	; 0x424 <Dfplayer_Cmd+0xa8>
		__ticks = 1;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9c 87       	std	Y+12, r25	; 0x0c
     420:	8b 87       	std	Y+11, r24	; 0x0b
     422:	3b c0       	rjmp	.+118    	; 0x49a <__stack+0x3b>
	else if (__tmp > 65535)
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	3f ef       	ldi	r19, 0xFF	; 255
     428:	4f e7       	ldi	r20, 0x7F	; 127
     42a:	57 e4       	ldi	r21, 0x47	; 71
     42c:	6f 81       	ldd	r22, Y+7	; 0x07
     42e:	78 85       	ldd	r23, Y+8	; 0x08
     430:	89 85       	ldd	r24, Y+9	; 0x09
     432:	9a 85       	ldd	r25, Y+10	; 0x0a
     434:	ad d9       	rcall	.-3238   	; 0xfffff790 <__eeprom_end+0xff7ef790>
     436:	18 16       	cp	r1, r24
     438:	3c f5       	brge	.+78     	; 0x488 <__stack+0x29>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	40 e2       	ldi	r20, 0x20	; 32
     440:	51 e4       	ldi	r21, 0x41	; 65
     442:	6b 81       	ldd	r22, Y+3	; 0x03
     444:	7c 81       	ldd	r23, Y+4	; 0x04
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	9e 81       	ldd	r25, Y+6	; 0x06
     44a:	a6 d9       	rcall	.-3252   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	fc d8       	rcall	.-3592   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     456:	dc 01       	movw	r26, r24
     458:	cb 01       	movw	r24, r22
     45a:	9c 87       	std	Y+12, r25	; 0x0c
     45c:	8b 87       	std	Y+11, r24	; 0x0b
     45e:	0f c0       	rjmp	.+30     	; 0x47e <__stack+0x1f>
     460:	89 e1       	ldi	r24, 0x19	; 25
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9e 87       	std	Y+14, r25	; 0x0e
     466:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     468:	8d 85       	ldd	r24, Y+13	; 0x0d
     46a:	9e 85       	ldd	r25, Y+14	; 0x0e
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
     470:	9e 87       	std	Y+14, r25	; 0x0e
     472:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     474:	8b 85       	ldd	r24, Y+11	; 0x0b
     476:	9c 85       	ldd	r25, Y+12	; 0x0c
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	9c 87       	std	Y+12, r25	; 0x0c
     47c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47e:	8b 85       	ldd	r24, Y+11	; 0x0b
     480:	9c 85       	ldd	r25, Y+12	; 0x0c
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	69 f7       	brne	.-38     	; 0x460 <__stack+0x1>
     486:	13 c0       	rjmp	.+38     	; 0x4ae <__stack+0x4f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     488:	6f 81       	ldd	r22, Y+7	; 0x07
     48a:	78 85       	ldd	r23, Y+8	; 0x08
     48c:	89 85       	ldd	r24, Y+9	; 0x09
     48e:	9a 85       	ldd	r25, Y+10	; 0x0a
     490:	de d8       	rcall	.-3652   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	9c 87       	std	Y+12, r25	; 0x0c
     498:	8b 87       	std	Y+11, r24	; 0x0b
     49a:	8b 85       	ldd	r24, Y+11	; 0x0b
     49c:	9c 85       	ldd	r25, Y+12	; 0x0c
     49e:	98 8b       	std	Y+16, r25	; 0x10
     4a0:	8f 87       	std	Y+15, r24	; 0x0f
     4a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4a4:	98 89       	ldd	r25, Y+16	; 0x10
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__stack+0x47>
     4aa:	98 8b       	std	Y+16, r25	; 0x10
     4ac:	8f 87       	std	Y+15, r24	; 0x0f

/*************************************************************************
*  If Commands are query based, a immediate response will be received
*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
     4ae:	b0 de       	rcall	.-672    	; 0x210 <Is_Buffer_Empty>
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	91 05       	cpc	r25, r1
     4b4:	b9 f4       	brne	.+46     	; 0x4e4 <__stack+0x85>
	{
		do{
			tempholder = Ring_Remove();
     4b6:	7d de       	rcall	.-774    	; 0x1b2 <Ring_Remove>
     4b8:	8a 83       	std	Y+2, r24	; 0x02
		}while(tempholder != CMD_STRT_BYTE);
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	8e 37       	cpi	r24, 0x7E	; 126
     4be:	d9 f7       	brne	.-10     	; 0x4b6 <__stack+0x57>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
     4c0:	78 de       	rcall	.-784    	; 0x1b2 <Ring_Remove>
     4c2:	80 93 7e 00 	sts	0x007E, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
     4c6:	75 de       	rcall	.-790    	; 0x1b2 <Ring_Remove>
     4c8:	80 93 7f 00 	sts	0x007F, r24
		command.type = Ring_Remove();
     4cc:	72 de       	rcall	.-796    	; 0x1b2 <Ring_Remove>
     4ce:	80 93 80 00 	sts	0x0080, r24
		command.feedback = Ring_Remove();
     4d2:	6f de       	rcall	.-802    	; 0x1b2 <Ring_Remove>
     4d4:	80 93 81 00 	sts	0x0081, r24
		command.parah = Ring_Remove();
     4d8:	6c de       	rcall	.-808    	; 0x1b2 <Ring_Remove>
     4da:	80 93 82 00 	sts	0x0082, r24
		command.paral = Ring_Remove();
     4de:	69 de       	rcall	.-814    	; 0x1b2 <Ring_Remove>
     4e0:	80 93 83 00 	sts	0x0083, r24
		//command.tail = Ring_Remove();
	}
}
     4e4:	63 96       	adiw	r28, 0x13	; 19
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <Dfplayer_Send>:

void Dfplayer_Send(command_t* strct_ptr)
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <Dfplayer_Send+0x6>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	9a 83       	std	Y+2, r25	; 0x02
     502:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte(strct_ptr->header);
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	fc 01       	movw	r30, r24
     50a:	80 81       	ld	r24, Z
     50c:	0a de       	rcall	.-1004   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->version);
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	81 81       	ldd	r24, Z+1	; 0x01
     516:	05 de       	rcall	.-1014   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->lenght);
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	fc 01       	movw	r30, r24
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	00 de       	rcall	.-1024   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->type);
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	fc 01       	movw	r30, r24
     528:	83 81       	ldd	r24, Z+3	; 0x03
     52a:	fb dd       	rcall	.-1034   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->feedback);
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	fc 01       	movw	r30, r24
     532:	84 81       	ldd	r24, Z+4	; 0x04
     534:	f6 dd       	rcall	.-1044   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->parah);
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	85 81       	ldd	r24, Z+5	; 0x05
     53e:	f1 dd       	rcall	.-1054   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->paral);
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	fc 01       	movw	r30, r24
     546:	86 81       	ldd	r24, Z+6	; 0x06
     548:	ec dd       	rcall	.-1064   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->tail);
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
     54e:	fc 01       	movw	r30, r24
     550:	87 81       	ldd	r24, Z+7	; 0x07
     552:	e7 dd       	rcall	.-1074   	; 0x122 <USART_SendByte>
}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <Dfplayer_Query_Card_Presence>:
 * returns		0 if card is present
				1 if no card is present
 */				
				 
uint8_t Dfplayer_Query_Card_Presence()
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	2f 97       	sbiw	r28, 0x0f	; 15
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
	uint8_t tempholder = 0;
     572:	19 82       	std	Y+1, r1	; 0x01
	command.header = CMD_STRT_BYTE;
     574:	8e e7       	ldi	r24, 0x7E	; 126
     576:	80 93 7d 00 	sts	0x007D, r24
	command.version = CMD_VER;
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 7e 00 	sts	0x007E, r24
	command.lenght = 0x06;
     580:	86 e0       	ldi	r24, 0x06	; 6
     582:	80 93 7f 00 	sts	0x007F, r24
	command.type = CMD_TF_FILES;
     586:	88 e4       	ldi	r24, 0x48	; 72
     588:	80 93 80 00 	sts	0x0080, r24
	command.feedback = CMD_RECV_NFB;
     58c:	10 92 81 00 	sts	0x0081, r1
	command.parah = 0x00;
     590:	10 92 82 00 	sts	0x0082, r1
	command.paral = 0x00;
     594:	10 92 83 00 	sts	0x0083, r1
	command.tail = CMD_END_BYTE;
     598:	8f ee       	ldi	r24, 0xEF	; 239
     59a:	80 93 84 00 	sts	0x0084, r24
	
	Dfplayer_Send(&command);
     59e:	8d e7       	ldi	r24, 0x7D	; 125
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a9 df       	rcall	.-174    	; 0x4f6 <Dfplayer_Send>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e2       	ldi	r26, 0x20	; 32
     5aa:	b1 e4       	ldi	r27, 0x41	; 65
     5ac:	8a 83       	std	Y+2, r24	; 0x02
     5ae:	9b 83       	std	Y+3, r25	; 0x03
     5b0:	ac 83       	std	Y+4, r26	; 0x04
     5b2:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	4a e7       	ldi	r20, 0x7A	; 122
     5ba:	53 e4       	ldi	r21, 0x43	; 67
     5bc:	6a 81       	ldd	r22, Y+2	; 0x02
     5be:	7b 81       	ldd	r23, Y+3	; 0x03
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04
     5c2:	9d 81       	ldd	r25, Y+5	; 0x05
     5c4:	e9 d8       	rcall	.-3630   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	8e 83       	std	Y+6, r24	; 0x06
     5cc:	9f 83       	std	Y+7, r25	; 0x07
     5ce:	a8 87       	std	Y+8, r26	; 0x08
     5d0:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e8       	ldi	r20, 0x80	; 128
     5d8:	5f e3       	ldi	r21, 0x3F	; 63
     5da:	6e 81       	ldd	r22, Y+6	; 0x06
     5dc:	7f 81       	ldd	r23, Y+7	; 0x07
     5de:	88 85       	ldd	r24, Y+8	; 0x08
     5e0:	99 85       	ldd	r25, Y+9	; 0x09
     5e2:	c9 d7       	rcall	.+3986   	; 0x1576 <__cmpsf2>
     5e4:	88 23       	and	r24, r24
     5e6:	2c f4       	brge	.+10     	; 0x5f2 <Dfplayer_Query_Card_Presence+0x94>
		__ticks = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	9b 87       	std	Y+11, r25	; 0x0b
     5ee:	8a 87       	std	Y+10, r24	; 0x0a
     5f0:	3b c0       	rjmp	.+118    	; 0x668 <Dfplayer_Query_Card_Presence+0x10a>
	else if (__tmp > 65535)
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	3f ef       	ldi	r19, 0xFF	; 255
     5f6:	4f e7       	ldi	r20, 0x7F	; 127
     5f8:	57 e4       	ldi	r21, 0x47	; 71
     5fa:	6e 81       	ldd	r22, Y+6	; 0x06
     5fc:	7f 81       	ldd	r23, Y+7	; 0x07
     5fe:	88 85       	ldd	r24, Y+8	; 0x08
     600:	99 85       	ldd	r25, Y+9	; 0x09
     602:	c6 d8       	rcall	.-3700   	; 0xfffff790 <__eeprom_end+0xff7ef790>
     604:	18 16       	cp	r1, r24
     606:	3c f5       	brge	.+78     	; 0x656 <Dfplayer_Query_Card_Presence+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e2       	ldi	r20, 0x20	; 32
     60e:	51 e4       	ldi	r21, 0x41	; 65
     610:	6a 81       	ldd	r22, Y+2	; 0x02
     612:	7b 81       	ldd	r23, Y+3	; 0x03
     614:	8c 81       	ldd	r24, Y+4	; 0x04
     616:	9d 81       	ldd	r25, Y+5	; 0x05
     618:	bf d8       	rcall	.-3714   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	bc 01       	movw	r22, r24
     620:	cd 01       	movw	r24, r26
     622:	15 d8       	rcall	.-4054   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	9b 87       	std	Y+11, r25	; 0x0b
     62a:	8a 87       	std	Y+10, r24	; 0x0a
     62c:	0f c0       	rjmp	.+30     	; 0x64c <Dfplayer_Query_Card_Presence+0xee>
     62e:	89 e1       	ldi	r24, 0x19	; 25
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9d 87       	std	Y+13, r25	; 0x0d
     634:	8c 87       	std	Y+12, r24	; 0x0c
     636:	8c 85       	ldd	r24, Y+12	; 0x0c
     638:	9d 85       	ldd	r25, Y+13	; 0x0d
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <Dfplayer_Query_Card_Presence+0xdc>
     63e:	9d 87       	std	Y+13, r25	; 0x0d
     640:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	9b 85       	ldd	r25, Y+11	; 0x0b
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	9b 87       	std	Y+11, r25	; 0x0b
     64a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64c:	8a 85       	ldd	r24, Y+10	; 0x0a
     64e:	9b 85       	ldd	r25, Y+11	; 0x0b
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	69 f7       	brne	.-38     	; 0x62e <Dfplayer_Query_Card_Presence+0xd0>
     654:	13 c0       	rjmp	.+38     	; 0x67c <Dfplayer_Query_Card_Presence+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     656:	6e 81       	ldd	r22, Y+6	; 0x06
     658:	7f 81       	ldd	r23, Y+7	; 0x07
     65a:	88 85       	ldd	r24, Y+8	; 0x08
     65c:	99 85       	ldd	r25, Y+9	; 0x09
     65e:	f7 d7       	rcall	.+4078   	; 0x164e <__fixunssfsi>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	9b 87       	std	Y+11, r25	; 0x0b
     666:	8a 87       	std	Y+10, r24	; 0x0a
     668:	8a 85       	ldd	r24, Y+10	; 0x0a
     66a:	9b 85       	ldd	r25, Y+11	; 0x0b
     66c:	9f 87       	std	Y+15, r25	; 0x0f
     66e:	8e 87       	std	Y+14, r24	; 0x0e
     670:	8e 85       	ldd	r24, Y+14	; 0x0e
     672:	9f 85       	ldd	r25, Y+15	; 0x0f
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <Dfplayer_Query_Card_Presence+0x116>
     678:	9f 87       	std	Y+15, r25	; 0x0f
     67a:	8e 87       	std	Y+14, r24	; 0x0e

	/*************************************************************************
	*  If Commands are query based, a immediate response will be received
	*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
     67c:	c9 dd       	rcall	.-1134   	; 0x210 <Is_Buffer_Empty>
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	91 05       	cpc	r25, r1
     682:	b9 f4       	brne	.+46     	; 0x6b2 <Dfplayer_Query_Card_Presence+0x154>
	{
		do{
			tempholder = Ring_Remove();
     684:	96 dd       	rcall	.-1236   	; 0x1b2 <Ring_Remove>
     686:	89 83       	std	Y+1, r24	; 0x01
		}while(tempholder != CMD_STRT_BYTE);
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	8e 37       	cpi	r24, 0x7E	; 126
     68c:	d9 f7       	brne	.-10     	; 0x684 <Dfplayer_Query_Card_Presence+0x126>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
     68e:	91 dd       	rcall	.-1246   	; 0x1b2 <Ring_Remove>
     690:	80 93 7e 00 	sts	0x007E, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
     694:	8e dd       	rcall	.-1252   	; 0x1b2 <Ring_Remove>
     696:	80 93 7f 00 	sts	0x007F, r24
		command.type = Ring_Remove();
     69a:	8b dd       	rcall	.-1258   	; 0x1b2 <Ring_Remove>
     69c:	80 93 80 00 	sts	0x0080, r24
		command.feedback = Ring_Remove();
     6a0:	88 dd       	rcall	.-1264   	; 0x1b2 <Ring_Remove>
     6a2:	80 93 81 00 	sts	0x0081, r24
		command.parah = Ring_Remove();
     6a6:	85 dd       	rcall	.-1270   	; 0x1b2 <Ring_Remove>
     6a8:	80 93 82 00 	sts	0x0082, r24
		command.paral = Ring_Remove();
     6ac:	82 dd       	rcall	.-1276   	; 0x1b2 <Ring_Remove>
     6ae:	80 93 83 00 	sts	0x0083, r24
	}
	
	if(command.type == CMD_ERROR)
     6b2:	80 91 80 00 	lds	r24, 0x0080
     6b6:	80 34       	cpi	r24, 0x40	; 64
     6b8:	11 f4       	brne	.+4      	; 0x6be <Dfplayer_Query_Card_Presence+0x160>
	return 1;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <Dfplayer_Query_Card_Presence+0x162>
	
	else return 0;
     6be:	80 e0       	ldi	r24, 0x00	; 0
}
     6c0:	2f 96       	adiw	r28, 0x0f	; 15
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <main>:
#include "debug_func.h"



int main(void)
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	2e 97       	sbiw	r28, 0x0e	; 14
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
	Atmega_init();
     6e6:	bb dc       	rcall	.-1674   	; 0x5e <Atmega_init>
	Dfplayer_Cmd(CMD_PAUSE, 1);
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	8e e0       	ldi	r24, 0x0E	; 14
     6ee:	46 de       	rcall	.-884    	; 0x37c <Dfplayer_Cmd>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	aa e7       	ldi	r26, 0x7A	; 122
     6f6:	b4 e4       	ldi	r27, 0x44	; 68
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	9a 83       	std	Y+2, r25	; 0x02
     6fc:	ab 83       	std	Y+3, r26	; 0x03
     6fe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	4a e7       	ldi	r20, 0x7A	; 122
     706:	53 e4       	ldi	r21, 0x43	; 67
     708:	69 81       	ldd	r22, Y+1	; 0x01
     70a:	7a 81       	ldd	r23, Y+2	; 0x02
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	43 d8       	rcall	.-3962   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	8d 83       	std	Y+5, r24	; 0x05
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	af 83       	std	Y+7, r26	; 0x07
     71c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	6d 81       	ldd	r22, Y+5	; 0x05
     728:	7e 81       	ldd	r23, Y+6	; 0x06
     72a:	8f 81       	ldd	r24, Y+7	; 0x07
     72c:	98 85       	ldd	r25, Y+8	; 0x08
     72e:	23 d7       	rcall	.+3654   	; 0x1576 <__cmpsf2>
     730:	88 23       	and	r24, r24
     732:	2c f4       	brge	.+10     	; 0x73e <main+0x6c>
		__ticks = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	9a 87       	std	Y+10, r25	; 0x0a
     73a:	89 87       	std	Y+9, r24	; 0x09
     73c:	3b c0       	rjmp	.+118    	; 0x7b4 <main+0xe2>
	else if (__tmp > 65535)
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	3f ef       	ldi	r19, 0xFF	; 255
     742:	4f e7       	ldi	r20, 0x7F	; 127
     744:	57 e4       	ldi	r21, 0x47	; 71
     746:	6d 81       	ldd	r22, Y+5	; 0x05
     748:	7e 81       	ldd	r23, Y+6	; 0x06
     74a:	8f 81       	ldd	r24, Y+7	; 0x07
     74c:	98 85       	ldd	r25, Y+8	; 0x08
     74e:	20 d8       	rcall	.-4032   	; 0xfffff790 <__eeprom_end+0xff7ef790>
     750:	18 16       	cp	r1, r24
     752:	3c f5       	brge	.+78     	; 0x7a2 <main+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e2       	ldi	r20, 0x20	; 32
     75a:	51 e4       	ldi	r21, 0x41	; 65
     75c:	69 81       	ldd	r22, Y+1	; 0x01
     75e:	7a 81       	ldd	r23, Y+2	; 0x02
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	9c 81       	ldd	r25, Y+4	; 0x04
     764:	19 d8       	rcall	.-4046   	; 0xfffff798 <__eeprom_end+0xff7ef798>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	bc 01       	movw	r22, r24
     76c:	cd 01       	movw	r24, r26
     76e:	6f d7       	rcall	.+3806   	; 0x164e <__fixunssfsi>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	9a 87       	std	Y+10, r25	; 0x0a
     776:	89 87       	std	Y+9, r24	; 0x09
     778:	0f c0       	rjmp	.+30     	; 0x798 <main+0xc6>
     77a:	89 e1       	ldi	r24, 0x19	; 25
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	9c 87       	std	Y+12, r25	; 0x0c
     780:	8b 87       	std	Y+11, r24	; 0x0b
     782:	8b 85       	ldd	r24, Y+11	; 0x0b
     784:	9c 85       	ldd	r25, Y+12	; 0x0c
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <main+0xb4>
     78a:	9c 87       	std	Y+12, r25	; 0x0c
     78c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     78e:	89 85       	ldd	r24, Y+9	; 0x09
     790:	9a 85       	ldd	r25, Y+10	; 0x0a
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	9a 87       	std	Y+10, r25	; 0x0a
     796:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     798:	89 85       	ldd	r24, Y+9	; 0x09
     79a:	9a 85       	ldd	r25, Y+10	; 0x0a
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	69 f7       	brne	.-38     	; 0x77a <main+0xa8>
     7a0:	13 c0       	rjmp	.+38     	; 0x7c8 <main+0xf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7a2:	6d 81       	ldd	r22, Y+5	; 0x05
     7a4:	7e 81       	ldd	r23, Y+6	; 0x06
     7a6:	8f 81       	ldd	r24, Y+7	; 0x07
     7a8:	98 85       	ldd	r25, Y+8	; 0x08
     7aa:	51 d7       	rcall	.+3746   	; 0x164e <__fixunssfsi>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	9a 87       	std	Y+10, r25	; 0x0a
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	89 85       	ldd	r24, Y+9	; 0x09
     7b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b8:	9e 87       	std	Y+14, r25	; 0x0e
     7ba:	8d 87       	std	Y+13, r24	; 0x0d
     7bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     7be:	9e 85       	ldd	r25, Y+14	; 0x0e
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <main+0xee>
     7c4:	9e 87       	std	Y+14, r25	; 0x0e
     7c6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	
    while(1)
    {
		MotasController();
     7c8:	b3 d3       	rcall	.+1894   	; 0xf30 <MotasController>
    }
     7ca:	fe cf       	rjmp	.-4      	; 0x7c8 <main+0xf6>

000007cc <Init_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Init_State(void)
{
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
	flag_register_controller = 0;
     7d4:	10 92 62 00 	sts	0x0062, r1
	threshold_uss_count = 65535;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	90 93 65 00 	sts	0x0065, r25
     7e0:	80 93 64 00 	sts	0x0064, r24
	
	// TODO: Add code to check the status of the DFplayer if a SD card is or isn't inserted
	if(Dfplayer_Query_Card_Presence())
     7e4:	bc de       	rcall	.-648    	; 0x55e <Dfplayer_Query_Card_Presence>
     7e6:	88 23       	and	r24, r24
     7e8:	41 f0       	breq	.+16     	; 0x7fa <Init_State+0x2e>
	flag_sd_card_empty_g = True;
     7ea:	82 e6       	ldi	r24, 0x62	; 98
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 81       	ld	r18, Z
     7f2:	21 60       	ori	r18, 0x01	; 1
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
     7f8:	07 c0       	rjmp	.+14     	; 0x808 <Init_State+0x3c>
	else flag_sd_card_empty_g = False;
     7fa:	82 e6       	ldi	r24, 0x62	; 98
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	fc 01       	movw	r30, r24
     800:	20 81       	ld	r18, Z
     802:	2e 7f       	andi	r18, 0xFE	; 254
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
	// TODO: extern this flag. Please do not change the name
	if(True == flag_sd_card_empty_g)
     808:	82 e6       	ldi	r24, 0x62	; 98
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	81 70       	andi	r24, 0x01	; 1
     812:	88 23       	and	r24, r24
     814:	21 f0       	breq	.+8      	; 0x81e <Init_State+0x52>
	{
		#ifdef DEBUG_ON
			//TODO: Add a LED colour for information
		#endif

		motascontroller_state = MOTAS_DEBUGGING_STATE;	
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	80 93 63 00 	sts	0x0063, r24
     81c:	03 c0       	rjmp	.+6      	; 0x824 <Init_State+0x58>

	//TODO: Check if any additional condition is required for this transition
	/* No debugging required. Start calibration */
	else
	{	
		motascontroller_state = MOTAS_CALIBRATION_STATE;	
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 63 00 	sts	0x0063, r24
	}
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <Calibration_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Calibration_State(void)
{	
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	2e 97       	sbiw	r28, 0x0e	; 14
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e4       	ldi	r25, 0x40	; 64
     842:	ac e9       	ldi	r26, 0x9C	; 156
     844:	b5 e4       	ldi	r27, 0x45	; 69
     846:	89 83       	std	Y+1, r24	; 0x01
     848:	9a 83       	std	Y+2, r25	; 0x02
     84a:	ab 83       	std	Y+3, r26	; 0x03
     84c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	4a e7       	ldi	r20, 0x7A	; 122
     854:	53 e4       	ldi	r21, 0x43	; 67
     856:	69 81       	ldd	r22, Y+1	; 0x01
     858:	7a 81       	ldd	r23, Y+2	; 0x02
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	9c d7       	rcall	.+3896   	; 0x1798 <__mulsf3>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	8d 83       	std	Y+5, r24	; 0x05
     866:	9e 83       	std	Y+6, r25	; 0x06
     868:	af 83       	std	Y+7, r26	; 0x07
     86a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e8       	ldi	r20, 0x80	; 128
     872:	5f e3       	ldi	r21, 0x3F	; 63
     874:	6d 81       	ldd	r22, Y+5	; 0x05
     876:	7e 81       	ldd	r23, Y+6	; 0x06
     878:	8f 81       	ldd	r24, Y+7	; 0x07
     87a:	98 85       	ldd	r25, Y+8	; 0x08
     87c:	7c d6       	rcall	.+3320   	; 0x1576 <__cmpsf2>
     87e:	88 23       	and	r24, r24
     880:	2c f4       	brge	.+10     	; 0x88c <Calibration_State+0x62>
		__ticks = 1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9a 87       	std	Y+10, r25	; 0x0a
     888:	89 87       	std	Y+9, r24	; 0x09
     88a:	3b c0       	rjmp	.+118    	; 0x902 <Calibration_State+0xd8>
	else if (__tmp > 65535)
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	4f e7       	ldi	r20, 0x7F	; 127
     892:	57 e4       	ldi	r21, 0x47	; 71
     894:	6d 81       	ldd	r22, Y+5	; 0x05
     896:	7e 81       	ldd	r23, Y+6	; 0x06
     898:	8f 81       	ldd	r24, Y+7	; 0x07
     89a:	98 85       	ldd	r25, Y+8	; 0x08
     89c:	79 d7       	rcall	.+3826   	; 0x1790 <__gesf2>
     89e:	18 16       	cp	r1, r24
     8a0:	3c f5       	brge	.+78     	; 0x8f0 <Calibration_State+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e2       	ldi	r20, 0x20	; 32
     8a8:	51 e4       	ldi	r21, 0x41	; 65
     8aa:	69 81       	ldd	r22, Y+1	; 0x01
     8ac:	7a 81       	ldd	r23, Y+2	; 0x02
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
     8b2:	72 d7       	rcall	.+3812   	; 0x1798 <__mulsf3>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	bc 01       	movw	r22, r24
     8ba:	cd 01       	movw	r24, r26
     8bc:	c8 d6       	rcall	.+3472   	; 0x164e <__fixunssfsi>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	9a 87       	std	Y+10, r25	; 0x0a
     8c4:	89 87       	std	Y+9, r24	; 0x09
     8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <Calibration_State+0xbc>
     8c8:	89 e1       	ldi	r24, 0x19	; 25
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	9c 87       	std	Y+12, r25	; 0x0c
     8ce:	8b 87       	std	Y+11, r24	; 0x0b
     8d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <Calibration_State+0xaa>
     8d8:	9c 87       	std	Y+12, r25	; 0x0c
     8da:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8dc:	89 85       	ldd	r24, Y+9	; 0x09
     8de:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	9a 87       	std	Y+10, r25	; 0x0a
     8e4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e6:	89 85       	ldd	r24, Y+9	; 0x09
     8e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	69 f7       	brne	.-38     	; 0x8c8 <Calibration_State+0x9e>
     8ee:	13 c0       	rjmp	.+38     	; 0x916 <Calibration_State+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f0:	6d 81       	ldd	r22, Y+5	; 0x05
     8f2:	7e 81       	ldd	r23, Y+6	; 0x06
     8f4:	8f 81       	ldd	r24, Y+7	; 0x07
     8f6:	98 85       	ldd	r25, Y+8	; 0x08
     8f8:	aa d6       	rcall	.+3412   	; 0x164e <__fixunssfsi>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	9a 87       	std	Y+10, r25	; 0x0a
     900:	89 87       	std	Y+9, r24	; 0x09
     902:	89 85       	ldd	r24, Y+9	; 0x09
     904:	9a 85       	ldd	r25, Y+10	; 0x0a
     906:	9e 87       	std	Y+14, r25	; 0x0e
     908:	8d 87       	std	Y+13, r24	; 0x0d
     90a:	8d 85       	ldd	r24, Y+13	; 0x0d
     90c:	9e 85       	ldd	r25, Y+14	; 0x0e
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <Calibration_State+0xe4>
     912:	9e 87       	std	Y+14, r25	; 0x0e
     914:	8d 87       	std	Y+13, r24	; 0x0d
	/* Update the value of threshold*/
	_delay_ms(5000);
	threshold_uss_count = Get_Uss_Count();
     916:	a7 d5       	rcall	.+2894   	; 0x1466 <Get_Uss_Count>
     918:	90 93 65 00 	sts	0x0065, r25
     91c:	80 93 64 00 	sts	0x0064, r24
	threshold_uss_count -= 200;
     920:	80 91 64 00 	lds	r24, 0x0064
     924:	90 91 65 00 	lds	r25, 0x0065
     928:	88 5c       	subi	r24, 0xC8	; 200
     92a:	91 09       	sbc	r25, r1
     92c:	90 93 65 00 	sts	0x0065, r25
     930:	80 93 64 00 	sts	0x0064, r24
	#if DEBUG_ON
	SendDebug("USS calib");
	USART_Transmit_dec(threshold_uss_count);
	#endif
	/* Reset the PIR count*/
	Reset_Pir_count();
     934:	fc d5       	rcall	.+3064   	; 0x152e <Reset_Pir_count>
	//_delay_ms(1000);
	//DebugLedTransmit(LED_OFF ,LED_RED);		/* Switch OFF the LED */
	#endif
	
	/* Update state */
	motascontroller_state = MOTAS_STANDBY_STATE;
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	80 93 63 00 	sts	0x0063, r24
	
	#if DEBUG_ON
	SendDebug("calib done");
	#endif
}
     93c:	2e 96       	adiw	r28, 0x0e	; 14
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <Standby_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Standby_State(void)
{
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	62 97       	sbiw	r28, 0x12	; 18
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
	uint16_t standby_pircount = 0;
     962:	1a 82       	std	Y+2, r1	; 0x02
     964:	19 82       	std	Y+1, r1	; 0x01
	uint16_t standby_usscount = 0; 
     966:	1c 82       	std	Y+4, r1	; 0x04
     968:	1b 82       	std	Y+3, r1	; 0x03

	/* Update the PIR and ultrasonic count */
	standby_pircount = Get_Pir_count();
     96a:	d6 d5       	rcall	.+2988   	; 0x1518 <Get_Pir_count>
     96c:	9a 83       	std	Y+2, r25	; 0x02
     96e:	89 83       	std	Y+1, r24	; 0x01
	standby_usscount = Get_Uss_Count(); 
     970:	7a d5       	rcall	.+2804   	; 0x1466 <Get_Uss_Count>
     972:	9c 83       	std	Y+4, r25	; 0x04
     974:	8b 83       	std	Y+3, r24	; 0x03

	/*Check if Ultrasonic or pir has triggered because customer entering the room */
	if(flag_uss_state_g || (standby_pircount > 1))
     976:	82 e6       	ldi	r24, 0x62	; 98
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	84 70       	andi	r24, 0x04	; 4
     980:	88 23       	and	r24, r24
     982:	31 f4       	brne	.+12     	; 0x990 <Standby_State+0x42>
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	91 05       	cpc	r25, r1
     98c:	08 f4       	brcc	.+2      	; 0x990 <Standby_State+0x42>
     98e:	89 c0       	rjmp	.+274    	; 0xaa2 <Standby_State+0x154>
	{
		flag_uss_state_g = False;
     990:	82 e6       	ldi	r24, 0x62	; 98
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	20 81       	ld	r18, Z
     998:	2b 7f       	andi	r18, 0xFB	; 251
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
		/* Clear the standby pir count */
		standby_pircount = 0;
     99e:	1a 82       	std	Y+2, r1	; 0x02
     9a0:	19 82       	std	Y+1, r1	; 0x01
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e8       	ldi	r25, 0x80	; 128
     9a6:	ab e3       	ldi	r26, 0x3B	; 59
     9a8:	b5 e4       	ldi	r27, 0x45	; 69
     9aa:	8d 83       	std	Y+5, r24	; 0x05
     9ac:	9e 83       	std	Y+6, r25	; 0x06
     9ae:	af 83       	std	Y+7, r26	; 0x07
     9b0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	4a e7       	ldi	r20, 0x7A	; 122
     9b8:	53 e4       	ldi	r21, 0x43	; 67
     9ba:	6d 81       	ldd	r22, Y+5	; 0x05
     9bc:	7e 81       	ldd	r23, Y+6	; 0x06
     9be:	8f 81       	ldd	r24, Y+7	; 0x07
     9c0:	98 85       	ldd	r25, Y+8	; 0x08
     9c2:	ea d6       	rcall	.+3540   	; 0x1798 <__mulsf3>
     9c4:	dc 01       	movw	r26, r24
     9c6:	cb 01       	movw	r24, r22
     9c8:	89 87       	std	Y+9, r24	; 0x09
     9ca:	9a 87       	std	Y+10, r25	; 0x0a
     9cc:	ab 87       	std	Y+11, r26	; 0x0b
     9ce:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	69 85       	ldd	r22, Y+9	; 0x09
     9da:	7a 85       	ldd	r23, Y+10	; 0x0a
     9dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9de:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e0:	ca d5       	rcall	.+2964   	; 0x1576 <__cmpsf2>
     9e2:	88 23       	and	r24, r24
     9e4:	2c f4       	brge	.+10     	; 0x9f0 <Standby_State+0xa2>
		__ticks = 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	9e 87       	std	Y+14, r25	; 0x0e
     9ec:	8d 87       	std	Y+13, r24	; 0x0d
     9ee:	3b c0       	rjmp	.+118    	; 0xa66 <Standby_State+0x118>
	else if (__tmp > 65535)
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f e7       	ldi	r20, 0x7F	; 127
     9f6:	57 e4       	ldi	r21, 0x47	; 71
     9f8:	69 85       	ldd	r22, Y+9	; 0x09
     9fa:	7a 85       	ldd	r23, Y+10	; 0x0a
     9fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     9fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     a00:	c7 d6       	rcall	.+3470   	; 0x1790 <__gesf2>
     a02:	18 16       	cp	r1, r24
     a04:	3c f5       	brge	.+78     	; 0xa54 <Standby_State+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e2       	ldi	r20, 0x20	; 32
     a0c:	51 e4       	ldi	r21, 0x41	; 65
     a0e:	6d 81       	ldd	r22, Y+5	; 0x05
     a10:	7e 81       	ldd	r23, Y+6	; 0x06
     a12:	8f 81       	ldd	r24, Y+7	; 0x07
     a14:	98 85       	ldd	r25, Y+8	; 0x08
     a16:	c0 d6       	rcall	.+3456   	; 0x1798 <__mulsf3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	bc 01       	movw	r22, r24
     a1e:	cd 01       	movw	r24, r26
     a20:	16 d6       	rcall	.+3116   	; 0x164e <__fixunssfsi>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	9e 87       	std	Y+14, r25	; 0x0e
     a28:	8d 87       	std	Y+13, r24	; 0x0d
     a2a:	0f c0       	rjmp	.+30     	; 0xa4a <Standby_State+0xfc>
     a2c:	89 e1       	ldi	r24, 0x19	; 25
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	98 8b       	std	Y+16, r25	; 0x10
     a32:	8f 87       	std	Y+15, r24	; 0x0f
     a34:	8f 85       	ldd	r24, Y+15	; 0x0f
     a36:	98 89       	ldd	r25, Y+16	; 0x10
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <Standby_State+0xea>
     a3c:	98 8b       	std	Y+16, r25	; 0x10
     a3e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a40:	8d 85       	ldd	r24, Y+13	; 0x0d
     a42:	9e 85       	ldd	r25, Y+14	; 0x0e
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	9e 87       	std	Y+14, r25	; 0x0e
     a48:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a4e:	00 97       	sbiw	r24, 0x00	; 0
     a50:	69 f7       	brne	.-38     	; 0xa2c <Standby_State+0xde>
     a52:	13 c0       	rjmp	.+38     	; 0xa7a <Standby_State+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a54:	69 85       	ldd	r22, Y+9	; 0x09
     a56:	7a 85       	ldd	r23, Y+10	; 0x0a
     a58:	8b 85       	ldd	r24, Y+11	; 0x0b
     a5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a5c:	f8 d5       	rcall	.+3056   	; 0x164e <__fixunssfsi>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	9e 87       	std	Y+14, r25	; 0x0e
     a64:	8d 87       	std	Y+13, r24	; 0x0d
     a66:	8d 85       	ldd	r24, Y+13	; 0x0d
     a68:	9e 85       	ldd	r25, Y+14	; 0x0e
     a6a:	9a 8b       	std	Y+18, r25	; 0x12
     a6c:	89 8b       	std	Y+17, r24	; 0x11
     a6e:	89 89       	ldd	r24, Y+17	; 0x11
     a70:	9a 89       	ldd	r25, Y+18	; 0x12
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <Standby_State+0x124>
     a76:	9a 8b       	std	Y+18, r25	; 0x12
     a78:	89 8b       	std	Y+17, r24	; 0x11
		
		/* Delay of 3 seconds to let the pir count increment */
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();
     a7a:	4e d5       	rcall	.+2716   	; 0x1518 <Get_Pir_count>
     a7c:	9a 83       	std	Y+2, r25	; 0x02
     a7e:	89 83       	std	Y+1, r24	; 0x01

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     a80:	80 91 60 00 	lds	r24, 0x0060
     a84:	90 91 61 00 	lds	r25, 0x0061
     a88:	29 81       	ldd	r18, Y+1	; 0x01
     a8a:	3a 81       	ldd	r19, Y+2	; 0x02
     a8c:	82 17       	cp	r24, r18
     a8e:	93 07       	cpc	r25, r19
     a90:	20 f4       	brcc	.+8      	; 0xa9a <Standby_State+0x14c>
		{
			#if DEBUG_ON
			SendDebug("State changed : MOTAS ACTIVE");
			#endif
			motascontroller_state = MOTAS_ACTIVE_STATE;
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	80 93 63 00 	sts	0x0063, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     a98:	07 c0       	rjmp	.+14     	; 0xaa8 <Standby_State+0x15a>
		else 
		{
			#if DEBUG_ON
			SendDebug("State changed : MOTAS STANDBY");
			#endif
			motascontroller_state = MOTAS_STANDBY_STATE;
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	80 93 63 00 	sts	0x0063, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <Standby_State+0x15a>
	else
	{
		#if DEBUG_ON
		SendDebug("State changed : MOTAS STANDBY");
		#endif
		motascontroller_state = MOTAS_STANDBY_STATE;
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	80 93 63 00 	sts	0x0063, r24
	}
}
     aa8:	62 96       	adiw	r28, 0x12	; 18
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <Active_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Active_State(void)
{
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	62 97       	sbiw	r28, 0x12	; 18
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
	uint16_t active_pir_count = 0;
     ace:	1a 82       	std	Y+2, r1	; 0x02
     ad0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t active_usscount = 0; 
     ad2:	1c 82       	std	Y+4, r1	; 0x04
     ad4:	1b 82       	std	Y+3, r1	; 0x03
	
	/* Play music */
	if(False == flag_player_status_g)
     ad6:	82 e6       	ldi	r24, 0x62	; 98
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	82 70       	andi	r24, 0x02	; 2
     ae0:	88 23       	and	r24, r24
     ae2:	59 f4       	brne	.+22     	; 0xafa <Active_State+0x40>
	{
		/* Change the status of music player to playing */
		flag_player_status_g = True;
     ae4:	82 e6       	ldi	r24, 0x62	; 98
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	fc 01       	movw	r30, r24
     aea:	20 81       	ld	r18, Z
     aec:	22 60       	ori	r18, 0x02	; 2
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
		/* Play the first track */
		Dfplayer_Cmd(CMD_PLY_TRCK, 1);
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	41 dc       	rcall	.-1918   	; 0x37c <Dfplayer_Cmd>
	///* Orange led light for 1 second indicating in the standy state */
	//DebugLedTransmit(LED_ON ,LED_ORANGE);
	//_delay_ms(1000);
	//DebugLedTransmit(LED_OFF ,LED_ORANGE);		/* Switch OFF the LED */
	
	Reset_Pir_count();
     afa:	19 d5       	rcall	.+2610   	; 0x152e <Reset_Pir_count>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e4       	ldi	r25, 0x40	; 64
     b00:	ac e9       	ldi	r26, 0x9C	; 156
     b02:	b5 e4       	ldi	r27, 0x45	; 69
     b04:	8d 83       	std	Y+5, r24	; 0x05
     b06:	9e 83       	std	Y+6, r25	; 0x06
     b08:	af 83       	std	Y+7, r26	; 0x07
     b0a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	4a e7       	ldi	r20, 0x7A	; 122
     b12:	53 e4       	ldi	r21, 0x43	; 67
     b14:	6d 81       	ldd	r22, Y+5	; 0x05
     b16:	7e 81       	ldd	r23, Y+6	; 0x06
     b18:	8f 81       	ldd	r24, Y+7	; 0x07
     b1a:	98 85       	ldd	r25, Y+8	; 0x08
     b1c:	3d d6       	rcall	.+3194   	; 0x1798 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	89 87       	std	Y+9, r24	; 0x09
     b24:	9a 87       	std	Y+10, r25	; 0x0a
     b26:	ab 87       	std	Y+11, r26	; 0x0b
     b28:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e8       	ldi	r20, 0x80	; 128
     b30:	5f e3       	ldi	r21, 0x3F	; 63
     b32:	69 85       	ldd	r22, Y+9	; 0x09
     b34:	7a 85       	ldd	r23, Y+10	; 0x0a
     b36:	8b 85       	ldd	r24, Y+11	; 0x0b
     b38:	9c 85       	ldd	r25, Y+12	; 0x0c
     b3a:	1d d5       	rcall	.+2618   	; 0x1576 <__cmpsf2>
     b3c:	88 23       	and	r24, r24
     b3e:	2c f4       	brge	.+10     	; 0xb4a <Active_State+0x90>
		__ticks = 1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	9e 87       	std	Y+14, r25	; 0x0e
     b46:	8d 87       	std	Y+13, r24	; 0x0d
     b48:	3b c0       	rjmp	.+118    	; 0xbc0 <Active_State+0x106>
	else if (__tmp > 65535)
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	4f e7       	ldi	r20, 0x7F	; 127
     b50:	57 e4       	ldi	r21, 0x47	; 71
     b52:	69 85       	ldd	r22, Y+9	; 0x09
     b54:	7a 85       	ldd	r23, Y+10	; 0x0a
     b56:	8b 85       	ldd	r24, Y+11	; 0x0b
     b58:	9c 85       	ldd	r25, Y+12	; 0x0c
     b5a:	1a d6       	rcall	.+3124   	; 0x1790 <__gesf2>
     b5c:	18 16       	cp	r1, r24
     b5e:	3c f5       	brge	.+78     	; 0xbae <Active_State+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e2       	ldi	r20, 0x20	; 32
     b66:	51 e4       	ldi	r21, 0x41	; 65
     b68:	6d 81       	ldd	r22, Y+5	; 0x05
     b6a:	7e 81       	ldd	r23, Y+6	; 0x06
     b6c:	8f 81       	ldd	r24, Y+7	; 0x07
     b6e:	98 85       	ldd	r25, Y+8	; 0x08
     b70:	13 d6       	rcall	.+3110   	; 0x1798 <__mulsf3>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	69 d5       	rcall	.+2770   	; 0x164e <__fixunssfsi>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	9e 87       	std	Y+14, r25	; 0x0e
     b82:	8d 87       	std	Y+13, r24	; 0x0d
     b84:	0f c0       	rjmp	.+30     	; 0xba4 <Active_State+0xea>
     b86:	89 e1       	ldi	r24, 0x19	; 25
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	98 8b       	std	Y+16, r25	; 0x10
     b8c:	8f 87       	std	Y+15, r24	; 0x0f
     b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b90:	98 89       	ldd	r25, Y+16	; 0x10
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <Active_State+0xd8>
     b96:	98 8b       	std	Y+16, r25	; 0x10
     b98:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	9e 87       	std	Y+14, r25	; 0x0e
     ba2:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	69 f7       	brne	.-38     	; 0xb86 <Active_State+0xcc>
     bac:	13 c0       	rjmp	.+38     	; 0xbd4 <Active_State+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bae:	69 85       	ldd	r22, Y+9	; 0x09
     bb0:	7a 85       	ldd	r23, Y+10	; 0x0a
     bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb6:	4b d5       	rcall	.+2710   	; 0x164e <__fixunssfsi>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	9e 87       	std	Y+14, r25	; 0x0e
     bbe:	8d 87       	std	Y+13, r24	; 0x0d
     bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc4:	9a 8b       	std	Y+18, r25	; 0x12
     bc6:	89 8b       	std	Y+17, r24	; 0x11
     bc8:	89 89       	ldd	r24, Y+17	; 0x11
     bca:	9a 89       	ldd	r25, Y+18	; 0x12
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <Active_State+0x112>
     bd0:	9a 8b       	std	Y+18, r25	; 0x12
     bd2:	89 8b       	std	Y+17, r24	; 0x11

	_delay_ms(5000);			// Default scan rate of the PIR requires 5 seconds before the next pulse is given
	
	/* Get pir count */
	active_pir_count = Get_Pir_count();
     bd4:	a1 d4       	rcall	.+2370   	; 0x1518 <Get_Pir_count>
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check if Customer present in the room */
	if((active_pir_count >= threshold_pir_count) && (!flag_uss_state_g))
     bda:	80 91 60 00 	lds	r24, 0x0060
     bde:	90 91 61 00 	lds	r25, 0x0061
     be2:	29 81       	ldd	r18, Y+1	; 0x01
     be4:	3a 81       	ldd	r19, Y+2	; 0x02
     be6:	28 17       	cp	r18, r24
     be8:	39 07       	cpc	r19, r25
     bea:	58 f0       	brcs	.+22     	; 0xc02 <Active_State+0x148>
     bec:	82 e6       	ldi	r24, 0x62	; 98
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	fc 01       	movw	r30, r24
     bf2:	80 81       	ld	r24, Z
     bf4:	84 70       	andi	r24, 0x04	; 4
     bf6:	88 23       	and	r24, r24
     bf8:	21 f4       	brne	.+8      	; 0xc02 <Active_State+0x148>
	{
		/* Do not change the state. Keep audio playing*/
		motascontroller_state = MOTAS_ACTIVE_STATE;
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	80 93 63 00 	sts	0x0063, r24
     c00:	1d c0       	rjmp	.+58     	; 0xc3c <Active_State+0x182>
	}
	/*Customer has left the room */
	else if(flag_uss_state_g)
     c02:	82 e6       	ldi	r24, 0x62	; 98
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	fc 01       	movw	r30, r24
     c08:	80 81       	ld	r24, Z
     c0a:	84 70       	andi	r24, 0x04	; 4
     c0c:	88 23       	and	r24, r24
     c0e:	b1 f0       	breq	.+44     	; 0xc3c <Active_State+0x182>
	{
		flag_uss_state_g = False;
     c10:	82 e6       	ldi	r24, 0x62	; 98
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	fc 01       	movw	r30, r24
     c16:	20 81       	ld	r18, Z
     c18:	2b 7f       	andi	r18, 0xFB	; 251
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
		/* Stop playing music */
		#if DEBUG_ON
		SendDebug("State changed MOTAS STOP PLaying");
		#endif
		Dfplayer_Cmd(CMD_PAUSE, 1);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	8e e0       	ldi	r24, 0x0E	; 14
     c24:	ab db       	rcall	.-2218   	; 0x37c <Dfplayer_Cmd>
		
		/* Change the status of music player to false(Music not playing) */
		flag_player_status_g = False;
     c26:	82 e6       	ldi	r24, 0x62	; 98
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 81       	ld	r18, Z
     c2e:	2d 7f       	andi	r18, 0xFD	; 253
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
		
		/* Change the state to standby state*/
		Reset_Pir_count();
     c34:	7c d4       	rcall	.+2296   	; 0x152e <Reset_Pir_count>
		motascontroller_state = MOTAS_STANDBY_STATE;	
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	80 93 63 00 	sts	0x0063, r24
	}
	
}
     c3c:	62 96       	adiw	r28, 0x12	; 18
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <Debugging_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Debugging_State(void)
{
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	ae 97       	sbiw	r28, 0x2e	; 46
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
	uint16_t pir_count = 0;
     c62:	1a 82       	std	Y+2, r1	; 0x02
     c64:	19 82       	std	Y+1, r1	; 0x01
	uint16_t uss_count = 0;
     c66:	1c 82       	std	Y+4, r1	; 0x04
     c68:	1b 82       	std	Y+3, r1	; 0x03
	#if DEBUG_ON
	SendDebug("STATE : DEBUGGING");
	#endif
		
	/* Yellow led light indicating start of Debugging mode */
	DebugLedTransmit(LED_ON ,LED_YELLOW);
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0b db       	rcall	.-2538   	; 0x286 <DebugLedTransmit>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	aa ef       	ldi	r26, 0xFA	; 250
     c76:	b4 e4       	ldi	r27, 0x44	; 68
     c78:	8d 83       	std	Y+5, r24	; 0x05
     c7a:	9e 83       	std	Y+6, r25	; 0x06
     c7c:	af 83       	std	Y+7, r26	; 0x07
     c7e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a e7       	ldi	r20, 0x7A	; 122
     c86:	53 e4       	ldi	r21, 0x43	; 67
     c88:	6d 81       	ldd	r22, Y+5	; 0x05
     c8a:	7e 81       	ldd	r23, Y+6	; 0x06
     c8c:	8f 81       	ldd	r24, Y+7	; 0x07
     c8e:	98 85       	ldd	r25, Y+8	; 0x08
     c90:	83 d5       	rcall	.+2822   	; 0x1798 <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	89 87       	std	Y+9, r24	; 0x09
     c98:	9a 87       	std	Y+10, r25	; 0x0a
     c9a:	ab 87       	std	Y+11, r26	; 0x0b
     c9c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e8       	ldi	r20, 0x80	; 128
     ca4:	5f e3       	ldi	r21, 0x3F	; 63
     ca6:	69 85       	ldd	r22, Y+9	; 0x09
     ca8:	7a 85       	ldd	r23, Y+10	; 0x0a
     caa:	8b 85       	ldd	r24, Y+11	; 0x0b
     cac:	9c 85       	ldd	r25, Y+12	; 0x0c
     cae:	63 d4       	rcall	.+2246   	; 0x1576 <__cmpsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	2c f4       	brge	.+10     	; 0xcbe <Debugging_State+0x70>
		__ticks = 1;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9e 87       	std	Y+14, r25	; 0x0e
     cba:	8d 87       	std	Y+13, r24	; 0x0d
     cbc:	3b c0       	rjmp	.+118    	; 0xd34 <Debugging_State+0xe6>
	else if (__tmp > 65535)
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	3f ef       	ldi	r19, 0xFF	; 255
     cc2:	4f e7       	ldi	r20, 0x7F	; 127
     cc4:	57 e4       	ldi	r21, 0x47	; 71
     cc6:	69 85       	ldd	r22, Y+9	; 0x09
     cc8:	7a 85       	ldd	r23, Y+10	; 0x0a
     cca:	8b 85       	ldd	r24, Y+11	; 0x0b
     ccc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cce:	60 d5       	rcall	.+2752   	; 0x1790 <__gesf2>
     cd0:	18 16       	cp	r1, r24
     cd2:	3c f5       	brge	.+78     	; 0xd22 <Debugging_State+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e2       	ldi	r20, 0x20	; 32
     cda:	51 e4       	ldi	r21, 0x41	; 65
     cdc:	6d 81       	ldd	r22, Y+5	; 0x05
     cde:	7e 81       	ldd	r23, Y+6	; 0x06
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	98 85       	ldd	r25, Y+8	; 0x08
     ce4:	59 d5       	rcall	.+2738   	; 0x1798 <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	af d4       	rcall	.+2398   	; 0x164e <__fixunssfsi>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	9e 87       	std	Y+14, r25	; 0x0e
     cf6:	8d 87       	std	Y+13, r24	; 0x0d
     cf8:	0f c0       	rjmp	.+30     	; 0xd18 <Debugging_State+0xca>
     cfa:	89 e1       	ldi	r24, 0x19	; 25
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	98 8b       	std	Y+16, r25	; 0x10
     d00:	8f 87       	std	Y+15, r24	; 0x0f
     d02:	8f 85       	ldd	r24, Y+15	; 0x0f
     d04:	98 89       	ldd	r25, Y+16	; 0x10
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <Debugging_State+0xb8>
     d0a:	98 8b       	std	Y+16, r25	; 0x10
     d0c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d10:	9e 85       	ldd	r25, Y+14	; 0x0e
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	9e 87       	std	Y+14, r25	; 0x0e
     d16:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d18:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	69 f7       	brne	.-38     	; 0xcfa <Debugging_State+0xac>
     d20:	13 c0       	rjmp	.+38     	; 0xd48 <Debugging_State+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d22:	69 85       	ldd	r22, Y+9	; 0x09
     d24:	7a 85       	ldd	r23, Y+10	; 0x0a
     d26:	8b 85       	ldd	r24, Y+11	; 0x0b
     d28:	9c 85       	ldd	r25, Y+12	; 0x0c
     d2a:	91 d4       	rcall	.+2338   	; 0x164e <__fixunssfsi>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	9e 87       	std	Y+14, r25	; 0x0e
     d32:	8d 87       	std	Y+13, r24	; 0x0d
     d34:	8d 85       	ldd	r24, Y+13	; 0x0d
     d36:	9e 85       	ldd	r25, Y+14	; 0x0e
     d38:	9a 8b       	std	Y+18, r25	; 0x12
     d3a:	89 8b       	std	Y+17, r24	; 0x11
     d3c:	89 89       	ldd	r24, Y+17	; 0x11
     d3e:	9a 89       	ldd	r25, Y+18	; 0x12
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <Debugging_State+0xf2>
     d44:	9a 8b       	std	Y+18, r25	; 0x12
     d46:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(2000);
	
	/* Get the pir count */
	Reset_Pir_count();
     d48:	f2 d3       	rcall	.+2020   	; 0x152e <Reset_Pir_count>
	pir_count = Get_Pir_count();
     d4a:	e6 d3       	rcall	.+1996   	; 0x1518 <Get_Pir_count>
     d4c:	9a 83       	std	Y+2, r25	; 0x02
     d4e:	89 83       	std	Y+1, r24	; 0x01

	/* Get the USS count */
	uss_count = Get_Uss_Count();
     d50:	8a d3       	rcall	.+1812   	; 0x1466 <Get_Uss_Count>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03

	/* Check if pir is triggered */
	if(pir_count > 1)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	91 05       	cpc	r25, r1
     d5e:	08 f4       	brcc	.+2      	; 0xd62 <Debugging_State+0x114>
     d60:	6f c0       	rjmp	.+222    	; 0xe40 <Debugging_State+0x1f2>
	{
		/* Red led light indicating pir triggered */
		DebugLedTransmit(LED_ON, LED_RED);
     d62:	62 e0       	ldi	r22, 0x02	; 2
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	8f da       	rcall	.-2786   	; 0x286 <DebugLedTransmit>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	aa ef       	ldi	r26, 0xFA	; 250
     d6e:	b4 e4       	ldi	r27, 0x44	; 68
     d70:	8b 8b       	std	Y+19, r24	; 0x13
     d72:	9c 8b       	std	Y+20, r25	; 0x14
     d74:	ad 8b       	std	Y+21, r26	; 0x15
     d76:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4a e7       	ldi	r20, 0x7A	; 122
     d7e:	53 e4       	ldi	r21, 0x43	; 67
     d80:	6b 89       	ldd	r22, Y+19	; 0x13
     d82:	7c 89       	ldd	r23, Y+20	; 0x14
     d84:	8d 89       	ldd	r24, Y+21	; 0x15
     d86:	9e 89       	ldd	r25, Y+22	; 0x16
     d88:	07 d5       	rcall	.+2574   	; 0x1798 <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	8f 8b       	std	Y+23, r24	; 0x17
     d90:	98 8f       	std	Y+24, r25	; 0x18
     d92:	a9 8f       	std	Y+25, r26	; 0x19
     d94:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e8       	ldi	r20, 0x80	; 128
     d9c:	5f e3       	ldi	r21, 0x3F	; 63
     d9e:	6f 89       	ldd	r22, Y+23	; 0x17
     da0:	78 8d       	ldd	r23, Y+24	; 0x18
     da2:	89 8d       	ldd	r24, Y+25	; 0x19
     da4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     da6:	e7 d3       	rcall	.+1998   	; 0x1576 <__cmpsf2>
     da8:	88 23       	and	r24, r24
     daa:	2c f4       	brge	.+10     	; 0xdb6 <Debugging_State+0x168>
		__ticks = 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9c 8f       	std	Y+28, r25	; 0x1c
     db2:	8b 8f       	std	Y+27, r24	; 0x1b
     db4:	3b c0       	rjmp	.+118    	; 0xe2c <Debugging_State+0x1de>
	else if (__tmp > 65535)
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	4f e7       	ldi	r20, 0x7F	; 127
     dbc:	57 e4       	ldi	r21, 0x47	; 71
     dbe:	6f 89       	ldd	r22, Y+23	; 0x17
     dc0:	78 8d       	ldd	r23, Y+24	; 0x18
     dc2:	89 8d       	ldd	r24, Y+25	; 0x19
     dc4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     dc6:	e4 d4       	rcall	.+2504   	; 0x1790 <__gesf2>
     dc8:	18 16       	cp	r1, r24
     dca:	3c f5       	brge	.+78     	; 0xe1a <Debugging_State+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e2       	ldi	r20, 0x20	; 32
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	6b 89       	ldd	r22, Y+19	; 0x13
     dd6:	7c 89       	ldd	r23, Y+20	; 0x14
     dd8:	8d 89       	ldd	r24, Y+21	; 0x15
     dda:	9e 89       	ldd	r25, Y+22	; 0x16
     ddc:	dd d4       	rcall	.+2490   	; 0x1798 <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	33 d4       	rcall	.+2150   	; 0x164e <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	9c 8f       	std	Y+28, r25	; 0x1c
     dee:	8b 8f       	std	Y+27, r24	; 0x1b
     df0:	0f c0       	rjmp	.+30     	; 0xe10 <Debugging_State+0x1c2>
     df2:	89 e1       	ldi	r24, 0x19	; 25
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	9e 8f       	std	Y+30, r25	; 0x1e
     df8:	8d 8f       	std	Y+29, r24	; 0x1d
     dfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <Debugging_State+0x1b0>
     e02:	9e 8f       	std	Y+30, r25	; 0x1e
     e04:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	9c 8f       	std	Y+28, r25	; 0x1c
     e0e:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	69 f7       	brne	.-38     	; 0xdf2 <Debugging_State+0x1a4>
     e18:	13 c0       	rjmp	.+38     	; 0xe40 <Debugging_State+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1a:	6f 89       	ldd	r22, Y+23	; 0x17
     e1c:	78 8d       	ldd	r23, Y+24	; 0x18
     e1e:	89 8d       	ldd	r24, Y+25	; 0x19
     e20:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e22:	15 d4       	rcall	.+2090   	; 0x164e <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	9c 8f       	std	Y+28, r25	; 0x1c
     e2a:	8b 8f       	std	Y+27, r24	; 0x1b
     e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e30:	98 a3       	std	Y+32, r25	; 0x20
     e32:	8f 8f       	std	Y+31, r24	; 0x1f
     e34:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e36:	98 a1       	ldd	r25, Y+32	; 0x20
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <Debugging_State+0x1ea>
     e3c:	98 a3       	std	Y+32, r25	; 0x20
     e3e:	8f 8f       	std	Y+31, r24	; 0x1f
	}
	/* Check if USS is triggered */
	else if(uss_count > debug_threshold_uss_count);
	{
		/* Orange led light indicating uss triggered */
		DebugLedTransmit(LED_ON, LED_ORANGE);
     e40:	63 e0       	ldi	r22, 0x03	; 3
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	20 da       	rcall	.-3008   	; 0x286 <DebugLedTransmit>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	aa ef       	ldi	r26, 0xFA	; 250
     e4c:	b4 e4       	ldi	r27, 0x44	; 68
     e4e:	89 a3       	std	Y+33, r24	; 0x21
     e50:	9a a3       	std	Y+34, r25	; 0x22
     e52:	ab a3       	std	Y+35, r26	; 0x23
     e54:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a e7       	ldi	r20, 0x7A	; 122
     e5c:	53 e4       	ldi	r21, 0x43	; 67
     e5e:	69 a1       	ldd	r22, Y+33	; 0x21
     e60:	7a a1       	ldd	r23, Y+34	; 0x22
     e62:	8b a1       	ldd	r24, Y+35	; 0x23
     e64:	9c a1       	ldd	r25, Y+36	; 0x24
     e66:	98 d4       	rcall	.+2352   	; 0x1798 <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	8d a3       	std	Y+37, r24	; 0x25
     e6e:	9e a3       	std	Y+38, r25	; 0x26
     e70:	af a3       	std	Y+39, r26	; 0x27
     e72:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	6d a1       	ldd	r22, Y+37	; 0x25
     e7e:	7e a1       	ldd	r23, Y+38	; 0x26
     e80:	8f a1       	ldd	r24, Y+39	; 0x27
     e82:	98 a5       	ldd	r25, Y+40	; 0x28
     e84:	78 d3       	rcall	.+1776   	; 0x1576 <__cmpsf2>
     e86:	88 23       	and	r24, r24
     e88:	2c f4       	brge	.+10     	; 0xe94 <Debugging_State+0x246>
		__ticks = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9a a7       	std	Y+42, r25	; 0x2a
     e90:	89 a7       	std	Y+41, r24	; 0x29
     e92:	3b c0       	rjmp	.+118    	; 0xf0a <Debugging_State+0x2bc>
	else if (__tmp > 65535)
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	3f ef       	ldi	r19, 0xFF	; 255
     e98:	4f e7       	ldi	r20, 0x7F	; 127
     e9a:	57 e4       	ldi	r21, 0x47	; 71
     e9c:	6d a1       	ldd	r22, Y+37	; 0x25
     e9e:	7e a1       	ldd	r23, Y+38	; 0x26
     ea0:	8f a1       	ldd	r24, Y+39	; 0x27
     ea2:	98 a5       	ldd	r25, Y+40	; 0x28
     ea4:	75 d4       	rcall	.+2282   	; 0x1790 <__gesf2>
     ea6:	18 16       	cp	r1, r24
     ea8:	3c f5       	brge	.+78     	; 0xef8 <Debugging_State+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	69 a1       	ldd	r22, Y+33	; 0x21
     eb4:	7a a1       	ldd	r23, Y+34	; 0x22
     eb6:	8b a1       	ldd	r24, Y+35	; 0x23
     eb8:	9c a1       	ldd	r25, Y+36	; 0x24
     eba:	6e d4       	rcall	.+2268   	; 0x1798 <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	c4 d3       	rcall	.+1928   	; 0x164e <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9a a7       	std	Y+42, r25	; 0x2a
     ecc:	89 a7       	std	Y+41, r24	; 0x29
     ece:	0f c0       	rjmp	.+30     	; 0xeee <Debugging_State+0x2a0>
     ed0:	89 e1       	ldi	r24, 0x19	; 25
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9c a7       	std	Y+44, r25	; 0x2c
     ed6:	8b a7       	std	Y+43, r24	; 0x2b
     ed8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eda:	9c a5       	ldd	r25, Y+44	; 0x2c
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <Debugging_State+0x28e>
     ee0:	9c a7       	std	Y+44, r25	; 0x2c
     ee2:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee4:	89 a5       	ldd	r24, Y+41	; 0x29
     ee6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	9a a7       	std	Y+42, r25	; 0x2a
     eec:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eee:	89 a5       	ldd	r24, Y+41	; 0x29
     ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	69 f7       	brne	.-38     	; 0xed0 <Debugging_State+0x282>
     ef6:	13 c0       	rjmp	.+38     	; 0xf1e <Debugging_State+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef8:	6d a1       	ldd	r22, Y+37	; 0x25
     efa:	7e a1       	ldd	r23, Y+38	; 0x26
     efc:	8f a1       	ldd	r24, Y+39	; 0x27
     efe:	98 a5       	ldd	r25, Y+40	; 0x28
     f00:	a6 d3       	rcall	.+1868   	; 0x164e <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9a a7       	std	Y+42, r25	; 0x2a
     f08:	89 a7       	std	Y+41, r24	; 0x29
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	9e a7       	std	Y+46, r25	; 0x2e
     f10:	8d a7       	std	Y+45, r24	; 0x2d
     f12:	8d a5       	ldd	r24, Y+45	; 0x2d
     f14:	9e a5       	ldd	r25, Y+46	; 0x2e
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <Debugging_State+0x2c8>
     f1a:	9e a7       	std	Y+46, r25	; 0x2e
     f1c:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(2000);
	}
}
     f1e:	ae 96       	adiw	r28, 0x2e	; 46
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <MotasController>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void MotasController(void)
{
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
     f38:	80 91 63 00 	lds	r24, 0x0063
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	91 05       	cpc	r25, r1
     f44:	a1 f0       	breq	.+40     	; 0xf6e <MotasController+0x3e>
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	34 f4       	brge	.+12     	; 0xf58 <MotasController+0x28>
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	59 f0       	breq	.+22     	; 0xf66 <MotasController+0x36>
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 05       	cpc	r25, r1
     f54:	51 f0       	breq	.+20     	; 0xf6a <MotasController+0x3a>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
     f56:	11 c0       	rjmp	.+34     	; 0xf7a <MotasController+0x4a>
*/
void MotasController(void)
{
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	91 05       	cpc	r25, r1
     f5c:	51 f0       	breq	.+20     	; 0xf72 <MotasController+0x42>
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	91 05       	cpc	r25, r1
     f62:	49 f0       	breq	.+18     	; 0xf76 <MotasController+0x46>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <MotasController+0x4a>
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
	{
		case MOTAS_INIT_STATE:
			Init_State();
     f66:	32 dc       	rcall	.-1948   	; 0x7cc <Init_State>
			break;	
     f68:	08 c0       	rjmp	.+16     	; 0xf7a <MotasController+0x4a>

		case MOTAS_CALIBRATION_STATE:
			Calibration_State();
     f6a:	5f dc       	rcall	.-1858   	; 0x82a <Calibration_State>
			break;	
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <MotasController+0x4a>

		case MOTAS_STANDBY_STATE:
			Standby_State();
     f6e:	ef dc       	rcall	.-1570   	; 0x94e <Standby_State>
			break;
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <MotasController+0x4a>

		case MOTAS_ACTIVE_STATE:
			Active_State();
     f72:	a3 dd       	rcall	.-1210   	; 0xaba <Active_State>
			break;
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <MotasController+0x4a>

		case MOTAS_DEBUGGING_STATE:		
			Debugging_State();	
     f76:	6b de       	rcall	.-810    	; 0xc4e <Debugging_State>
			break;
     f78:	00 00       	nop
		default : 
			/*Do nothing*/
			break;	

	}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <__vector_8>:

#define SET_USS_FLAG	({flag_register_controller |= (1 << 2);})
#define CLEAR_USS_FLAG  ({flag_register_controller &= ~(1 << 2);})

ISR(TIMER1_OVF_vect)
{
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	00 90 5f 00 	lds	r0, 0x005F
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	8f 93       	push	r24
     f8e:	9f 93       	push	r25
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	++timer1_ovf_count;
     f98:	80 91 6a 00 	lds	r24, 0x006A
     f9c:	90 91 6b 00 	lds	r25, 0x006B
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	90 93 6b 00 	sts	0x006B, r25
     fa6:	80 93 6a 00 	sts	0x006A, r24
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	0f 90       	pop	r0
     fb4:	00 92 5f 00 	sts	0x005F, r0
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <__vector_9>:

ISR(TIMER0_OVF_vect)
{
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	00 90 5f 00 	lds	r0, 0x005F
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	static timer_ovf_count = 0;
	
	if((timer_ovf_count++) == 500)
     fea:	80 91 6c 00 	lds	r24, 0x006C
     fee:	90 91 6d 00 	lds	r25, 0x006D
     ff2:	9c 01       	movw	r18, r24
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	30 93 6d 00 	sts	0x006D, r19
     ffc:	20 93 6c 00 	sts	0x006C, r18
    1000:	84 3f       	cpi	r24, 0xF4	; 244
    1002:	21 e0       	ldi	r18, 0x01	; 1
    1004:	92 07       	cpc	r25, r18
    1006:	91 f4       	brne	.+36     	; 0x102c <__vector_9+0x6e>
	{
		Trigger_Ultrasonic_Sensor();
    1008:	c0 d0       	rcall	.+384    	; 0x118a <Trigger_Ultrasonic_Sensor>
		timer_ovf_count = 0;
    100a:	10 92 6d 00 	sts	0x006D, r1
    100e:	10 92 6c 00 	sts	0x006C, r1
		TCCR0 &= ~(1 << CS00);		// Stop the timer. Timer is restarted in the USS echo received interrupt
    1012:	83 e5       	ldi	r24, 0x53	; 83
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	23 e5       	ldi	r18, 0x53	; 83
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	f9 01       	movw	r30, r18
    101c:	20 81       	ld	r18, Z
    101e:	2e 7f       	andi	r18, 0xFE	; 254
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
		TCNT0 = 0;
    1024:	82 e5       	ldi	r24, 0x52	; 82
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	fc 01       	movw	r30, r24
    102a:	10 82       	st	Z, r1
	}
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	bf 91       	pop	r27
    1036:	af 91       	pop	r26
    1038:	9f 91       	pop	r25
    103a:	8f 91       	pop	r24
    103c:	7f 91       	pop	r23
    103e:	6f 91       	pop	r22
    1040:	5f 91       	pop	r21
    1042:	4f 91       	pop	r20
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	00 92 5f 00 	sts	0x005F, r0
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <__vector_2>:

ISR(PIR_INTERRUPT_VECT)
{
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	00 90 5f 00 	lds	r0, 0x005F
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count++;
    106c:	80 91 66 00 	lds	r24, 0x0066
    1070:	90 91 67 00 	lds	r25, 0x0067
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	90 93 67 00 	sts	0x0067, r25
    107a:	80 93 66 00 	sts	0x0066, r24
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	0f 90       	pop	r0
    1088:	00 92 5f 00 	sts	0x005F, r0
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_1>:

ISR(USS_INTERRUPT_VECT)				
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	00 90 5f 00 	lds	r0, 0x005F
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	static uint8_t UssEdgeCount = 0;
	if (UssEdgeCount)		
    10be:	80 91 6e 00 	lds	r24, 0x006E
    10c2:	88 23       	and	r24, r24
    10c4:	c1 f1       	breq	.+112    	; 0x1136 <__vector_1+0xa4>
	{
		Stop_Timer1();
    10c6:	18 d2       	rcall	.+1072   	; 0x14f8 <Stop_Timer1>
		UssPulseCount = TCNT1;		// Store the time duration of the echo pulse. 
    10c8:	8c e4       	ldi	r24, 0x4C	; 76
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	fc 01       	movw	r30, r24
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	90 93 69 00 	sts	0x0069, r25
    10d6:	80 93 68 00 	sts	0x0068, r24
		timer1_ovf_count = 0;
    10da:	10 92 6b 00 	sts	0x006B, r1
    10de:	10 92 6a 00 	sts	0x006A, r1
		TCNT1 = 0;
    10e2:	8c e4       	ldi	r24, 0x4C	; 76
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	fc 01       	movw	r30, r24
    10e8:	11 82       	std	Z+1, r1	; 0x01
    10ea:	10 82       	st	Z, r1
		UssEdgeCount = 0;
    10ec:	10 92 6e 00 	sts	0x006E, r1
		MCUCR |= (1 << ISC01) | (1 << ISC00);												// Rising edge will trigger the next interrupt
    10f0:	85 e5       	ldi	r24, 0x55	; 85
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	25 e5       	ldi	r18, 0x55	; 85
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	f9 01       	movw	r30, r18
    10fa:	20 81       	ld	r18, Z
    10fc:	23 60       	ori	r18, 0x03	; 3
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
		TCCR0 |= (1 << CS00);					// Start the timer0 to wait for 1ms to trigger the USS
    1102:	83 e5       	ldi	r24, 0x53	; 83
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	23 e5       	ldi	r18, 0x53	; 83
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	21 60       	ori	r18, 0x01	; 1
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
		
		if(UssPulseCount < threshold_uss_count)
    1114:	20 91 68 00 	lds	r18, 0x0068
    1118:	30 91 69 00 	lds	r19, 0x0069
    111c:	80 91 64 00 	lds	r24, 0x0064
    1120:	90 91 65 00 	lds	r25, 0x0065
    1124:	28 17       	cp	r18, r24
    1126:	39 07       	cpc	r19, r25
    1128:	e0 f4       	brcc	.+56     	; 0x1162 <__vector_1+0xd0>
		{
			#if DEBUG_ON
			SendDebug("Thres_cross");
			USART_Transmit_dec(UssPulseCount);
			#endif	
			SET_USS_FLAG;	
    112a:	80 91 62 00 	lds	r24, 0x0062
    112e:	84 60       	ori	r24, 0x04	; 4
    1130:	80 93 62 00 	sts	0x0062, r24
    1134:	16 c0       	rjmp	.+44     	; 0x1162 <__vector_1+0xd0>
		}
	}
	else 
	{
		Start_Timer1();
    1136:	d0 d1       	rcall	.+928    	; 0x14d8 <Start_Timer1>
		UssEdgeCount = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 6e 00 	sts	0x006E, r24
		MCUCR &= ~(1 << ISC00);										// falling edge for INT0 enabled
    113e:	85 e5       	ldi	r24, 0x55	; 85
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	25 e5       	ldi	r18, 0x55	; 85
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	f9 01       	movw	r30, r18
    1148:	20 81       	ld	r18, Z
    114a:	2e 7f       	andi	r18, 0xFE	; 254
    114c:	fc 01       	movw	r30, r24
    114e:	20 83       	st	Z, r18
		MCUCR |= (1 << ISC01);
    1150:	85 e5       	ldi	r24, 0x55	; 85
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	25 e5       	ldi	r18, 0x55	; 85
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	f9 01       	movw	r30, r18
    115a:	20 81       	ld	r18, Z
    115c:	22 60       	ori	r18, 0x02	; 2
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
	}
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	00 92 5f 00 	sts	0x005F, r0
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <Trigger_Ultrasonic_Sensor>:

void Trigger_Ultrasonic_Sensor()									// Function tested for 10us trigger 
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	a0 97       	sbiw	r28, 0x20	; 32
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
	SETBIT(USS_TRIGGER_PORT, USS_TRIGGER_PIN);
    119e:	88 e3       	ldi	r24, 0x38	; 56
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	28 e3       	ldi	r18, 0x38	; 56
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	f9 01       	movw	r30, r18
    11a8:	20 81       	ld	r18, Z
    11aa:	22 60       	ori	r18, 0x02	; 2
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 83       	st	Z, r18
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a0 e2       	ldi	r26, 0x20	; 32
    11b6:	b1 e4       	ldi	r27, 0x41	; 65
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	ab 83       	std	Y+3, r26	; 0x03
    11be:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    11c0:	2b ea       	ldi	r18, 0xAB	; 171
    11c2:	3a ea       	ldi	r19, 0xAA	; 170
    11c4:	4a ea       	ldi	r20, 0xAA	; 170
    11c6:	5e e3       	ldi	r21, 0x3E	; 62
    11c8:	69 81       	ldd	r22, Y+1	; 0x01
    11ca:	7a 81       	ldd	r23, Y+2	; 0x02
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	e3 d2       	rcall	.+1478   	; 0x1798 <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	af 83       	std	Y+7, r26	; 0x07
    11dc:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5e e3       	ldi	r21, 0x3E	; 62
    11e6:	69 81       	ldd	r22, Y+1	; 0x01
    11e8:	7a 81       	ldd	r23, Y+2	; 0x02
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	d4 d2       	rcall	.+1448   	; 0x1798 <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	89 87       	std	Y+9, r24	; 0x09
    11f6:	9a 87       	std	Y+10, r25	; 0x0a
    11f8:	ab 87       	std	Y+11, r26	; 0x0b
    11fa:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5f e3       	ldi	r21, 0x3F	; 63
    1204:	6d 81       	ldd	r22, Y+5	; 0x05
    1206:	7e 81       	ldd	r23, Y+6	; 0x06
    1208:	8f 81       	ldd	r24, Y+7	; 0x07
    120a:	98 85       	ldd	r25, Y+8	; 0x08
    120c:	b4 d1       	rcall	.+872    	; 0x1576 <__cmpsf2>
    120e:	88 23       	and	r24, r24
    1210:	1c f4       	brge	.+6      	; 0x1218 <Trigger_Ultrasonic_Sensor+0x8e>
		__ticks = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	8d 87       	std	Y+13, r24	; 0x0d
    1216:	a7 c0       	rjmp	.+334    	; 0x1366 <Trigger_Ultrasonic_Sensor+0x1dc>
	else if (__tmp2 > 65535)
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	4f e7       	ldi	r20, 0x7F	; 127
    121e:	57 e4       	ldi	r21, 0x47	; 71
    1220:	69 85       	ldd	r22, Y+9	; 0x09
    1222:	7a 85       	ldd	r23, Y+10	; 0x0a
    1224:	8b 85       	ldd	r24, Y+11	; 0x0b
    1226:	9c 85       	ldd	r25, Y+12	; 0x0c
    1228:	b3 d2       	rcall	.+1382   	; 0x1790 <__gesf2>
    122a:	18 16       	cp	r1, r24
    122c:	0c f0       	brlt	.+2      	; 0x1230 <Trigger_Ultrasonic_Sensor+0xa6>
    122e:	74 c0       	rjmp	.+232    	; 0x1318 <Trigger_Ultrasonic_Sensor+0x18e>
	{
		_delay_ms(__us / 1000.0);
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4a e7       	ldi	r20, 0x7A	; 122
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	69 81       	ldd	r22, Y+1	; 0x01
    123a:	7a 81       	ldd	r23, Y+2	; 0x02
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	9e d1       	rcall	.+828    	; 0x157e <__divsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8e 87       	std	Y+14, r24	; 0x0e
    1248:	9f 87       	std	Y+15, r25	; 0x0f
    124a:	a8 8b       	std	Y+16, r26	; 0x10
    124c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a e7       	ldi	r20, 0x7A	; 122
    1254:	53 e4       	ldi	r21, 0x43	; 67
    1256:	6e 85       	ldd	r22, Y+14	; 0x0e
    1258:	7f 85       	ldd	r23, Y+15	; 0x0f
    125a:	88 89       	ldd	r24, Y+16	; 0x10
    125c:	99 89       	ldd	r25, Y+17	; 0x11
    125e:	9c d2       	rcall	.+1336   	; 0x1798 <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	8a 8b       	std	Y+18, r24	; 0x12
    1266:	9b 8b       	std	Y+19, r25	; 0x13
    1268:	ac 8b       	std	Y+20, r26	; 0x14
    126a:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	6a 89       	ldd	r22, Y+18	; 0x12
    1276:	7b 89       	ldd	r23, Y+19	; 0x13
    1278:	8c 89       	ldd	r24, Y+20	; 0x14
    127a:	9d 89       	ldd	r25, Y+21	; 0x15
    127c:	7c d1       	rcall	.+760    	; 0x1576 <__cmpsf2>
    127e:	88 23       	and	r24, r24
    1280:	2c f4       	brge	.+10     	; 0x128c <Trigger_Ultrasonic_Sensor+0x102>
		__ticks = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9f 8b       	std	Y+23, r25	; 0x17
    1288:	8e 8b       	std	Y+22, r24	; 0x16
    128a:	3b c0       	rjmp	.+118    	; 0x1302 <Trigger_Ultrasonic_Sensor+0x178>
	else if (__tmp > 65535)
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	57 e4       	ldi	r21, 0x47	; 71
    1294:	6a 89       	ldd	r22, Y+18	; 0x12
    1296:	7b 89       	ldd	r23, Y+19	; 0x13
    1298:	8c 89       	ldd	r24, Y+20	; 0x14
    129a:	9d 89       	ldd	r25, Y+21	; 0x15
    129c:	79 d2       	rcall	.+1266   	; 0x1790 <__gesf2>
    129e:	18 16       	cp	r1, r24
    12a0:	3c f5       	brge	.+78     	; 0x12f0 <Trigger_Ultrasonic_Sensor+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e2       	ldi	r20, 0x20	; 32
    12a8:	51 e4       	ldi	r21, 0x41	; 65
    12aa:	6e 85       	ldd	r22, Y+14	; 0x0e
    12ac:	7f 85       	ldd	r23, Y+15	; 0x0f
    12ae:	88 89       	ldd	r24, Y+16	; 0x10
    12b0:	99 89       	ldd	r25, Y+17	; 0x11
    12b2:	72 d2       	rcall	.+1252   	; 0x1798 <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	c8 d1       	rcall	.+912    	; 0x164e <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9f 8b       	std	Y+23, r25	; 0x17
    12c4:	8e 8b       	std	Y+22, r24	; 0x16
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <Trigger_Ultrasonic_Sensor+0x15c>
    12c8:	89 e1       	ldi	r24, 0x19	; 25
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	99 8f       	std	Y+25, r25	; 0x19
    12ce:	88 8f       	std	Y+24, r24	; 0x18
    12d0:	88 8d       	ldd	r24, Y+24	; 0x18
    12d2:	99 8d       	ldd	r25, Y+25	; 0x19
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <Trigger_Ultrasonic_Sensor+0x14a>
    12d8:	99 8f       	std	Y+25, r25	; 0x19
    12da:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8e 89       	ldd	r24, Y+22	; 0x16
    12de:	9f 89       	ldd	r25, Y+23	; 0x17
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9f 8b       	std	Y+23, r25	; 0x17
    12e4:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8e 89       	ldd	r24, Y+22	; 0x16
    12e8:	9f 89       	ldd	r25, Y+23	; 0x17
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <Trigger_Ultrasonic_Sensor+0x13e>
    12ee:	3b c0       	rjmp	.+118    	; 0x1366 <Trigger_Ultrasonic_Sensor+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	6a 89       	ldd	r22, Y+18	; 0x12
    12f2:	7b 89       	ldd	r23, Y+19	; 0x13
    12f4:	8c 89       	ldd	r24, Y+20	; 0x14
    12f6:	9d 89       	ldd	r25, Y+21	; 0x15
    12f8:	aa d1       	rcall	.+852    	; 0x164e <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9f 8b       	std	Y+23, r25	; 0x17
    1300:	8e 8b       	std	Y+22, r24	; 0x16
    1302:	8e 89       	ldd	r24, Y+22	; 0x16
    1304:	9f 89       	ldd	r25, Y+23	; 0x17
    1306:	9b 8f       	std	Y+27, r25	; 0x1b
    1308:	8a 8f       	std	Y+26, r24	; 0x1a
    130a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    130c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <Trigger_Ultrasonic_Sensor+0x184>
    1312:	9b 8f       	std	Y+27, r25	; 0x1b
    1314:	8a 8f       	std	Y+26, r24	; 0x1a
    1316:	27 c0       	rjmp	.+78     	; 0x1366 <Trigger_Ultrasonic_Sensor+0x1dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	53 e4       	ldi	r21, 0x43	; 67
    1320:	6d 81       	ldd	r22, Y+5	; 0x05
    1322:	7e 81       	ldd	r23, Y+6	; 0x06
    1324:	8f 81       	ldd	r24, Y+7	; 0x07
    1326:	98 85       	ldd	r25, Y+8	; 0x08
    1328:	33 d2       	rcall	.+1126   	; 0x1790 <__gesf2>
    132a:	18 16       	cp	r1, r24
    132c:	a4 f4       	brge	.+40     	; 0x1356 <Trigger_Ultrasonic_Sensor+0x1cc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    132e:	69 85       	ldd	r22, Y+9	; 0x09
    1330:	7a 85       	ldd	r23, Y+10	; 0x0a
    1332:	8b 85       	ldd	r24, Y+11	; 0x0b
    1334:	9c 85       	ldd	r25, Y+12	; 0x0c
    1336:	8b d1       	rcall	.+790    	; 0x164e <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9d 8f       	std	Y+29, r25	; 0x1d
    133e:	8c 8f       	std	Y+28, r24	; 0x1c
    1340:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1342:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1344:	9f 8f       	std	Y+31, r25	; 0x1f
    1346:	8e 8f       	std	Y+30, r24	; 0x1e
    1348:	8e 8d       	ldd	r24, Y+30	; 0x1e
    134a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <Trigger_Ultrasonic_Sensor+0x1c2>
    1350:	9f 8f       	std	Y+31, r25	; 0x1f
    1352:	8e 8f       	std	Y+30, r24	; 0x1e
    1354:	0e c0       	rjmp	.+28     	; 0x1372 <Trigger_Ultrasonic_Sensor+0x1e8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1356:	6d 81       	ldd	r22, Y+5	; 0x05
    1358:	7e 81       	ldd	r23, Y+6	; 0x06
    135a:	8f 81       	ldd	r24, Y+7	; 0x07
    135c:	98 85       	ldd	r25, Y+8	; 0x08
    135e:	77 d1       	rcall	.+750    	; 0x164e <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	8d 87       	std	Y+13, r24	; 0x0d
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    136a:	88 a1       	ldd	r24, Y+32	; 0x20
    136c:	8a 95       	dec	r24
    136e:	f1 f7       	brne	.-4      	; 0x136c <Trigger_Ultrasonic_Sensor+0x1e2>
    1370:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(10);													// 10us Pulse as per datasheet of HC-SR04 Ultrasonic Sensor
	CLEARBIT(USS_TRIGGER_PORT, USS_TRIGGER_PIN);
    1372:	88 e3       	ldi	r24, 0x38	; 56
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	28 e3       	ldi	r18, 0x38	; 56
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	f9 01       	movw	r30, r18
    137c:	20 81       	ld	r18, Z
    137e:	2d 7f       	andi	r18, 0xFD	; 253
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
}
    1384:	a0 96       	adiw	r28, 0x20	; 32
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <Init_Pir>:

void Init_Pir()
{
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PIR_INPUT_DIR_REG, PIR_INPUT_PIN);						// Set the pin direction as input
    139e:	81 e3       	ldi	r24, 0x31	; 49
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	21 e3       	ldi	r18, 0x31	; 49
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	f9 01       	movw	r30, r18
    13a8:	20 81       	ld	r18, Z
    13aa:	27 7f       	andi	r18, 0xF7	; 247
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18
	SETBIT(PIR_INPUT_PORT, PIR_INPUT_PIN);							// Setup the controllers internal Pull up resistor
    13b0:	82 e3       	ldi	r24, 0x32	; 50
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	22 e3       	ldi	r18, 0x32	; 50
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	f9 01       	movw	r30, r18
    13ba:	20 81       	ld	r18, Z
    13bc:	28 60       	ori	r18, 0x08	; 8
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18

	MCUCR |= (1 << ISC11) | (1 << ISC10);
    13c2:	85 e5       	ldi	r24, 0x55	; 85
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	25 e5       	ldi	r18, 0x55	; 85
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	20 81       	ld	r18, Z
    13ce:	2c 60       	ori	r18, 0x0C	; 12
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
	GICR |= (1 << INT1);
    13d4:	8b e5       	ldi	r24, 0x5B	; 91
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	2b e5       	ldi	r18, 0x5B	; 91
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	20 68       	ori	r18, 0x80	; 128
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
}
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <Init_Ultrasonic_Sensor>:

void Init_Ultrasonic_Sensor()
{
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	USS_TRIGGER_DIR_REG |= (1 << USS_TRIGGER_PIN);					// Set the pin direction as output
    13f4:	87 e3       	ldi	r24, 0x37	; 55
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	27 e3       	ldi	r18, 0x37	; 55
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	f9 01       	movw	r30, r18
    13fe:	20 81       	ld	r18, Z
    1400:	22 60       	ori	r18, 0x02	; 2
    1402:	fc 01       	movw	r30, r24
    1404:	20 83       	st	Z, r18
	USS_TRIGGER_PORT &= ~(1 << USS_TRIGGER_PIN);					// Initial state of trigger is LOW
    1406:	88 e3       	ldi	r24, 0x38	; 56
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	28 e3       	ldi	r18, 0x38	; 56
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	f9 01       	movw	r30, r18
    1410:	20 81       	ld	r18, Z
    1412:	2d 7f       	andi	r18, 0xFD	; 253
    1414:	fc 01       	movw	r30, r24
    1416:	20 83       	st	Z, r18
	
	USS_ECHO_DIR_REG &= ~(1 << USS_ECHO_PIN);						// ECHO pin is set a s input
    1418:	81 e3       	ldi	r24, 0x31	; 49
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	21 e3       	ldi	r18, 0x31	; 49
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	20 81       	ld	r18, Z
    1424:	2b 7f       	andi	r18, 0xFB	; 251
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
	USS_ECHO_PORT |= (1 << USS_ECHO_PIN);							// Keep ECHO pin pulled up
    142a:	82 e3       	ldi	r24, 0x32	; 50
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	22 e3       	ldi	r18, 0x32	; 50
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	f9 01       	movw	r30, r18
    1434:	20 81       	ld	r18, Z
    1436:	24 60       	ori	r18, 0x04	; 4
    1438:	fc 01       	movw	r30, r24
    143a:	20 83       	st	Z, r18
	
	/* Setup rising edge interrupt on the echo pin	*/	
	MCUCR |= (1 << ISC01) | (1 << ISC00);							// Set the interrupt to trigger at the rising edge.
    143c:	85 e5       	ldi	r24, 0x55	; 85
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	25 e5       	ldi	r18, 0x55	; 85
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	f9 01       	movw	r30, r18
    1446:	20 81       	ld	r18, Z
    1448:	23 60       	ori	r18, 0x03	; 3
    144a:	fc 01       	movw	r30, r24
    144c:	20 83       	st	Z, r18
	GICR |= (1 << INT0);
    144e:	8b e5       	ldi	r24, 0x5B	; 91
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	2b e5       	ldi	r18, 0x5B	; 91
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	f9 01       	movw	r30, r18
    1458:	20 81       	ld	r18, Z
    145a:	20 64       	ori	r18, 0x40	; 64
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <Get_Uss_Count>:
{
	CLEARBIT(PORTC, led_color);
}

uint16_t Get_Uss_Count()
{
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	// TODO: replace with a flag to check if the USS ECHO pulse has been received Speed can be 
	return UssPulseCount;
    146e:	80 91 68 00 	lds	r24, 0x0068
    1472:	90 91 69 00 	lds	r25, 0x0069
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <Init_Timer0>:


/* Timer 0 will be used to auto trigger the USS	@ periodic intervals	*/
void Init_Timer0()
{
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TOIE0);
    1484:	89 e5       	ldi	r24, 0x59	; 89
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	29 e5       	ldi	r18, 0x59	; 89
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	f9 01       	movw	r30, r18
    148e:	20 81       	ld	r18, Z
    1490:	21 60       	ori	r18, 0x01	; 1
    1492:	fc 01       	movw	r30, r24
    1494:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS00);		// Start the timer	default 256us overflow rate @ 1MHZ.
    1496:	83 e5       	ldi	r24, 0x53	; 83
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	23 e5       	ldi	r18, 0x53	; 83
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	f9 01       	movw	r30, r18
    14a0:	20 81       	ld	r18, Z
    14a2:	21 60       	ori	r18, 0x01	; 1
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <Init_Timer1>:

void Init_Timer1()
{
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    14b6:	8c e4       	ldi	r24, 0x4C	; 76
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	fc 01       	movw	r30, r24
    14bc:	11 82       	std	Z+1, r1	; 0x01
    14be:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE1);
    14c0:	89 e5       	ldi	r24, 0x59	; 89
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	29 e5       	ldi	r18, 0x59	; 89
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	f9 01       	movw	r30, r18
    14ca:	20 81       	ld	r18, Z
    14cc:	24 60       	ori	r18, 0x04	; 4
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <Start_Timer1>:

void Start_Timer1()
{
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS10);		// No pre-scalar
    14e0:	8e e4       	ldi	r24, 0x4E	; 78
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	2e e4       	ldi	r18, 0x4E	; 78
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	f9 01       	movw	r30, r18
    14ea:	20 81       	ld	r18, Z
    14ec:	21 60       	ori	r18, 0x01	; 1
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18
}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <Stop_Timer1>:

void Stop_Timer1()
{
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS10);
    1500:	8e e4       	ldi	r24, 0x4E	; 78
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	2e e4       	ldi	r18, 0x4E	; 78
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	f9 01       	movw	r30, r18
    150a:	20 81       	ld	r18, Z
    150c:	2e 7f       	andi	r18, 0xFE	; 254
    150e:	fc 01       	movw	r30, r24
    1510:	20 83       	st	Z, r18
}
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <Get_Pir_count>:

uint16_t Get_Pir_count()
{
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	#if DEBUG_ON
	SendDebug("PIR@");
	USART_Transmit_dec(pir_trigger_count);
	#endif
	return pir_trigger_count;
    1520:	80 91 66 00 	lds	r24, 0x0066
    1524:	90 91 67 00 	lds	r25, 0x0067
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <Reset_Pir_count>:

void Reset_Pir_count()
{
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count = 0;
    1536:	10 92 67 00 	sts	0x0067, r1
    153a:	10 92 66 00 	sts	0x0066, r1
}
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <Init_Gpio>:
	
	return 0;
}

void Init_Gpio()
{
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	RELAY_PORT_DIR_REG |= (1 << RELAY_PIN);		// Set the relay pin as a output pin
    154c:	87 e3       	ldi	r24, 0x37	; 55
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	27 e3       	ldi	r18, 0x37	; 55
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	f9 01       	movw	r30, r18
    1556:	20 81       	ld	r18, Z
    1558:	21 60       	ori	r18, 0x01	; 1
    155a:	fc 01       	movw	r30, r24
    155c:	20 83       	st	Z, r18
	RELAY_PORT &= ~(1 << RELAY_PIN);			// Initialise relay in OFF state.
    155e:	88 e3       	ldi	r24, 0x38	; 56
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	28 e3       	ldi	r18, 0x38	; 56
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	f9 01       	movw	r30, r18
    1568:	20 81       	ld	r18, Z
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <__cmpsf2>:
    1576:	97 d0       	rcall	.+302    	; 0x16a6 <__fp_cmp>
    1578:	08 f4       	brcc	.+2      	; 0x157c <__cmpsf2+0x6>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	08 95       	ret

0000157e <__divsf3>:
    157e:	0c d0       	rcall	.+24     	; 0x1598 <__divsf3x>
    1580:	cd c0       	rjmp	.+410    	; 0x171c <__fp_round>
    1582:	c5 d0       	rcall	.+394    	; 0x170e <__fp_pscB>
    1584:	40 f0       	brcs	.+16     	; 0x1596 <__divsf3+0x18>
    1586:	bc d0       	rcall	.+376    	; 0x1700 <__fp_pscA>
    1588:	30 f0       	brcs	.+12     	; 0x1596 <__divsf3+0x18>
    158a:	21 f4       	brne	.+8      	; 0x1594 <__divsf3+0x16>
    158c:	5f 3f       	cpi	r21, 0xFF	; 255
    158e:	19 f0       	breq	.+6      	; 0x1596 <__divsf3+0x18>
    1590:	ae c0       	rjmp	.+348    	; 0x16ee <__fp_inf>
    1592:	51 11       	cpse	r21, r1
    1594:	f7 c0       	rjmp	.+494    	; 0x1784 <__fp_szero>
    1596:	b1 c0       	rjmp	.+354    	; 0x16fa <__fp_nan>

00001598 <__divsf3x>:
    1598:	d2 d0       	rcall	.+420    	; 0x173e <__fp_split3>
    159a:	98 f3       	brcs	.-26     	; 0x1582 <__divsf3+0x4>

0000159c <__divsf3_pse>:
    159c:	99 23       	and	r25, r25
    159e:	c9 f3       	breq	.-14     	; 0x1592 <__divsf3+0x14>
    15a0:	55 23       	and	r21, r21
    15a2:	b1 f3       	breq	.-20     	; 0x1590 <__divsf3+0x12>
    15a4:	95 1b       	sub	r25, r21
    15a6:	55 0b       	sbc	r21, r21
    15a8:	bb 27       	eor	r27, r27
    15aa:	aa 27       	eor	r26, r26
    15ac:	62 17       	cp	r22, r18
    15ae:	73 07       	cpc	r23, r19
    15b0:	84 07       	cpc	r24, r20
    15b2:	38 f0       	brcs	.+14     	; 0x15c2 <__divsf3_pse+0x26>
    15b4:	9f 5f       	subi	r25, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	22 0f       	add	r18, r18
    15ba:	33 1f       	adc	r19, r19
    15bc:	44 1f       	adc	r20, r20
    15be:	aa 1f       	adc	r26, r26
    15c0:	a9 f3       	breq	.-22     	; 0x15ac <__divsf3_pse+0x10>
    15c2:	33 d0       	rcall	.+102    	; 0x162a <__divsf3_pse+0x8e>
    15c4:	0e 2e       	mov	r0, r30
    15c6:	3a f0       	brmi	.+14     	; 0x15d6 <__divsf3_pse+0x3a>
    15c8:	e0 e8       	ldi	r30, 0x80	; 128
    15ca:	30 d0       	rcall	.+96     	; 0x162c <__divsf3_pse+0x90>
    15cc:	91 50       	subi	r25, 0x01	; 1
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	e6 95       	lsr	r30
    15d2:	00 1c       	adc	r0, r0
    15d4:	ca f7       	brpl	.-14     	; 0x15c8 <__divsf3_pse+0x2c>
    15d6:	29 d0       	rcall	.+82     	; 0x162a <__divsf3_pse+0x8e>
    15d8:	fe 2f       	mov	r31, r30
    15da:	27 d0       	rcall	.+78     	; 0x162a <__divsf3_pse+0x8e>
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	bb 1f       	adc	r27, r27
    15e4:	26 17       	cp	r18, r22
    15e6:	37 07       	cpc	r19, r23
    15e8:	48 07       	cpc	r20, r24
    15ea:	ab 07       	cpc	r26, r27
    15ec:	b0 e8       	ldi	r27, 0x80	; 128
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <__divsf3_pse+0x56>
    15f0:	bb 0b       	sbc	r27, r27
    15f2:	80 2d       	mov	r24, r0
    15f4:	bf 01       	movw	r22, r30
    15f6:	ff 27       	eor	r31, r31
    15f8:	93 58       	subi	r25, 0x83	; 131
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	2a f0       	brmi	.+10     	; 0x1608 <__divsf3_pse+0x6c>
    15fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1600:	51 05       	cpc	r21, r1
    1602:	68 f0       	brcs	.+26     	; 0x161e <__divsf3_pse+0x82>
    1604:	74 c0       	rjmp	.+232    	; 0x16ee <__fp_inf>
    1606:	be c0       	rjmp	.+380    	; 0x1784 <__fp_szero>
    1608:	5f 3f       	cpi	r21, 0xFF	; 255
    160a:	ec f3       	brlt	.-6      	; 0x1606 <__divsf3_pse+0x6a>
    160c:	98 3e       	cpi	r25, 0xE8	; 232
    160e:	dc f3       	brlt	.-10     	; 0x1606 <__divsf3_pse+0x6a>
    1610:	86 95       	lsr	r24
    1612:	77 95       	ror	r23
    1614:	67 95       	ror	r22
    1616:	b7 95       	ror	r27
    1618:	f7 95       	ror	r31
    161a:	9f 5f       	subi	r25, 0xFF	; 255
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__divsf3_pse+0x74>
    161e:	88 0f       	add	r24, r24
    1620:	91 1d       	adc	r25, r1
    1622:	96 95       	lsr	r25
    1624:	87 95       	ror	r24
    1626:	97 f9       	bld	r25, 7
    1628:	08 95       	ret
    162a:	e1 e0       	ldi	r30, 0x01	; 1
    162c:	66 0f       	add	r22, r22
    162e:	77 1f       	adc	r23, r23
    1630:	88 1f       	adc	r24, r24
    1632:	bb 1f       	adc	r27, r27
    1634:	62 17       	cp	r22, r18
    1636:	73 07       	cpc	r23, r19
    1638:	84 07       	cpc	r24, r20
    163a:	ba 07       	cpc	r27, r26
    163c:	20 f0       	brcs	.+8      	; 0x1646 <__divsf3_pse+0xaa>
    163e:	62 1b       	sub	r22, r18
    1640:	73 0b       	sbc	r23, r19
    1642:	84 0b       	sbc	r24, r20
    1644:	ba 0b       	sbc	r27, r26
    1646:	ee 1f       	adc	r30, r30
    1648:	88 f7       	brcc	.-30     	; 0x162c <__divsf3_pse+0x90>
    164a:	e0 95       	com	r30
    164c:	08 95       	ret

0000164e <__fixunssfsi>:
    164e:	7f d0       	rcall	.+254    	; 0x174e <__fp_splitA>
    1650:	88 f0       	brcs	.+34     	; 0x1674 <__fixunssfsi+0x26>
    1652:	9f 57       	subi	r25, 0x7F	; 127
    1654:	90 f0       	brcs	.+36     	; 0x167a <__fixunssfsi+0x2c>
    1656:	b9 2f       	mov	r27, r25
    1658:	99 27       	eor	r25, r25
    165a:	b7 51       	subi	r27, 0x17	; 23
    165c:	a0 f0       	brcs	.+40     	; 0x1686 <__fixunssfsi+0x38>
    165e:	d1 f0       	breq	.+52     	; 0x1694 <__fixunssfsi+0x46>
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	88 1f       	adc	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	1a f0       	brmi	.+6      	; 0x1670 <__fixunssfsi+0x22>
    166a:	ba 95       	dec	r27
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__fixunssfsi+0x12>
    166e:	12 c0       	rjmp	.+36     	; 0x1694 <__fixunssfsi+0x46>
    1670:	b1 30       	cpi	r27, 0x01	; 1
    1672:	81 f0       	breq	.+32     	; 0x1694 <__fixunssfsi+0x46>
    1674:	86 d0       	rcall	.+268    	; 0x1782 <__fp_zero>
    1676:	b1 e0       	ldi	r27, 0x01	; 1
    1678:	08 95       	ret
    167a:	83 c0       	rjmp	.+262    	; 0x1782 <__fp_zero>
    167c:	67 2f       	mov	r22, r23
    167e:	78 2f       	mov	r23, r24
    1680:	88 27       	eor	r24, r24
    1682:	b8 5f       	subi	r27, 0xF8	; 248
    1684:	39 f0       	breq	.+14     	; 0x1694 <__fixunssfsi+0x46>
    1686:	b9 3f       	cpi	r27, 0xF9	; 249
    1688:	cc f3       	brlt	.-14     	; 0x167c <__fixunssfsi+0x2e>
    168a:	86 95       	lsr	r24
    168c:	77 95       	ror	r23
    168e:	67 95       	ror	r22
    1690:	b3 95       	inc	r27
    1692:	d9 f7       	brne	.-10     	; 0x168a <__fixunssfsi+0x3c>
    1694:	3e f4       	brtc	.+14     	; 0x16a4 <__fixunssfsi+0x56>
    1696:	90 95       	com	r25
    1698:	80 95       	com	r24
    169a:	70 95       	com	r23
    169c:	61 95       	neg	r22
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8f 4f       	sbci	r24, 0xFF	; 255
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	08 95       	ret

000016a6 <__fp_cmp>:
    16a6:	99 0f       	add	r25, r25
    16a8:	00 08       	sbc	r0, r0
    16aa:	55 0f       	add	r21, r21
    16ac:	aa 0b       	sbc	r26, r26
    16ae:	e0 e8       	ldi	r30, 0x80	; 128
    16b0:	fe ef       	ldi	r31, 0xFE	; 254
    16b2:	16 16       	cp	r1, r22
    16b4:	17 06       	cpc	r1, r23
    16b6:	e8 07       	cpc	r30, r24
    16b8:	f9 07       	cpc	r31, r25
    16ba:	c0 f0       	brcs	.+48     	; 0x16ec <__fp_cmp+0x46>
    16bc:	12 16       	cp	r1, r18
    16be:	13 06       	cpc	r1, r19
    16c0:	e4 07       	cpc	r30, r20
    16c2:	f5 07       	cpc	r31, r21
    16c4:	98 f0       	brcs	.+38     	; 0x16ec <__fp_cmp+0x46>
    16c6:	62 1b       	sub	r22, r18
    16c8:	73 0b       	sbc	r23, r19
    16ca:	84 0b       	sbc	r24, r20
    16cc:	95 0b       	sbc	r25, r21
    16ce:	39 f4       	brne	.+14     	; 0x16de <__fp_cmp+0x38>
    16d0:	0a 26       	eor	r0, r26
    16d2:	61 f0       	breq	.+24     	; 0x16ec <__fp_cmp+0x46>
    16d4:	23 2b       	or	r18, r19
    16d6:	24 2b       	or	r18, r20
    16d8:	25 2b       	or	r18, r21
    16da:	21 f4       	brne	.+8      	; 0x16e4 <__fp_cmp+0x3e>
    16dc:	08 95       	ret
    16de:	0a 26       	eor	r0, r26
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <__fp_cmp+0x3e>
    16e2:	a1 40       	sbci	r26, 0x01	; 1
    16e4:	a6 95       	lsr	r26
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	81 1d       	adc	r24, r1
    16ea:	81 1d       	adc	r24, r1
    16ec:	08 95       	ret

000016ee <__fp_inf>:
    16ee:	97 f9       	bld	r25, 7
    16f0:	9f 67       	ori	r25, 0x7F	; 127
    16f2:	80 e8       	ldi	r24, 0x80	; 128
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	08 95       	ret

000016fa <__fp_nan>:
    16fa:	9f ef       	ldi	r25, 0xFF	; 255
    16fc:	80 ec       	ldi	r24, 0xC0	; 192
    16fe:	08 95       	ret

00001700 <__fp_pscA>:
    1700:	00 24       	eor	r0, r0
    1702:	0a 94       	dec	r0
    1704:	16 16       	cp	r1, r22
    1706:	17 06       	cpc	r1, r23
    1708:	18 06       	cpc	r1, r24
    170a:	09 06       	cpc	r0, r25
    170c:	08 95       	ret

0000170e <__fp_pscB>:
    170e:	00 24       	eor	r0, r0
    1710:	0a 94       	dec	r0
    1712:	12 16       	cp	r1, r18
    1714:	13 06       	cpc	r1, r19
    1716:	14 06       	cpc	r1, r20
    1718:	05 06       	cpc	r0, r21
    171a:	08 95       	ret

0000171c <__fp_round>:
    171c:	09 2e       	mov	r0, r25
    171e:	03 94       	inc	r0
    1720:	00 0c       	add	r0, r0
    1722:	11 f4       	brne	.+4      	; 0x1728 <__fp_round+0xc>
    1724:	88 23       	and	r24, r24
    1726:	52 f0       	brmi	.+20     	; 0x173c <__fp_round+0x20>
    1728:	bb 0f       	add	r27, r27
    172a:	40 f4       	brcc	.+16     	; 0x173c <__fp_round+0x20>
    172c:	bf 2b       	or	r27, r31
    172e:	11 f4       	brne	.+4      	; 0x1734 <__fp_round+0x18>
    1730:	60 ff       	sbrs	r22, 0
    1732:	04 c0       	rjmp	.+8      	; 0x173c <__fp_round+0x20>
    1734:	6f 5f       	subi	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	08 95       	ret

0000173e <__fp_split3>:
    173e:	57 fd       	sbrc	r21, 7
    1740:	90 58       	subi	r25, 0x80	; 128
    1742:	44 0f       	add	r20, r20
    1744:	55 1f       	adc	r21, r21
    1746:	59 f0       	breq	.+22     	; 0x175e <__fp_splitA+0x10>
    1748:	5f 3f       	cpi	r21, 0xFF	; 255
    174a:	71 f0       	breq	.+28     	; 0x1768 <__fp_splitA+0x1a>
    174c:	47 95       	ror	r20

0000174e <__fp_splitA>:
    174e:	88 0f       	add	r24, r24
    1750:	97 fb       	bst	r25, 7
    1752:	99 1f       	adc	r25, r25
    1754:	61 f0       	breq	.+24     	; 0x176e <__fp_splitA+0x20>
    1756:	9f 3f       	cpi	r25, 0xFF	; 255
    1758:	79 f0       	breq	.+30     	; 0x1778 <__fp_splitA+0x2a>
    175a:	87 95       	ror	r24
    175c:	08 95       	ret
    175e:	12 16       	cp	r1, r18
    1760:	13 06       	cpc	r1, r19
    1762:	14 06       	cpc	r1, r20
    1764:	55 1f       	adc	r21, r21
    1766:	f2 cf       	rjmp	.-28     	; 0x174c <__fp_split3+0xe>
    1768:	46 95       	lsr	r20
    176a:	f1 df       	rcall	.-30     	; 0x174e <__fp_splitA>
    176c:	08 c0       	rjmp	.+16     	; 0x177e <__fp_splitA+0x30>
    176e:	16 16       	cp	r1, r22
    1770:	17 06       	cpc	r1, r23
    1772:	18 06       	cpc	r1, r24
    1774:	99 1f       	adc	r25, r25
    1776:	f1 cf       	rjmp	.-30     	; 0x175a <__fp_splitA+0xc>
    1778:	86 95       	lsr	r24
    177a:	71 05       	cpc	r23, r1
    177c:	61 05       	cpc	r22, r1
    177e:	08 94       	sec
    1780:	08 95       	ret

00001782 <__fp_zero>:
    1782:	e8 94       	clt

00001784 <__fp_szero>:
    1784:	bb 27       	eor	r27, r27
    1786:	66 27       	eor	r22, r22
    1788:	77 27       	eor	r23, r23
    178a:	cb 01       	movw	r24, r22
    178c:	97 f9       	bld	r25, 7
    178e:	08 95       	ret

00001790 <__gesf2>:
    1790:	8a df       	rcall	.-236    	; 0x16a6 <__fp_cmp>
    1792:	08 f4       	brcc	.+2      	; 0x1796 <__gesf2+0x6>
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	08 95       	ret

00001798 <__mulsf3>:
    1798:	0b d0       	rcall	.+22     	; 0x17b0 <__mulsf3x>
    179a:	c0 cf       	rjmp	.-128    	; 0x171c <__fp_round>
    179c:	b1 df       	rcall	.-158    	; 0x1700 <__fp_pscA>
    179e:	28 f0       	brcs	.+10     	; 0x17aa <__mulsf3+0x12>
    17a0:	b6 df       	rcall	.-148    	; 0x170e <__fp_pscB>
    17a2:	18 f0       	brcs	.+6      	; 0x17aa <__mulsf3+0x12>
    17a4:	95 23       	and	r25, r21
    17a6:	09 f0       	breq	.+2      	; 0x17aa <__mulsf3+0x12>
    17a8:	a2 cf       	rjmp	.-188    	; 0x16ee <__fp_inf>
    17aa:	a7 cf       	rjmp	.-178    	; 0x16fa <__fp_nan>
    17ac:	11 24       	eor	r1, r1
    17ae:	ea cf       	rjmp	.-44     	; 0x1784 <__fp_szero>

000017b0 <__mulsf3x>:
    17b0:	c6 df       	rcall	.-116    	; 0x173e <__fp_split3>
    17b2:	a0 f3       	brcs	.-24     	; 0x179c <__mulsf3+0x4>

000017b4 <__mulsf3_pse>:
    17b4:	95 9f       	mul	r25, r21
    17b6:	d1 f3       	breq	.-12     	; 0x17ac <__mulsf3+0x14>
    17b8:	95 0f       	add	r25, r21
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	55 1f       	adc	r21, r21
    17be:	62 9f       	mul	r22, r18
    17c0:	f0 01       	movw	r30, r0
    17c2:	72 9f       	mul	r23, r18
    17c4:	bb 27       	eor	r27, r27
    17c6:	f0 0d       	add	r31, r0
    17c8:	b1 1d       	adc	r27, r1
    17ca:	63 9f       	mul	r22, r19
    17cc:	aa 27       	eor	r26, r26
    17ce:	f0 0d       	add	r31, r0
    17d0:	b1 1d       	adc	r27, r1
    17d2:	aa 1f       	adc	r26, r26
    17d4:	64 9f       	mul	r22, r20
    17d6:	66 27       	eor	r22, r22
    17d8:	b0 0d       	add	r27, r0
    17da:	a1 1d       	adc	r26, r1
    17dc:	66 1f       	adc	r22, r22
    17de:	82 9f       	mul	r24, r18
    17e0:	22 27       	eor	r18, r18
    17e2:	b0 0d       	add	r27, r0
    17e4:	a1 1d       	adc	r26, r1
    17e6:	62 1f       	adc	r22, r18
    17e8:	73 9f       	mul	r23, r19
    17ea:	b0 0d       	add	r27, r0
    17ec:	a1 1d       	adc	r26, r1
    17ee:	62 1f       	adc	r22, r18
    17f0:	83 9f       	mul	r24, r19
    17f2:	a0 0d       	add	r26, r0
    17f4:	61 1d       	adc	r22, r1
    17f6:	22 1f       	adc	r18, r18
    17f8:	74 9f       	mul	r23, r20
    17fa:	33 27       	eor	r19, r19
    17fc:	a0 0d       	add	r26, r0
    17fe:	61 1d       	adc	r22, r1
    1800:	23 1f       	adc	r18, r19
    1802:	84 9f       	mul	r24, r20
    1804:	60 0d       	add	r22, r0
    1806:	21 1d       	adc	r18, r1
    1808:	82 2f       	mov	r24, r18
    180a:	76 2f       	mov	r23, r22
    180c:	6a 2f       	mov	r22, r26
    180e:	11 24       	eor	r1, r1
    1810:	9f 57       	subi	r25, 0x7F	; 127
    1812:	50 40       	sbci	r21, 0x00	; 0
    1814:	8a f0       	brmi	.+34     	; 0x1838 <__mulsf3_pse+0x84>
    1816:	e1 f0       	breq	.+56     	; 0x1850 <__mulsf3_pse+0x9c>
    1818:	88 23       	and	r24, r24
    181a:	4a f0       	brmi	.+18     	; 0x182e <__mulsf3_pse+0x7a>
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	bb 1f       	adc	r27, r27
    1822:	66 1f       	adc	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	91 50       	subi	r25, 0x01	; 1
    182a:	50 40       	sbci	r21, 0x00	; 0
    182c:	a9 f7       	brne	.-22     	; 0x1818 <__mulsf3_pse+0x64>
    182e:	9e 3f       	cpi	r25, 0xFE	; 254
    1830:	51 05       	cpc	r21, r1
    1832:	70 f0       	brcs	.+28     	; 0x1850 <__mulsf3_pse+0x9c>
    1834:	5c cf       	rjmp	.-328    	; 0x16ee <__fp_inf>
    1836:	a6 cf       	rjmp	.-180    	; 0x1784 <__fp_szero>
    1838:	5f 3f       	cpi	r21, 0xFF	; 255
    183a:	ec f3       	brlt	.-6      	; 0x1836 <__mulsf3_pse+0x82>
    183c:	98 3e       	cpi	r25, 0xE8	; 232
    183e:	dc f3       	brlt	.-10     	; 0x1836 <__mulsf3_pse+0x82>
    1840:	86 95       	lsr	r24
    1842:	77 95       	ror	r23
    1844:	67 95       	ror	r22
    1846:	b7 95       	ror	r27
    1848:	f7 95       	ror	r31
    184a:	e7 95       	ror	r30
    184c:	9f 5f       	subi	r25, 0xFF	; 255
    184e:	c1 f7       	brne	.-16     	; 0x1840 <__mulsf3_pse+0x8c>
    1850:	fe 2b       	or	r31, r30
    1852:	88 0f       	add	r24, r24
    1854:	91 1d       	adc	r25, r1
    1856:	96 95       	lsr	r25
    1858:	87 95       	ror	r24
    185a:	97 f9       	bld	r25, 7
    185c:	08 95       	ret

0000185e <__divmodhi4>:
    185e:	97 fb       	bst	r25, 7
    1860:	07 2e       	mov	r0, r23
    1862:	16 f4       	brtc	.+4      	; 0x1868 <__divmodhi4+0xa>
    1864:	00 94       	com	r0
    1866:	06 d0       	rcall	.+12     	; 0x1874 <__divmodhi4_neg1>
    1868:	77 fd       	sbrc	r23, 7
    186a:	08 d0       	rcall	.+16     	; 0x187c <__divmodhi4_neg2>
    186c:	0b d0       	rcall	.+22     	; 0x1884 <__udivmodhi4>
    186e:	07 fc       	sbrc	r0, 7
    1870:	05 d0       	rcall	.+10     	; 0x187c <__divmodhi4_neg2>
    1872:	3e f4       	brtc	.+14     	; 0x1882 <__divmodhi4_exit>

00001874 <__divmodhi4_neg1>:
    1874:	90 95       	com	r25
    1876:	81 95       	neg	r24
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	08 95       	ret

0000187c <__divmodhi4_neg2>:
    187c:	70 95       	com	r23
    187e:	61 95       	neg	r22
    1880:	7f 4f       	sbci	r23, 0xFF	; 255

00001882 <__divmodhi4_exit>:
    1882:	08 95       	ret

00001884 <__udivmodhi4>:
    1884:	aa 1b       	sub	r26, r26
    1886:	bb 1b       	sub	r27, r27
    1888:	51 e1       	ldi	r21, 0x11	; 17
    188a:	07 c0       	rjmp	.+14     	; 0x189a <__udivmodhi4_ep>

0000188c <__udivmodhi4_loop>:
    188c:	aa 1f       	adc	r26, r26
    188e:	bb 1f       	adc	r27, r27
    1890:	a6 17       	cp	r26, r22
    1892:	b7 07       	cpc	r27, r23
    1894:	10 f0       	brcs	.+4      	; 0x189a <__udivmodhi4_ep>
    1896:	a6 1b       	sub	r26, r22
    1898:	b7 0b       	sbc	r27, r23

0000189a <__udivmodhi4_ep>:
    189a:	88 1f       	adc	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	5a 95       	dec	r21
    18a0:	a9 f7       	brne	.-22     	; 0x188c <__udivmodhi4_loop>
    18a2:	80 95       	com	r24
    18a4:	90 95       	com	r25
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	08 95       	ret

000018ac <_exit>:
    18ac:	f8 94       	cli

000018ae <__stop_program>:
    18ae:	ff cf       	rjmp	.-2      	; 0x18ae <__stop_program>
