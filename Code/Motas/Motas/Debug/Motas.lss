
Motas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000160c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000160c  000016a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  0080008c  0080008c  000016cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000136b  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000739  00000000  00000000  00002c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf1  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005cc  00000000  00000000  00003f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000689  00000000  00000000  00004530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000afc  00000000  00000000  00004bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000056b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	d5 c6       	rjmp	.+3498   	; 0xdae <__vector_1>
       4:	f3 c6       	rjmp	.+3558   	; 0xdec <__vector_2>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ec e0       	ldi	r30, 0x0C	; 12
      3a:	f6 e1       	ldi	r31, 0x16	; 22
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ac 38       	cpi	r26, 0x8C	; 140
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	ac e8       	ldi	r26, 0x8C	; 140
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	af 3d       	cpi	r26, 0xDF	; 223
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	7d d2       	rcall	.+1274   	; 0x554 <main>
      5a:	d6 ca       	rjmp	.-2644   	; 0xfffff608 <__eeprom_end+0xff7ef608>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Atmega_init>:
#include "Atmega_Config.h"
#include "Peripheral_Drivers.h"
#include "debug_func.h"

void Atmega_init()
{
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
      66:	3f d0       	rcall	.+126    	; 0xe6 <USART_Init>
	
#ifdef DEBUG_ON
	SendDebug("Serial OK!");
      68:	82 e6       	ldi	r24, 0x62	; 98
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	74 d0       	rcall	.+232    	; 0x156 <SendDebug>
#endif // DEBUG_ON
	
	Init_Ultrasonic_Sensor();
      6e:	45 d8       	rcall	.-3958   	; 0xfffff0fa <__eeprom_end+0xff7ef0fa>
	Init_Pir();
      70:	19 d8       	rcall	.-4046   	; 0xfffff0a4 <__eeprom_end+0xff7ef0a4>
	Init_Timer1();
      72:	fb d8       	rcall	.-3594   	; 0xfffff26a <__eeprom_end+0xff7ef26a>
	Init_Gpio();
      74:	3c d9       	rcall	.-3464   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
	sei();
      76:	78 94       	sei
      78:	df 91       	pop	r29
      7a:	cf 91       	pop	r28
      7c:	08 95       	ret

0000007e <__vector_11>:
	temp2 = int_data / 4096;
	dec_adc_value = dec_adc_value + (temp2 * 4096);
	temp2 = temp1;
	temp1 = temp1 % 256;
	temp2 = temp2 / 256;
	dec_adc_value = dec_adc_value + (temp2 * 256);
      7e:	1f 92       	push	r1
	temp2 = temp1;
      80:	0f 92       	push	r0
      82:	00 90 5f 00 	lds	r0, 0x005F
      86:	0f 92       	push	r0
	temp1 = temp1 % 16;
      88:	11 24       	eor	r1, r1
      8a:	2f 93       	push	r18
      8c:	3f 93       	push	r19
      8e:	4f 93       	push	r20
      90:	5f 93       	push	r21
      92:	6f 93       	push	r22
	temp2 = temp2 / 16;
      94:	7f 93       	push	r23
      96:	8f 93       	push	r24
      98:	9f 93       	push	r25
      9a:	af 93       	push	r26
      9c:	bf 93       	push	r27
      9e:	ef 93       	push	r30
      a0:	ff 93       	push	r31
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	1f 92       	push	r1
	dec_adc_value = (dec_adc_value + (temp2 * 16) + temp1);
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	8c e2       	ldi	r24, 0x2C	; 44
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	fc 01       	movw	r30, r24
      b2:	80 81       	ld	r24, Z
      b4:	71 d0       	rcall	.+226    	; 0x198 <Ring_Add>
      b6:	89 83       	std	Y+1, r24	; 0x01
      b8:	8f ef       	ldi	r24, 0xFF	; 255
      ba:	89 83       	std	Y+1, r24	; 0x01
      bc:	0f 90       	pop	r0
      be:	df 91       	pop	r29
      c0:	cf 91       	pop	r28
      c2:	ff 91       	pop	r31
      c4:	ef 91       	pop	r30
      c6:	bf 91       	pop	r27
      c8:	af 91       	pop	r26
      ca:	9f 91       	pop	r25
      cc:	8f 91       	pop	r24
	temp1 = dec_adc_value;
      ce:	7f 91       	pop	r23
      d0:	6f 91       	pop	r22
      d2:	5f 91       	pop	r21
      d4:	4f 91       	pop	r20
	USART_SendByte((dec_adc_value / 10000) | 0x30);
      d6:	3f 91       	pop	r19
      d8:	2f 91       	pop	r18
      da:	0f 90       	pop	r0
      dc:	00 92 5f 00 	sts	0x005F, r0
      e0:	0f 90       	pop	r0
      e2:	1f 90       	pop	r1
      e4:	18 95       	reti

000000e6 <USART_Init>:
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	89 e2       	ldi	r24, 0x29	; 41
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2c e0       	ldi	r18, 0x0C	; 12
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	80 e4       	ldi	r24, 0x40	; 64
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	fc 01       	movw	r30, r24
	dec_adc_value = temp1 % 10000;
      fe:	10 82       	st	Z, r1
     100:	8b e2       	ldi	r24, 0x2B	; 43
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2b e2       	ldi	r18, 0x2B	; 43
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	22 60       	ori	r18, 0x02	; 2
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	8a e2       	ldi	r24, 0x2A	; 42
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	28 e9       	ldi	r18, 0x98	; 152
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <USART_SendByte>:
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	1f 92       	push	r1
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	89 83       	std	Y+1, r24	; 0x01
     12e:	00 00       	nop
     130:	8b e2       	ldi	r24, 0x2B	; 43
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	88 2f       	mov	r24, r24
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	80 72       	andi	r24, 0x20	; 32
     13e:	99 27       	eor	r25, r25
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	b1 f3       	breq	.-20     	; 0x130 <USART_SendByte+0xe>
	USART_SendByte((dec_adc_value / 1000) | 0x30);
     144:	8c e2       	ldi	r24, 0x2C	; 44
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	29 81       	ldd	r18, Y+1	; 0x01
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
     14e:	0f 90       	pop	r0
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <SendDebug>:
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	00 d0       	rcall	.+0      	; 0x15c <SendDebug+0x6>
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	9a 83       	std	Y+2, r25	; 0x02
     162:	89 83       	std	Y+1, r24	; 0x01
     164:	0a c0       	rjmp	.+20     	; 0x17a <SendDebug+0x24>
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	9a 81       	ldd	r25, Y+2	; 0x02
     16a:	fc 01       	movw	r30, r24
	dec_adc_value = temp1 % 1000;
     16c:	80 81       	ld	r24, Z
     16e:	d9 df       	rcall	.-78     	; 0x122 <USART_SendByte>
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	01 96       	adiw	r24, 0x01	; 1
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	9a 81       	ldd	r25, Y+2	; 0x02
     17e:	fc 01       	movw	r30, r24
     180:	80 81       	ld	r24, Z
     182:	88 23       	and	r24, r24
     184:	81 f7       	brne	.-32     	; 0x166 <SendDebug+0x10>
     186:	8d e0       	ldi	r24, 0x0D	; 13
     188:	cc df       	rcall	.-104    	; 0x122 <USART_SendByte>
     18a:	8a e0       	ldi	r24, 0x0A	; 10
     18c:	ca df       	rcall	.-108    	; 0x122 <USART_SendByte>
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	df 91       	pop	r29
     194:	cf 91       	pop	r28
     196:	08 95       	ret

00000198 <Ring_Add>:
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	00 d0       	rcall	.+0      	; 0x19e <Ring_Add+0x6>
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8a 83       	std	Y+2, r24	; 0x02
     1a4:	80 91 95 00 	lds	r24, 0x0095
     1a8:	88 2f       	mov	r24, r24
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	8f 73       	andi	r24, 0x3F	; 63
     1b0:	90 78       	andi	r25, 0x80	; 128
	USART_SendByte((dec_adc_value /100) | 0x30);
     1b2:	99 23       	and	r25, r25
     1b4:	24 f4       	brge	.+8      	; 0x1be <Ring_Add+0x26>
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	80 6c       	ori	r24, 0xC0	; 192
     1ba:	9f 6f       	ori	r25, 0xFF	; 255
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	80 91 96 00 	lds	r24, 0x0096
     1c4:	99 81       	ldd	r25, Y+1	; 0x01
     1c6:	98 17       	cp	r25, r24
     1c8:	79 f0       	breq	.+30     	; 0x1e8 <Ring_Add+0x50>
     1ca:	80 91 95 00 	lds	r24, 0x0095
	dec_adc_value = temp1 % 100;
     1ce:	88 2f       	mov	r24, r24
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	89 56       	subi	r24, 0x69	; 105
     1d4:	9f 4f       	sbci	r25, 0xFF	; 255
     1d6:	2a 81       	ldd	r18, Y+2	; 0x02
     1d8:	fc 01       	movw	r30, r24
     1da:	20 83       	st	Z, r18
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	80 93 95 00 	sts	0x0095, r24
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <Ring_Add+0x54>
     1e8:	8f ef       	ldi	r24, 0xFF	; 255
     1ea:	9f ef       	ldi	r25, 0xFF	; 255
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <Ring_Remove>:
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <Ring_Remove+0x6>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	90 91 95 00 	lds	r25, 0x0095
	USART_SendByte((dec_adc_value / 10) | 0x30);
     204:	80 91 96 00 	lds	r24, 0x0096
     208:	98 17       	cp	r25, r24
     20a:	f1 f0       	breq	.+60     	; 0x248 <Ring_Remove+0x52>
     20c:	80 91 96 00 	lds	r24, 0x0096
     210:	88 2f       	mov	r24, r24
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	89 56       	subi	r24, 0x69	; 105
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	fc 01       	movw	r30, r24
     21a:	80 81       	ld	r24, Z
     21c:	88 2f       	mov	r24, r24
	dec_adc_value = temp1 % 10;
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	9a 83       	std	Y+2, r25	; 0x02
     222:	89 83       	std	Y+1, r24	; 0x01
     224:	80 91 96 00 	lds	r24, 0x0096
     228:	88 2f       	mov	r24, r24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	8f 73       	andi	r24, 0x3F	; 63
     230:	90 78       	andi	r25, 0x80	; 128
     232:	99 23       	and	r25, r25
     234:	24 f4       	brge	.+8      	; 0x23e <Ring_Remove+0x48>
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	80 6c       	ori	r24, 0xC0	; 192
     23a:	9f 6f       	ori	r25, 0xFF	; 255
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	80 93 96 00 	sts	0x0096, r24
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	9a 81       	ldd	r25, Y+2	; 0x02
     246:	02 c0       	rjmp	.+4      	; 0x24c <Ring_Remove+0x56>
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	9f ef       	ldi	r25, 0xFF	; 255
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
	USART_SendByte(dec_adc_value | 0x30);
     254:	08 95       	ret

00000256 <Is_Buffer_Empty>:
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
}
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	90 91 95 00 	lds	r25, 0x0095
     262:	80 91 96 00 	lds	r24, 0x0096
     266:	98 17       	cp	r25, r24
     268:	11 f4       	brne	.+4      	; 0x26e <Is_Buffer_Empty+0x18>
     26a:	80 e0       	ldi	r24, 0x00	; 0
}

uint8_t Is_Buffer_Empty()
{
	if(ring_head == ring_tail)
		return BUFFER_EMPTY;	
     26c:	01 c0       	rjmp	.+2      	; 0x270 <Is_Buffer_Empty+0x1a>
	else return BUFFER_NOT_EMPTY;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <DebugLedTransmit>:
	RED_LED_PORT &= ~(1 << RED_LED);
	YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
}

void DebugLedTransmit(debug_led_state_t led_state, debug_led_colour_t led_colour)
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	00 d0       	rcall	.+0      	; 0x27c <DebugLedTransmit+0x6>
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	89 83       	std	Y+1, r24	; 0x01
     282:	6a 83       	std	Y+2, r22	; 0x02
	if(led_state == LED_ON)
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	a9 f5       	brne	.+106    	; 0x2f4 <DebugLedTransmit+0x7e>
	{
		switch(led_colour)
     28a:	8a 81       	ldd	r24, Y+2	; 0x02
     28c:	88 2f       	mov	r24, r24
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	82 30       	cpi	r24, 0x02	; 2
     292:	91 05       	cpc	r25, r1
     294:	39 f0       	breq	.+14     	; 0x2a4 <DebugLedTransmit+0x2e>
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	91 05       	cpc	r25, r1
     29a:	c1 f0       	breq	.+48     	; 0x2cc <DebugLedTransmit+0x56>
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	91 05       	cpc	r25, r1
     2a0:	59 f0       	breq	.+22     	; 0x2b8 <DebugLedTransmit+0x42>
     2a2:	5f c0       	rjmp	.+190    	; 0x362 <DebugLedTransmit+0xec>
		{
			case LED_RED:
				RED_LED_PORT |= (1 << RED_LED);
     2a4:	85 e3       	ldi	r24, 0x35	; 53
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	25 e3       	ldi	r18, 0x35	; 53
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	f9 01       	movw	r30, r18
     2ae:	20 81       	ld	r18, Z
     2b0:	21 60       	ori	r18, 0x01	; 1
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
				break;
     2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <DebugLedTransmit+0x7c>
				
			case LED_YELLOW:
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     2b8:	85 e3       	ldi	r24, 0x35	; 53
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	25 e3       	ldi	r18, 0x35	; 53
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	f9 01       	movw	r30, r18
     2c2:	20 81       	ld	r18, Z
     2c4:	22 60       	ori	r18, 0x02	; 2
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
				break;
     2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <DebugLedTransmit+0x7c>
				
			case LED_ORANGE:
				RED_LED_PORT |= (1 << RED_LED);
     2cc:	85 e3       	ldi	r24, 0x35	; 53
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	25 e3       	ldi	r18, 0x35	; 53
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	f9 01       	movw	r30, r18
     2d6:	20 81       	ld	r18, Z
     2d8:	21 60       	ori	r18, 0x01	; 1
     2da:	fc 01       	movw	r30, r24
     2dc:	20 83       	st	Z, r18
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     2de:	85 e3       	ldi	r24, 0x35	; 53
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	25 e3       	ldi	r18, 0x35	; 53
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	f9 01       	movw	r30, r18
     2e8:	20 81       	ld	r18, Z
     2ea:	22 60       	ori	r18, 0x02	; 2
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
				break;
     2f0:	00 00       	nop
     2f2:	37 c0       	rjmp	.+110    	; 0x362 <DebugLedTransmit+0xec>
		} 
	}
	else if(led_state == LED_OFF)
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	88 23       	and	r24, r24
     2f8:	a1 f5       	brne	.+104    	; 0x362 <DebugLedTransmit+0xec>
	{
		switch(led_colour)
     2fa:	8a 81       	ldd	r24, Y+2	; 0x02
     2fc:	88 2f       	mov	r24, r24
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	82 30       	cpi	r24, 0x02	; 2
     302:	91 05       	cpc	r25, r1
     304:	39 f0       	breq	.+14     	; 0x314 <DebugLedTransmit+0x9e>
     306:	83 30       	cpi	r24, 0x03	; 3
     308:	91 05       	cpc	r25, r1
     30a:	c1 f0       	breq	.+48     	; 0x33c <DebugLedTransmit+0xc6>
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	91 05       	cpc	r25, r1
     310:	59 f0       	breq	.+22     	; 0x328 <DebugLedTransmit+0xb2>
     312:	27 c0       	rjmp	.+78     	; 0x362 <DebugLedTransmit+0xec>
		{
			case LED_RED:
			RED_LED_PORT &= ~(1 << RED_LED);
     314:	85 e3       	ldi	r24, 0x35	; 53
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	25 e3       	ldi	r18, 0x35	; 53
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	f9 01       	movw	r30, r18
     31e:	20 81       	ld	r18, Z
     320:	2e 7f       	andi	r18, 0xFE	; 254
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
			break;
     326:	1d c0       	rjmp	.+58     	; 0x362 <DebugLedTransmit+0xec>
		
			case LED_YELLOW:
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     328:	85 e3       	ldi	r24, 0x35	; 53
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	25 e3       	ldi	r18, 0x35	; 53
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	2d 7f       	andi	r18, 0xFD	; 253
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18
			break;
     33a:	13 c0       	rjmp	.+38     	; 0x362 <DebugLedTransmit+0xec>
		
			case LED_ORANGE:
			RED_LED_PORT &= ~(1 << RED_LED);
     33c:	85 e3       	ldi	r24, 0x35	; 53
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	25 e3       	ldi	r18, 0x35	; 53
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	f9 01       	movw	r30, r18
     346:	20 81       	ld	r18, Z
     348:	2e 7f       	andi	r18, 0xFE	; 254
     34a:	fc 01       	movw	r30, r24
     34c:	20 83       	st	Z, r18
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     34e:	85 e3       	ldi	r24, 0x35	; 53
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	25 e3       	ldi	r18, 0x35	; 53
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	f9 01       	movw	r30, r18
     358:	20 81       	ld	r18, Z
     35a:	2d 7f       	andi	r18, 0xFD	; 253
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
			break;
     360:	00 00       	nop
		}
	}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <Dfplayer_Cmd>:
	argument 1: Type of command. Refer Dfplayer.h for command name definitions
	argument 2: Parameter to the command         
	                                                            
************************************************************************/
void Dfplayer_Cmd(uint8_t cmd, uint16_t parameter)
{
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	63 97       	sbiw	r28, 0x13	; 19
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	89 8b       	std	Y+17, r24	; 0x11
     382:	7b 8b       	std	Y+19, r23	; 0x13
     384:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t cmd_lenght = 0x06;			// Currently all commands that'll be used have a lenght of 6. So this is fixed
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	89 83       	std	Y+1, r24	; 0x01
	uint8_t tempholder = 0;
     38a:	1a 82       	std	Y+2, r1	; 0x02

	/*	Create the CMD string	*/
	command.header = CMD_STRT_BYTE;
     38c:	8e e7       	ldi	r24, 0x7E	; 126
     38e:	80 93 d7 00 	sts	0x00D7, r24
	command.version = CMD_VER;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	80 93 d8 00 	sts	0x00D8, r24
	command.lenght = cmd_lenght;
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	80 93 d9 00 	sts	0x00D9, r24
	command.type = cmd;
     39e:	89 89       	ldd	r24, Y+17	; 0x11
     3a0:	80 93 da 00 	sts	0x00DA, r24
	command.feedback = CMD_RECV_NFB;
     3a4:	10 92 db 00 	sts	0x00DB, r1
	command.parah = parameter / 256;
     3a8:	8a 89       	ldd	r24, Y+18	; 0x12
     3aa:	9b 89       	ldd	r25, Y+19	; 0x13
     3ac:	89 2f       	mov	r24, r25
     3ae:	99 27       	eor	r25, r25
     3b0:	80 93 dc 00 	sts	0x00DC, r24
	command.paral = parameter % 256;
     3b4:	8a 89       	ldd	r24, Y+18	; 0x12
     3b6:	80 93 dd 00 	sts	0x00DD, r24
	command.tail = CMD_END_BYTE;
     3ba:	8f ee       	ldi	r24, 0xEF	; 239
     3bc:	80 93 de 00 	sts	0x00DE, r24
	
	Dfplayer_Send(&command);
     3c0:	87 ed       	ldi	r24, 0xD7	; 215
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	93 d0       	rcall	.+294    	; 0x4ec <Dfplayer_Send>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	a0 e2       	ldi	r26, 0x20	; 32
     3cc:	b1 e4       	ldi	r27, 0x41	; 65
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	ad 83       	std	Y+5, r26	; 0x05
     3d4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	4a e7       	ldi	r20, 0x7A	; 122
     3dc:	53 e4       	ldi	r21, 0x43	; 67
     3de:	6b 81       	ldd	r22, Y+3	; 0x03
     3e0:	7c 81       	ldd	r23, Y+4	; 0x04
     3e2:	8d 81       	ldd	r24, Y+5	; 0x05
     3e4:	9e 81       	ldd	r25, Y+6	; 0x06
     3e6:	ad d8       	rcall	.-3750   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	8f 83       	std	Y+7, r24	; 0x07
     3ee:	98 87       	std	Y+8, r25	; 0x08
     3f0:	a9 87       	std	Y+9, r26	; 0x09
     3f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e8       	ldi	r20, 0x80	; 128
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	6f 81       	ldd	r22, Y+7	; 0x07
     3fe:	78 85       	ldd	r23, Y+8	; 0x08
     400:	89 85       	ldd	r24, Y+9	; 0x09
     402:	9a 85       	ldd	r25, Y+10	; 0x0a
     404:	8d d7       	rcall	.+3866   	; 0x1320 <__cmpsf2>
     406:	88 23       	and	r24, r24
     408:	2c f4       	brge	.+10     	; 0x414 <Dfplayer_Cmd+0xa8>
		__ticks = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	9c 87       	std	Y+12, r25	; 0x0c
     410:	8b 87       	std	Y+11, r24	; 0x0b
     412:	3b c0       	rjmp	.+118    	; 0x48a <__stack+0x2b>
	else if (__tmp > 65535)
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	3f ef       	ldi	r19, 0xFF	; 255
     418:	4f e7       	ldi	r20, 0x7F	; 127
     41a:	57 e4       	ldi	r21, 0x47	; 71
     41c:	6f 81       	ldd	r22, Y+7	; 0x07
     41e:	78 85       	ldd	r23, Y+8	; 0x08
     420:	89 85       	ldd	r24, Y+9	; 0x09
     422:	9a 85       	ldd	r25, Y+10	; 0x0a
     424:	8a d8       	rcall	.-3820   	; 0xfffff53a <__eeprom_end+0xff7ef53a>
     426:	18 16       	cp	r1, r24
     428:	3c f5       	brge	.+78     	; 0x478 <__stack+0x19>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e2       	ldi	r20, 0x20	; 32
     430:	51 e4       	ldi	r21, 0x41	; 65
     432:	6b 81       	ldd	r22, Y+3	; 0x03
     434:	7c 81       	ldd	r23, Y+4	; 0x04
     436:	8d 81       	ldd	r24, Y+5	; 0x05
     438:	9e 81       	ldd	r25, Y+6	; 0x06
     43a:	83 d8       	rcall	.-3834   	; 0xfffff542 <__eeprom_end+0xff7ef542>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	bc 01       	movw	r22, r24
     442:	cd 01       	movw	r24, r26
     444:	d9 d7       	rcall	.+4018   	; 0x13f8 <__fixunssfsi>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	9c 87       	std	Y+12, r25	; 0x0c
     44c:	8b 87       	std	Y+11, r24	; 0x0b
     44e:	0f c0       	rjmp	.+30     	; 0x46e <__stack+0xf>
     450:	89 e1       	ldi	r24, 0x19	; 25
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	9e 87       	std	Y+14, r25	; 0x0e
     456:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     458:	8d 85       	ldd	r24, Y+13	; 0x0d
     45a:	9e 85       	ldd	r25, Y+14	; 0x0e
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <Dfplayer_Cmd+0xf0>
     460:	9e 87       	std	Y+14, r25	; 0x0e
     462:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     464:	8b 85       	ldd	r24, Y+11	; 0x0b
     466:	9c 85       	ldd	r25, Y+12	; 0x0c
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	9c 87       	std	Y+12, r25	; 0x0c
     46c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46e:	8b 85       	ldd	r24, Y+11	; 0x0b
     470:	9c 85       	ldd	r25, Y+12	; 0x0c
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	69 f7       	brne	.-38     	; 0x450 <Dfplayer_Cmd+0xe4>
     476:	13 c0       	rjmp	.+38     	; 0x49e <__stack+0x3f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     478:	6f 81       	ldd	r22, Y+7	; 0x07
     47a:	78 85       	ldd	r23, Y+8	; 0x08
     47c:	89 85       	ldd	r24, Y+9	; 0x09
     47e:	9a 85       	ldd	r25, Y+10	; 0x0a
     480:	bb d7       	rcall	.+3958   	; 0x13f8 <__fixunssfsi>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	9c 87       	std	Y+12, r25	; 0x0c
     488:	8b 87       	std	Y+11, r24	; 0x0b
     48a:	8b 85       	ldd	r24, Y+11	; 0x0b
     48c:	9c 85       	ldd	r25, Y+12	; 0x0c
     48e:	98 8b       	std	Y+16, r25	; 0x10
     490:	8f 87       	std	Y+15, r24	; 0x0f
     492:	8f 85       	ldd	r24, Y+15	; 0x0f
     494:	98 89       	ldd	r25, Y+16	; 0x10
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <__stack+0x37>
     49a:	98 8b       	std	Y+16, r25	; 0x10
     49c:	8f 87       	std	Y+15, r24	; 0x0f

/*************************************************************************
*  If Commands are query based, a immediate response will be received
*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
     49e:	db de       	rcall	.-586    	; 0x256 <Is_Buffer_Empty>
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	91 05       	cpc	r25, r1
     4a4:	d1 f4       	brne	.+52     	; 0x4da <__stack+0x7b>
	{
		do{
			tempholder = Ring_Remove();
     4a6:	a7 de       	rcall	.-690    	; 0x1f6 <Ring_Remove>
     4a8:	8a 83       	std	Y+2, r24	; 0x02
		}while(tempholder != CMD_STRT_BYTE);
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	8e 37       	cpi	r24, 0x7E	; 126
     4ae:	d9 f7       	brne	.-10     	; 0x4a6 <__stack+0x47>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
     4b0:	a2 de       	rcall	.-700    	; 0x1f6 <Ring_Remove>
     4b2:	80 93 d8 00 	sts	0x00D8, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
     4b6:	9f de       	rcall	.-706    	; 0x1f6 <Ring_Remove>
     4b8:	80 93 d9 00 	sts	0x00D9, r24
		command.type = Ring_Remove();
     4bc:	9c de       	rcall	.-712    	; 0x1f6 <Ring_Remove>
     4be:	80 93 da 00 	sts	0x00DA, r24
		command.feedback = Ring_Remove();
     4c2:	99 de       	rcall	.-718    	; 0x1f6 <Ring_Remove>
     4c4:	80 93 db 00 	sts	0x00DB, r24
		command.parah = Ring_Remove();
     4c8:	96 de       	rcall	.-724    	; 0x1f6 <Ring_Remove>
     4ca:	80 93 dc 00 	sts	0x00DC, r24
		command.paral = Ring_Remove();
     4ce:	93 de       	rcall	.-730    	; 0x1f6 <Ring_Remove>
     4d0:	80 93 dd 00 	sts	0x00DD, r24
		command.tail = Ring_Remove();
     4d4:	90 de       	rcall	.-736    	; 0x1f6 <Ring_Remove>
     4d6:	80 93 de 00 	sts	0x00DE, r24
	}
}
     4da:	63 96       	adiw	r28, 0x13	; 19
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <Dfplayer_Send>:

void Dfplayer_Send(command_t* strct_ptr)
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <Dfplayer_Send+0x6>
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	9a 83       	std	Y+2, r25	; 0x02
     4f8:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte(strct_ptr->header);
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	fc 01       	movw	r30, r24
     500:	80 81       	ld	r24, Z
     502:	0f de       	rcall	.-994    	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->version);
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	fc 01       	movw	r30, r24
     50a:	81 81       	ldd	r24, Z+1	; 0x01
     50c:	0a de       	rcall	.-1004   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->lenght);
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	82 81       	ldd	r24, Z+2	; 0x02
     516:	05 de       	rcall	.-1014   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->type);
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	fc 01       	movw	r30, r24
     51e:	83 81       	ldd	r24, Z+3	; 0x03
     520:	00 de       	rcall	.-1024   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->feedback);
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	fc 01       	movw	r30, r24
     528:	84 81       	ldd	r24, Z+4	; 0x04
     52a:	fb dd       	rcall	.-1034   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->parah);
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	fc 01       	movw	r30, r24
     532:	85 81       	ldd	r24, Z+5	; 0x05
     534:	f6 dd       	rcall	.-1044   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->paral);
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	86 81       	ldd	r24, Z+6	; 0x06
     53e:	f1 dd       	rcall	.-1054   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->tail);
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	fc 01       	movw	r30, r24
     546:	87 81       	ldd	r24, Z+7	; 0x07
     548:	ec dd       	rcall	.-1064   	; 0x122 <USART_SendByte>
}
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <main>:
#include "Motas_Controller.h"



int main(void)
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
	Atmega_init();
     55c:	80 dd       	rcall	.-1280   	; 0x5e <Atmega_init>
	
    while(1)
    {
		MotasController();
     55e:	ff d3       	rcall	.+2046   	; 0xd5e <MotasController>
    }
     560:	fe cf       	rjmp	.-4      	; 0x55e <main+0xa>

00000562 <Init_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Init_State(void)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
	//TODO: extern this flag. Please do not change the name
	if(True == flag_sd_card_empty_g)
     56a:	8c e8       	ldi	r24, 0x8C	; 140
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	fc 01       	movw	r30, r24
     570:	80 81       	ld	r24, Z
     572:	81 70       	andi	r24, 0x01	; 1
     574:	88 23       	and	r24, r24
     576:	39 f0       	breq	.+14     	; 0x586 <Init_State+0x24>
	{
		#ifdef DEBUG_ON
			SendDebug("Motas entering Debugging state");
     578:	8d e6       	ldi	r24, 0x6D	; 109
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	ec dd       	rcall	.-1064   	; 0x156 <SendDebug>
		#endif

		motascontroller_state = MOTAS_DEBUGGING_STATE;	
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	80 93 8d 00 	sts	0x008D, r24
     584:	03 c0       	rjmp	.+6      	; 0x58c <Init_State+0x2a>
	}

	//TODO: Check if any additional condition is required for this transition
	/* No debugging required. Start calibration */
	else{	
		motascontroller_state = MOTAS_CALIBRATION_STATE;	
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 8d 00 	sts	0x008D, r24
	}
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <Calibration_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Calibration_State(void)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2e 97       	sbiw	r28, 0x0e	; 14
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
	/* Update the value of threshold*/
	threshold_uss_count = Get_Uss_Count();
     5a6:	dd d5       	rcall	.+3002   	; 0x1162 <Get_Uss_Count>
     5a8:	90 93 8f 00 	sts	0x008F, r25
     5ac:	80 93 8e 00 	sts	0x008E, r24
	/* Reset the PIR count*/
	Reset_Pir_count();
     5b0:	93 d6       	rcall	.+3366   	; 0x12d8 <Reset_Pir_count>
	
	/* Red led light for 1 second indicating calibration done and Motas entering the standy state */
	DebugLedTransmit(LED_ON ,LED_RED);
     5b2:	62 e0       	ldi	r22, 0x02	; 2
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	5f de       	rcall	.-834    	; 0x276 <DebugLedTransmit>
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	aa e7       	ldi	r26, 0x7A	; 122
     5be:	b4 e4       	ldi	r27, 0x44	; 68
     5c0:	89 83       	std	Y+1, r24	; 0x01
     5c2:	9a 83       	std	Y+2, r25	; 0x02
     5c4:	ab 83       	std	Y+3, r26	; 0x03
     5c6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	4a e7       	ldi	r20, 0x7A	; 122
     5ce:	53 e4       	ldi	r21, 0x43	; 67
     5d0:	69 81       	ldd	r22, Y+1	; 0x01
     5d2:	7a 81       	ldd	r23, Y+2	; 0x02
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	9c 81       	ldd	r25, Y+4	; 0x04
     5d8:	b4 d7       	rcall	.+3944   	; 0x1542 <__mulsf3>
     5da:	dc 01       	movw	r26, r24
     5dc:	cb 01       	movw	r24, r22
     5de:	8d 83       	std	Y+5, r24	; 0x05
     5e0:	9e 83       	std	Y+6, r25	; 0x06
     5e2:	af 83       	std	Y+7, r26	; 0x07
     5e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e8       	ldi	r20, 0x80	; 128
     5ec:	5f e3       	ldi	r21, 0x3F	; 63
     5ee:	6d 81       	ldd	r22, Y+5	; 0x05
     5f0:	7e 81       	ldd	r23, Y+6	; 0x06
     5f2:	8f 81       	ldd	r24, Y+7	; 0x07
     5f4:	98 85       	ldd	r25, Y+8	; 0x08
     5f6:	94 d6       	rcall	.+3368   	; 0x1320 <__cmpsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	2c f4       	brge	.+10     	; 0x606 <Calibration_State+0x74>
		__ticks = 1;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	9a 87       	std	Y+10, r25	; 0x0a
     602:	89 87       	std	Y+9, r24	; 0x09
     604:	3b c0       	rjmp	.+118    	; 0x67c <Calibration_State+0xea>
	else if (__tmp > 65535)
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	3f ef       	ldi	r19, 0xFF	; 255
     60a:	4f e7       	ldi	r20, 0x7F	; 127
     60c:	57 e4       	ldi	r21, 0x47	; 71
     60e:	6d 81       	ldd	r22, Y+5	; 0x05
     610:	7e 81       	ldd	r23, Y+6	; 0x06
     612:	8f 81       	ldd	r24, Y+7	; 0x07
     614:	98 85       	ldd	r25, Y+8	; 0x08
     616:	91 d7       	rcall	.+3874   	; 0x153a <__gesf2>
     618:	18 16       	cp	r1, r24
     61a:	3c f5       	brge	.+78     	; 0x66a <Calibration_State+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e2       	ldi	r20, 0x20	; 32
     622:	51 e4       	ldi	r21, 0x41	; 65
     624:	69 81       	ldd	r22, Y+1	; 0x01
     626:	7a 81       	ldd	r23, Y+2	; 0x02
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	8a d7       	rcall	.+3860   	; 0x1542 <__mulsf3>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	e0 d6       	rcall	.+3520   	; 0x13f8 <__fixunssfsi>
     638:	dc 01       	movw	r26, r24
     63a:	cb 01       	movw	r24, r22
     63c:	9a 87       	std	Y+10, r25	; 0x0a
     63e:	89 87       	std	Y+9, r24	; 0x09
     640:	0f c0       	rjmp	.+30     	; 0x660 <Calibration_State+0xce>
     642:	89 e1       	ldi	r24, 0x19	; 25
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	9c 87       	std	Y+12, r25	; 0x0c
     648:	8b 87       	std	Y+11, r24	; 0x0b
     64a:	8b 85       	ldd	r24, Y+11	; 0x0b
     64c:	9c 85       	ldd	r25, Y+12	; 0x0c
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <Calibration_State+0xbc>
     652:	9c 87       	std	Y+12, r25	; 0x0c
     654:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     656:	89 85       	ldd	r24, Y+9	; 0x09
     658:	9a 85       	ldd	r25, Y+10	; 0x0a
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	9a 87       	std	Y+10, r25	; 0x0a
     65e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     660:	89 85       	ldd	r24, Y+9	; 0x09
     662:	9a 85       	ldd	r25, Y+10	; 0x0a
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	69 f7       	brne	.-38     	; 0x642 <Calibration_State+0xb0>
     668:	13 c0       	rjmp	.+38     	; 0x690 <Calibration_State+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     66a:	6d 81       	ldd	r22, Y+5	; 0x05
     66c:	7e 81       	ldd	r23, Y+6	; 0x06
     66e:	8f 81       	ldd	r24, Y+7	; 0x07
     670:	98 85       	ldd	r25, Y+8	; 0x08
     672:	c2 d6       	rcall	.+3460   	; 0x13f8 <__fixunssfsi>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	9a 87       	std	Y+10, r25	; 0x0a
     67a:	89 87       	std	Y+9, r24	; 0x09
     67c:	89 85       	ldd	r24, Y+9	; 0x09
     67e:	9a 85       	ldd	r25, Y+10	; 0x0a
     680:	9e 87       	std	Y+14, r25	; 0x0e
     682:	8d 87       	std	Y+13, r24	; 0x0d
     684:	8d 85       	ldd	r24, Y+13	; 0x0d
     686:	9e 85       	ldd	r25, Y+14	; 0x0e
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <Calibration_State+0xf6>
     68c:	9e 87       	std	Y+14, r25	; 0x0e
     68e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DebugLedTransmit(LED_OFF ,LED_RED);		/* Switch OFF the LED */
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	f0 dd       	rcall	.-1056   	; 0x276 <DebugLedTransmit>
	
	/* Update state */
	motascontroller_state = MOTAS_STANDBY_STATE;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	80 93 8d 00 	sts	0x008D, r24
}
     69c:	2e 96       	adiw	r28, 0x0e	; 14
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <Standby_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Standby_State(void)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	62 97       	sbiw	r28, 0x12	; 18
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
	uint16_t standby_pircount = 0;
     6c2:	1a 82       	std	Y+2, r1	; 0x02
     6c4:	19 82       	std	Y+1, r1	; 0x01
	uint16_t standby_usscount = 0; 
     6c6:	1c 82       	std	Y+4, r1	; 0x04
     6c8:	1b 82       	std	Y+3, r1	; 0x03

	/* Update the PIR and ultrasonic count */
	standby_pircount = Get_Pir_count();
     6ca:	fb d5       	rcall	.+3062   	; 0x12c2 <Get_Pir_count>
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	89 83       	std	Y+1, r24	; 0x01
	standby_usscount = Get_Uss_Count(); 
     6d0:	48 d5       	rcall	.+2704   	; 0x1162 <Get_Uss_Count>
     6d2:	9c 83       	std	Y+4, r25	; 0x04
     6d4:	8b 83       	std	Y+3, r24	; 0x03

	/*Check if Ultrasonic or pir has triggered because customer entering the room */
	if((standby_usscount < threshold_uss_count) || (standby_pircount > 1))
     6d6:	80 91 8e 00 	lds	r24, 0x008E
     6da:	90 91 8f 00 	lds	r25, 0x008F
     6de:	2b 81       	ldd	r18, Y+3	; 0x03
     6e0:	3c 81       	ldd	r19, Y+4	; 0x04
     6e2:	28 17       	cp	r18, r24
     6e4:	39 07       	cpc	r19, r25
     6e6:	30 f0       	brcs	.+12     	; 0x6f4 <Standby_State+0x46>
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	91 05       	cpc	r25, r1
     6f0:	08 f4       	brcc	.+2      	; 0x6f4 <Standby_State+0x46>
     6f2:	82 c0       	rjmp	.+260    	; 0x7f8 <Standby_State+0x14a>
	{
		/* Clear the standby pir count */
		standby_pircount = 0;
     6f4:	1a 82       	std	Y+2, r1	; 0x02
     6f6:	19 82       	std	Y+1, r1	; 0x01
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e8       	ldi	r25, 0x80	; 128
     6fc:	ab e3       	ldi	r26, 0x3B	; 59
     6fe:	b5 e4       	ldi	r27, 0x45	; 69
     700:	8d 83       	std	Y+5, r24	; 0x05
     702:	9e 83       	std	Y+6, r25	; 0x06
     704:	af 83       	std	Y+7, r26	; 0x07
     706:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	4a e7       	ldi	r20, 0x7A	; 122
     70e:	53 e4       	ldi	r21, 0x43	; 67
     710:	6d 81       	ldd	r22, Y+5	; 0x05
     712:	7e 81       	ldd	r23, Y+6	; 0x06
     714:	8f 81       	ldd	r24, Y+7	; 0x07
     716:	98 85       	ldd	r25, Y+8	; 0x08
     718:	14 d7       	rcall	.+3624   	; 0x1542 <__mulsf3>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	89 87       	std	Y+9, r24	; 0x09
     720:	9a 87       	std	Y+10, r25	; 0x0a
     722:	ab 87       	std	Y+11, r26	; 0x0b
     724:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e8       	ldi	r20, 0x80	; 128
     72c:	5f e3       	ldi	r21, 0x3F	; 63
     72e:	69 85       	ldd	r22, Y+9	; 0x09
     730:	7a 85       	ldd	r23, Y+10	; 0x0a
     732:	8b 85       	ldd	r24, Y+11	; 0x0b
     734:	9c 85       	ldd	r25, Y+12	; 0x0c
     736:	f4 d5       	rcall	.+3048   	; 0x1320 <__cmpsf2>
     738:	88 23       	and	r24, r24
     73a:	2c f4       	brge	.+10     	; 0x746 <Standby_State+0x98>
		__ticks = 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9e 87       	std	Y+14, r25	; 0x0e
     742:	8d 87       	std	Y+13, r24	; 0x0d
     744:	3b c0       	rjmp	.+118    	; 0x7bc <Standby_State+0x10e>
	else if (__tmp > 65535)
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	3f ef       	ldi	r19, 0xFF	; 255
     74a:	4f e7       	ldi	r20, 0x7F	; 127
     74c:	57 e4       	ldi	r21, 0x47	; 71
     74e:	69 85       	ldd	r22, Y+9	; 0x09
     750:	7a 85       	ldd	r23, Y+10	; 0x0a
     752:	8b 85       	ldd	r24, Y+11	; 0x0b
     754:	9c 85       	ldd	r25, Y+12	; 0x0c
     756:	f1 d6       	rcall	.+3554   	; 0x153a <__gesf2>
     758:	18 16       	cp	r1, r24
     75a:	3c f5       	brge	.+78     	; 0x7aa <Standby_State+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e2       	ldi	r20, 0x20	; 32
     762:	51 e4       	ldi	r21, 0x41	; 65
     764:	6d 81       	ldd	r22, Y+5	; 0x05
     766:	7e 81       	ldd	r23, Y+6	; 0x06
     768:	8f 81       	ldd	r24, Y+7	; 0x07
     76a:	98 85       	ldd	r25, Y+8	; 0x08
     76c:	ea d6       	rcall	.+3540   	; 0x1542 <__mulsf3>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	bc 01       	movw	r22, r24
     774:	cd 01       	movw	r24, r26
     776:	40 d6       	rcall	.+3200   	; 0x13f8 <__fixunssfsi>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	9e 87       	std	Y+14, r25	; 0x0e
     77e:	8d 87       	std	Y+13, r24	; 0x0d
     780:	0f c0       	rjmp	.+30     	; 0x7a0 <Standby_State+0xf2>
     782:	89 e1       	ldi	r24, 0x19	; 25
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	98 8b       	std	Y+16, r25	; 0x10
     788:	8f 87       	std	Y+15, r24	; 0x0f
     78a:	8f 85       	ldd	r24, Y+15	; 0x0f
     78c:	98 89       	ldd	r25, Y+16	; 0x10
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <Standby_State+0xe0>
     792:	98 8b       	std	Y+16, r25	; 0x10
     794:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     796:	8d 85       	ldd	r24, Y+13	; 0x0d
     798:	9e 85       	ldd	r25, Y+14	; 0x0e
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	9e 87       	std	Y+14, r25	; 0x0e
     79e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	69 f7       	brne	.-38     	; 0x782 <Standby_State+0xd4>
     7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <Standby_State+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7aa:	69 85       	ldd	r22, Y+9	; 0x09
     7ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     7ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     7b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     7b2:	22 d6       	rcall	.+3140   	; 0x13f8 <__fixunssfsi>
     7b4:	dc 01       	movw	r26, r24
     7b6:	cb 01       	movw	r24, r22
     7b8:	9e 87       	std	Y+14, r25	; 0x0e
     7ba:	8d 87       	std	Y+13, r24	; 0x0d
     7bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     7be:	9e 85       	ldd	r25, Y+14	; 0x0e
     7c0:	9a 8b       	std	Y+18, r25	; 0x12
     7c2:	89 8b       	std	Y+17, r24	; 0x11
     7c4:	89 89       	ldd	r24, Y+17	; 0x11
     7c6:	9a 89       	ldd	r25, Y+18	; 0x12
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <Standby_State+0x11a>
     7cc:	9a 8b       	std	Y+18, r25	; 0x12
     7ce:	89 8b       	std	Y+17, r24	; 0x11
		
		/* Delay of 3 seconds to let the pir count increment */
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();
     7d0:	78 d5       	rcall	.+2800   	; 0x12c2 <Get_Pir_count>
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     7d6:	80 91 60 00 	lds	r24, 0x0060
     7da:	90 91 61 00 	lds	r25, 0x0061
     7de:	29 81       	ldd	r18, Y+1	; 0x01
     7e0:	3a 81       	ldd	r19, Y+2	; 0x02
     7e2:	82 17       	cp	r24, r18
     7e4:	93 07       	cpc	r25, r19
     7e6:	20 f4       	brcc	.+8      	; 0x7f0 <Standby_State+0x142>
		{
			motascontroller_state = MOTAS_ACTIVE_STATE;
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	80 93 8d 00 	sts	0x008D, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     7ee:	07 c0       	rjmp	.+14     	; 0x7fe <Standby_State+0x150>
			motascontroller_state = MOTAS_ACTIVE_STATE;
		}
		/* Do nothing and stay in the current state */
		else 
		{
			motascontroller_state = MOTAS_STANDBY_STATE;
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	80 93 8d 00 	sts	0x008D, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <Standby_State+0x150>
		}
	}
	/* Do nothing and stay in the current state */
	else
	{
		motascontroller_state = MOTAS_STANDBY_STATE;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	80 93 8d 00 	sts	0x008D, r24
	}
}
     7fe:	62 96       	adiw	r28, 0x12	; 18
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <Active_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Active_State(void)
{
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	a0 97       	sbiw	r28, 0x20	; 32
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
	uint16_t active_pir_count = 0;
     824:	1a 82       	std	Y+2, r1	; 0x02
     826:	19 82       	std	Y+1, r1	; 0x01
	uint16_t active_usscount = 0; 
     828:	1c 82       	std	Y+4, r1	; 0x04
     82a:	1b 82       	std	Y+3, r1	; 0x03
	
	/* Play music */
	if(False == flag_player_status_g)
     82c:	8c e8       	ldi	r24, 0x8C	; 140
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	fc 01       	movw	r30, r24
     832:	80 81       	ld	r24, Z
     834:	82 70       	andi	r24, 0x02	; 2
     836:	88 23       	and	r24, r24
     838:	59 f4       	brne	.+22     	; 0x850 <Active_State+0x40>
	{
		/* Change the status of music player to playing */
		flag_player_status_g = True;
     83a:	8c e8       	ldi	r24, 0x8C	; 140
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	20 81       	ld	r18, Z
     842:	22 60       	ori	r18, 0x02	; 2
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
		/* Play the first track */
		Dfplayer_Cmd(CMD_PLY_TRCK, 1);
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	8e dd       	rcall	.-1252   	; 0x36c <Dfplayer_Cmd>
	{
		/* Do nothing */
	}

	/* Orange led light for 1 second indicating in the standy state */
	DebugLedTransmit(LED_ON ,LED_ORANGE);
     850:	63 e0       	ldi	r22, 0x03	; 3
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	10 dd       	rcall	.-1504   	; 0x276 <DebugLedTransmit>
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	aa e7       	ldi	r26, 0x7A	; 122
     85c:	b4 e4       	ldi	r27, 0x44	; 68
     85e:	8d 83       	std	Y+5, r24	; 0x05
     860:	9e 83       	std	Y+6, r25	; 0x06
     862:	af 83       	std	Y+7, r26	; 0x07
     864:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	4a e7       	ldi	r20, 0x7A	; 122
     86c:	53 e4       	ldi	r21, 0x43	; 67
     86e:	6d 81       	ldd	r22, Y+5	; 0x05
     870:	7e 81       	ldd	r23, Y+6	; 0x06
     872:	8f 81       	ldd	r24, Y+7	; 0x07
     874:	98 85       	ldd	r25, Y+8	; 0x08
     876:	65 d6       	rcall	.+3274   	; 0x1542 <__mulsf3>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	89 87       	std	Y+9, r24	; 0x09
     87e:	9a 87       	std	Y+10, r25	; 0x0a
     880:	ab 87       	std	Y+11, r26	; 0x0b
     882:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e8       	ldi	r20, 0x80	; 128
     88a:	5f e3       	ldi	r21, 0x3F	; 63
     88c:	69 85       	ldd	r22, Y+9	; 0x09
     88e:	7a 85       	ldd	r23, Y+10	; 0x0a
     890:	8b 85       	ldd	r24, Y+11	; 0x0b
     892:	9c 85       	ldd	r25, Y+12	; 0x0c
     894:	45 d5       	rcall	.+2698   	; 0x1320 <__cmpsf2>
     896:	88 23       	and	r24, r24
     898:	2c f4       	brge	.+10     	; 0x8a4 <Active_State+0x94>
		__ticks = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9e 87       	std	Y+14, r25	; 0x0e
     8a0:	8d 87       	std	Y+13, r24	; 0x0d
     8a2:	3b c0       	rjmp	.+118    	; 0x91a <Active_State+0x10a>
	else if (__tmp > 65535)
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	3f ef       	ldi	r19, 0xFF	; 255
     8a8:	4f e7       	ldi	r20, 0x7F	; 127
     8aa:	57 e4       	ldi	r21, 0x47	; 71
     8ac:	69 85       	ldd	r22, Y+9	; 0x09
     8ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     8b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b4:	42 d6       	rcall	.+3204   	; 0x153a <__gesf2>
     8b6:	18 16       	cp	r1, r24
     8b8:	3c f5       	brge	.+78     	; 0x908 <Active_State+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e2       	ldi	r20, 0x20	; 32
     8c0:	51 e4       	ldi	r21, 0x41	; 65
     8c2:	6d 81       	ldd	r22, Y+5	; 0x05
     8c4:	7e 81       	ldd	r23, Y+6	; 0x06
     8c6:	8f 81       	ldd	r24, Y+7	; 0x07
     8c8:	98 85       	ldd	r25, Y+8	; 0x08
     8ca:	3b d6       	rcall	.+3190   	; 0x1542 <__mulsf3>
     8cc:	dc 01       	movw	r26, r24
     8ce:	cb 01       	movw	r24, r22
     8d0:	bc 01       	movw	r22, r24
     8d2:	cd 01       	movw	r24, r26
     8d4:	91 d5       	rcall	.+2850   	; 0x13f8 <__fixunssfsi>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	9e 87       	std	Y+14, r25	; 0x0e
     8dc:	8d 87       	std	Y+13, r24	; 0x0d
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <Active_State+0xee>
     8e0:	89 e1       	ldi	r24, 0x19	; 25
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	98 8b       	std	Y+16, r25	; 0x10
     8e6:	8f 87       	std	Y+15, r24	; 0x0f
     8e8:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ea:	98 89       	ldd	r25, Y+16	; 0x10
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <Active_State+0xdc>
     8f0:	98 8b       	std	Y+16, r25	; 0x10
     8f2:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	9e 87       	std	Y+14, r25	; 0x0e
     8fc:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     900:	9e 85       	ldd	r25, Y+14	; 0x0e
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	69 f7       	brne	.-38     	; 0x8e0 <Active_State+0xd0>
     906:	13 c0       	rjmp	.+38     	; 0x92e <Active_State+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     908:	69 85       	ldd	r22, Y+9	; 0x09
     90a:	7a 85       	ldd	r23, Y+10	; 0x0a
     90c:	8b 85       	ldd	r24, Y+11	; 0x0b
     90e:	9c 85       	ldd	r25, Y+12	; 0x0c
     910:	73 d5       	rcall	.+2790   	; 0x13f8 <__fixunssfsi>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	9e 87       	std	Y+14, r25	; 0x0e
     918:	8d 87       	std	Y+13, r24	; 0x0d
     91a:	8d 85       	ldd	r24, Y+13	; 0x0d
     91c:	9e 85       	ldd	r25, Y+14	; 0x0e
     91e:	9a 8b       	std	Y+18, r25	; 0x12
     920:	89 8b       	std	Y+17, r24	; 0x11
     922:	89 89       	ldd	r24, Y+17	; 0x11
     924:	9a 89       	ldd	r25, Y+18	; 0x12
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <Active_State+0x116>
     92a:	9a 8b       	std	Y+18, r25	; 0x12
     92c:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(1000);
	DebugLedTransmit(LED_OFF ,LED_ORANGE);		/* Switch OFF the LED */
     92e:	63 e0       	ldi	r22, 0x03	; 3
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	a1 dc       	rcall	.-1726   	; 0x276 <DebugLedTransmit>
	
	Reset_Pir_count();
     934:	d1 d4       	rcall	.+2466   	; 0x12d8 <Reset_Pir_count>

	/* Get ultrasonic count */
	active_usscount = Get_Uss_Count(); 
     936:	15 d4       	rcall	.+2090   	; 0x1162 <Get_Uss_Count>
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e8       	ldi	r25, 0x80	; 128
     940:	ab e3       	ldi	r26, 0x3B	; 59
     942:	b5 e4       	ldi	r27, 0x45	; 69
     944:	8b 8b       	std	Y+19, r24	; 0x13
     946:	9c 8b       	std	Y+20, r25	; 0x14
     948:	ad 8b       	std	Y+21, r26	; 0x15
     94a:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	4a e7       	ldi	r20, 0x7A	; 122
     952:	53 e4       	ldi	r21, 0x43	; 67
     954:	6b 89       	ldd	r22, Y+19	; 0x13
     956:	7c 89       	ldd	r23, Y+20	; 0x14
     958:	8d 89       	ldd	r24, Y+21	; 0x15
     95a:	9e 89       	ldd	r25, Y+22	; 0x16
     95c:	f2 d5       	rcall	.+3044   	; 0x1542 <__mulsf3>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	8f 8b       	std	Y+23, r24	; 0x17
     964:	98 8f       	std	Y+24, r25	; 0x18
     966:	a9 8f       	std	Y+25, r26	; 0x19
     968:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e8       	ldi	r20, 0x80	; 128
     970:	5f e3       	ldi	r21, 0x3F	; 63
     972:	6f 89       	ldd	r22, Y+23	; 0x17
     974:	78 8d       	ldd	r23, Y+24	; 0x18
     976:	89 8d       	ldd	r24, Y+25	; 0x19
     978:	9a 8d       	ldd	r25, Y+26	; 0x1a
     97a:	d2 d4       	rcall	.+2468   	; 0x1320 <__cmpsf2>
     97c:	88 23       	and	r24, r24
     97e:	2c f4       	brge	.+10     	; 0x98a <Active_State+0x17a>
		__ticks = 1;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	9c 8f       	std	Y+28, r25	; 0x1c
     986:	8b 8f       	std	Y+27, r24	; 0x1b
     988:	3b c0       	rjmp	.+118    	; 0xa00 <Active_State+0x1f0>
	else if (__tmp > 65535)
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	3f ef       	ldi	r19, 0xFF	; 255
     98e:	4f e7       	ldi	r20, 0x7F	; 127
     990:	57 e4       	ldi	r21, 0x47	; 71
     992:	6f 89       	ldd	r22, Y+23	; 0x17
     994:	78 8d       	ldd	r23, Y+24	; 0x18
     996:	89 8d       	ldd	r24, Y+25	; 0x19
     998:	9a 8d       	ldd	r25, Y+26	; 0x1a
     99a:	cf d5       	rcall	.+2974   	; 0x153a <__gesf2>
     99c:	18 16       	cp	r1, r24
     99e:	3c f5       	brge	.+78     	; 0x9ee <Active_State+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e2       	ldi	r20, 0x20	; 32
     9a6:	51 e4       	ldi	r21, 0x41	; 65
     9a8:	6b 89       	ldd	r22, Y+19	; 0x13
     9aa:	7c 89       	ldd	r23, Y+20	; 0x14
     9ac:	8d 89       	ldd	r24, Y+21	; 0x15
     9ae:	9e 89       	ldd	r25, Y+22	; 0x16
     9b0:	c8 d5       	rcall	.+2960   	; 0x1542 <__mulsf3>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	bc 01       	movw	r22, r24
     9b8:	cd 01       	movw	r24, r26
     9ba:	1e d5       	rcall	.+2620   	; 0x13f8 <__fixunssfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	9c 8f       	std	Y+28, r25	; 0x1c
     9c2:	8b 8f       	std	Y+27, r24	; 0x1b
     9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <Active_State+0x1d4>
     9c6:	89 e1       	ldi	r24, 0x19	; 25
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9e 8f       	std	Y+30, r25	; 0x1e
     9cc:	8d 8f       	std	Y+29, r24	; 0x1d
     9ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <Active_State+0x1c2>
     9d6:	9e 8f       	std	Y+30, r25	; 0x1e
     9d8:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	9c 8f       	std	Y+28, r25	; 0x1c
     9e2:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	69 f7       	brne	.-38     	; 0x9c6 <Active_State+0x1b6>
     9ec:	13 c0       	rjmp	.+38     	; 0xa14 <Active_State+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ee:	6f 89       	ldd	r22, Y+23	; 0x17
     9f0:	78 8d       	ldd	r23, Y+24	; 0x18
     9f2:	89 8d       	ldd	r24, Y+25	; 0x19
     9f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9f6:	00 d5       	rcall	.+2560   	; 0x13f8 <__fixunssfsi>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	9c 8f       	std	Y+28, r25	; 0x1c
     9fe:	8b 8f       	std	Y+27, r24	; 0x1b
     a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a04:	98 a3       	std	Y+32, r25	; 0x20
     a06:	8f 8f       	std	Y+31, r24	; 0x1f
     a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a0a:	98 a1       	ldd	r25, Y+32	; 0x20
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <Active_State+0x1fc>
     a10:	98 a3       	std	Y+32, r25	; 0x20
     a12:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(3000);
	
	/* Get ultrasonic count */
	active_usscount = Get_Uss_Count(); 
     a14:	a6 d3       	rcall	.+1868   	; 0x1162 <Get_Uss_Count>
     a16:	9c 83       	std	Y+4, r25	; 0x04
     a18:	8b 83       	std	Y+3, r24	; 0x03
	/* Get pir count */
	active_pir_count = Get_Pir_count();
     a1a:	53 d4       	rcall	.+2214   	; 0x12c2 <Get_Pir_count>
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check if Customer present in the room */
	if((active_pir_count >= threshold_pir_count) || (active_usscount < threshold_uss_count))
     a20:	80 91 60 00 	lds	r24, 0x0060
     a24:	90 91 61 00 	lds	r25, 0x0061
     a28:	29 81       	ldd	r18, Y+1	; 0x01
     a2a:	3a 81       	ldd	r19, Y+2	; 0x02
     a2c:	28 17       	cp	r18, r24
     a2e:	39 07       	cpc	r19, r25
     a30:	48 f4       	brcc	.+18     	; 0xa44 <Active_State+0x234>
     a32:	80 91 8e 00 	lds	r24, 0x008E
     a36:	90 91 8f 00 	lds	r25, 0x008F
     a3a:	2b 81       	ldd	r18, Y+3	; 0x03
     a3c:	3c 81       	ldd	r19, Y+4	; 0x04
     a3e:	28 17       	cp	r18, r24
     a40:	39 07       	cpc	r19, r25
     a42:	20 f4       	brcc	.+8      	; 0xa4c <Active_State+0x23c>
	{
		/* Do not change the state. Keep audio playing*/
		motascontroller_state = MOTAS_ACTIVE_STATE;
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	80 93 8d 00 	sts	0x008D, r24
     a4a:	0f c0       	rjmp	.+30     	; 0xa6a <Active_State+0x25a>
	}
	/*Customer has left the room */
	else
	{
		/* Stop playing music */
		Dfplayer_Cmd(CMD_STOP, 1);
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	86 e1       	ldi	r24, 0x16	; 22
     a52:	8c dc       	rcall	.-1768   	; 0x36c <Dfplayer_Cmd>
		
		/* Change the status of music player to false(Music not playing) */
		flag_player_status_g = False;
     a54:	8c e8       	ldi	r24, 0x8C	; 140
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	fc 01       	movw	r30, r24
     a5a:	20 81       	ld	r18, Z
     a5c:	2d 7f       	andi	r18, 0xFD	; 253
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
		
		/* Change the state to standby state*/
		Reset_Pir_count();
     a62:	3a d4       	rcall	.+2164   	; 0x12d8 <Reset_Pir_count>
		motascontroller_state = MOTAS_STANDBY_STATE;	
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	80 93 8d 00 	sts	0x008D, r24
	}
}
     a6a:	a0 96       	adiw	r28, 0x20	; 32
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <Debugging_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Debugging_State(void)
{
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	ae 97       	sbiw	r28, 0x2e	; 46
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
	uint16_t pir_count = 0;
     a90:	1a 82       	std	Y+2, r1	; 0x02
     a92:	19 82       	std	Y+1, r1	; 0x01
	uint16_t uss_count = 0;
     a94:	1c 82       	std	Y+4, r1	; 0x04
     a96:	1b 82       	std	Y+3, r1	; 0x03

	/* Yellow led light indicating start of Debugging mode */
	DebugLedTransmit(LED_ON ,LED_YELLOW);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	ec db       	rcall	.-2088   	; 0x276 <DebugLedTransmit>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	aa ef       	ldi	r26, 0xFA	; 250
     aa4:	b4 e4       	ldi	r27, 0x44	; 68
     aa6:	8d 83       	std	Y+5, r24	; 0x05
     aa8:	9e 83       	std	Y+6, r25	; 0x06
     aaa:	af 83       	std	Y+7, r26	; 0x07
     aac:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	4a e7       	ldi	r20, 0x7A	; 122
     ab4:	53 e4       	ldi	r21, 0x43	; 67
     ab6:	6d 81       	ldd	r22, Y+5	; 0x05
     ab8:	7e 81       	ldd	r23, Y+6	; 0x06
     aba:	8f 81       	ldd	r24, Y+7	; 0x07
     abc:	98 85       	ldd	r25, Y+8	; 0x08
     abe:	41 d5       	rcall	.+2690   	; 0x1542 <__mulsf3>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	89 87       	std	Y+9, r24	; 0x09
     ac6:	9a 87       	std	Y+10, r25	; 0x0a
     ac8:	ab 87       	std	Y+11, r26	; 0x0b
     aca:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e8       	ldi	r20, 0x80	; 128
     ad2:	5f e3       	ldi	r21, 0x3F	; 63
     ad4:	69 85       	ldd	r22, Y+9	; 0x09
     ad6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ad8:	8b 85       	ldd	r24, Y+11	; 0x0b
     ada:	9c 85       	ldd	r25, Y+12	; 0x0c
     adc:	21 d4       	rcall	.+2114   	; 0x1320 <__cmpsf2>
     ade:	88 23       	and	r24, r24
     ae0:	2c f4       	brge	.+10     	; 0xaec <Debugging_State+0x70>
		__ticks = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	9e 87       	std	Y+14, r25	; 0x0e
     ae8:	8d 87       	std	Y+13, r24	; 0x0d
     aea:	3b c0       	rjmp	.+118    	; 0xb62 <Debugging_State+0xe6>
	else if (__tmp > 65535)
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	3f ef       	ldi	r19, 0xFF	; 255
     af0:	4f e7       	ldi	r20, 0x7F	; 127
     af2:	57 e4       	ldi	r21, 0x47	; 71
     af4:	69 85       	ldd	r22, Y+9	; 0x09
     af6:	7a 85       	ldd	r23, Y+10	; 0x0a
     af8:	8b 85       	ldd	r24, Y+11	; 0x0b
     afa:	9c 85       	ldd	r25, Y+12	; 0x0c
     afc:	1e d5       	rcall	.+2620   	; 0x153a <__gesf2>
     afe:	18 16       	cp	r1, r24
     b00:	3c f5       	brge	.+78     	; 0xb50 <Debugging_State+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e2       	ldi	r20, 0x20	; 32
     b08:	51 e4       	ldi	r21, 0x41	; 65
     b0a:	6d 81       	ldd	r22, Y+5	; 0x05
     b0c:	7e 81       	ldd	r23, Y+6	; 0x06
     b0e:	8f 81       	ldd	r24, Y+7	; 0x07
     b10:	98 85       	ldd	r25, Y+8	; 0x08
     b12:	17 d5       	rcall	.+2606   	; 0x1542 <__mulsf3>
     b14:	dc 01       	movw	r26, r24
     b16:	cb 01       	movw	r24, r22
     b18:	bc 01       	movw	r22, r24
     b1a:	cd 01       	movw	r24, r26
     b1c:	6d d4       	rcall	.+2266   	; 0x13f8 <__fixunssfsi>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	9e 87       	std	Y+14, r25	; 0x0e
     b24:	8d 87       	std	Y+13, r24	; 0x0d
     b26:	0f c0       	rjmp	.+30     	; 0xb46 <Debugging_State+0xca>
     b28:	89 e1       	ldi	r24, 0x19	; 25
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	98 8b       	std	Y+16, r25	; 0x10
     b2e:	8f 87       	std	Y+15, r24	; 0x0f
     b30:	8f 85       	ldd	r24, Y+15	; 0x0f
     b32:	98 89       	ldd	r25, Y+16	; 0x10
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <Debugging_State+0xb8>
     b38:	98 8b       	std	Y+16, r25	; 0x10
     b3a:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	9e 87       	std	Y+14, r25	; 0x0e
     b44:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b46:	8d 85       	ldd	r24, Y+13	; 0x0d
     b48:	9e 85       	ldd	r25, Y+14	; 0x0e
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	69 f7       	brne	.-38     	; 0xb28 <Debugging_State+0xac>
     b4e:	13 c0       	rjmp	.+38     	; 0xb76 <Debugging_State+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b50:	69 85       	ldd	r22, Y+9	; 0x09
     b52:	7a 85       	ldd	r23, Y+10	; 0x0a
     b54:	8b 85       	ldd	r24, Y+11	; 0x0b
     b56:	9c 85       	ldd	r25, Y+12	; 0x0c
     b58:	4f d4       	rcall	.+2206   	; 0x13f8 <__fixunssfsi>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	9e 87       	std	Y+14, r25	; 0x0e
     b60:	8d 87       	std	Y+13, r24	; 0x0d
     b62:	8d 85       	ldd	r24, Y+13	; 0x0d
     b64:	9e 85       	ldd	r25, Y+14	; 0x0e
     b66:	9a 8b       	std	Y+18, r25	; 0x12
     b68:	89 8b       	std	Y+17, r24	; 0x11
     b6a:	89 89       	ldd	r24, Y+17	; 0x11
     b6c:	9a 89       	ldd	r25, Y+18	; 0x12
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <Debugging_State+0xf2>
     b72:	9a 8b       	std	Y+18, r25	; 0x12
     b74:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(2000);
	
	/* Get the pir count */
	Reset_Pir_count();
     b76:	b0 d3       	rcall	.+1888   	; 0x12d8 <Reset_Pir_count>
	pir_count = Get_Pir_count();
     b78:	a4 d3       	rcall	.+1864   	; 0x12c2 <Get_Pir_count>
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01

	/* Get the USS count */
	uss_count = Get_Uss_Count();
     b7e:	f1 d2       	rcall	.+1506   	; 0x1162 <Get_Uss_Count>
     b80:	9c 83       	std	Y+4, r25	; 0x04
     b82:	8b 83       	std	Y+3, r24	; 0x03

	/* Check if pir is triggered */
	if(pir_count > 1)
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	91 05       	cpc	r25, r1
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <Debugging_State+0x114>
     b8e:	6f c0       	rjmp	.+222    	; 0xc6e <Debugging_State+0x1f2>
	{
		/* Red led light indicating pir triggered */
		DebugLedTransmit(LED_ON, LED_RED);
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	70 db       	rcall	.-2336   	; 0x276 <DebugLedTransmit>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	aa ef       	ldi	r26, 0xFA	; 250
     b9c:	b4 e4       	ldi	r27, 0x44	; 68
     b9e:	8b 8b       	std	Y+19, r24	; 0x13
     ba0:	9c 8b       	std	Y+20, r25	; 0x14
     ba2:	ad 8b       	std	Y+21, r26	; 0x15
     ba4:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a e7       	ldi	r20, 0x7A	; 122
     bac:	53 e4       	ldi	r21, 0x43	; 67
     bae:	6b 89       	ldd	r22, Y+19	; 0x13
     bb0:	7c 89       	ldd	r23, Y+20	; 0x14
     bb2:	8d 89       	ldd	r24, Y+21	; 0x15
     bb4:	9e 89       	ldd	r25, Y+22	; 0x16
     bb6:	c5 d4       	rcall	.+2442   	; 0x1542 <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	8f 8b       	std	Y+23, r24	; 0x17
     bbe:	98 8f       	std	Y+24, r25	; 0x18
     bc0:	a9 8f       	std	Y+25, r26	; 0x19
     bc2:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e8       	ldi	r20, 0x80	; 128
     bca:	5f e3       	ldi	r21, 0x3F	; 63
     bcc:	6f 89       	ldd	r22, Y+23	; 0x17
     bce:	78 8d       	ldd	r23, Y+24	; 0x18
     bd0:	89 8d       	ldd	r24, Y+25	; 0x19
     bd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bd4:	a5 d3       	rcall	.+1866   	; 0x1320 <__cmpsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	2c f4       	brge	.+10     	; 0xbe4 <Debugging_State+0x168>
		__ticks = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9c 8f       	std	Y+28, r25	; 0x1c
     be0:	8b 8f       	std	Y+27, r24	; 0x1b
     be2:	3b c0       	rjmp	.+118    	; 0xc5a <Debugging_State+0x1de>
	else if (__tmp > 65535)
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	3f ef       	ldi	r19, 0xFF	; 255
     be8:	4f e7       	ldi	r20, 0x7F	; 127
     bea:	57 e4       	ldi	r21, 0x47	; 71
     bec:	6f 89       	ldd	r22, Y+23	; 0x17
     bee:	78 8d       	ldd	r23, Y+24	; 0x18
     bf0:	89 8d       	ldd	r24, Y+25	; 0x19
     bf2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bf4:	a2 d4       	rcall	.+2372   	; 0x153a <__gesf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	3c f5       	brge	.+78     	; 0xc48 <Debugging_State+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e2       	ldi	r20, 0x20	; 32
     c00:	51 e4       	ldi	r21, 0x41	; 65
     c02:	6b 89       	ldd	r22, Y+19	; 0x13
     c04:	7c 89       	ldd	r23, Y+20	; 0x14
     c06:	8d 89       	ldd	r24, Y+21	; 0x15
     c08:	9e 89       	ldd	r25, Y+22	; 0x16
     c0a:	9b d4       	rcall	.+2358   	; 0x1542 <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	f1 d3       	rcall	.+2018   	; 0x13f8 <__fixunssfsi>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	9c 8f       	std	Y+28, r25	; 0x1c
     c1c:	8b 8f       	std	Y+27, r24	; 0x1b
     c1e:	0f c0       	rjmp	.+30     	; 0xc3e <Debugging_State+0x1c2>
     c20:	89 e1       	ldi	r24, 0x19	; 25
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	9e 8f       	std	Y+30, r25	; 0x1e
     c26:	8d 8f       	std	Y+29, r24	; 0x1d
     c28:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <Debugging_State+0x1b0>
     c30:	9e 8f       	std	Y+30, r25	; 0x1e
     c32:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	9c 8f       	std	Y+28, r25	; 0x1c
     c3c:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	69 f7       	brne	.-38     	; 0xc20 <Debugging_State+0x1a4>
     c46:	13 c0       	rjmp	.+38     	; 0xc6e <Debugging_State+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c48:	6f 89       	ldd	r22, Y+23	; 0x17
     c4a:	78 8d       	ldd	r23, Y+24	; 0x18
     c4c:	89 8d       	ldd	r24, Y+25	; 0x19
     c4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c50:	d3 d3       	rcall	.+1958   	; 0x13f8 <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	9c 8f       	std	Y+28, r25	; 0x1c
     c58:	8b 8f       	std	Y+27, r24	; 0x1b
     c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c5e:	98 a3       	std	Y+32, r25	; 0x20
     c60:	8f 8f       	std	Y+31, r24	; 0x1f
     c62:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c64:	98 a1       	ldd	r25, Y+32	; 0x20
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <Debugging_State+0x1ea>
     c6a:	98 a3       	std	Y+32, r25	; 0x20
     c6c:	8f 8f       	std	Y+31, r24	; 0x1f
	}
	/* Check if USS is triggered */
	else if(uss_count > debug_threshold_uss_count);
	{
		/* Orange led light indicating uss triggered */
		DebugLedTransmit(LED_ON, LED_ORANGE);
     c6e:	63 e0       	ldi	r22, 0x03	; 3
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	01 db       	rcall	.-2558   	; 0x276 <DebugLedTransmit>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	aa ef       	ldi	r26, 0xFA	; 250
     c7a:	b4 e4       	ldi	r27, 0x44	; 68
     c7c:	89 a3       	std	Y+33, r24	; 0x21
     c7e:	9a a3       	std	Y+34, r25	; 0x22
     c80:	ab a3       	std	Y+35, r26	; 0x23
     c82:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	4a e7       	ldi	r20, 0x7A	; 122
     c8a:	53 e4       	ldi	r21, 0x43	; 67
     c8c:	69 a1       	ldd	r22, Y+33	; 0x21
     c8e:	7a a1       	ldd	r23, Y+34	; 0x22
     c90:	8b a1       	ldd	r24, Y+35	; 0x23
     c92:	9c a1       	ldd	r25, Y+36	; 0x24
     c94:	56 d4       	rcall	.+2220   	; 0x1542 <__mulsf3>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	8d a3       	std	Y+37, r24	; 0x25
     c9c:	9e a3       	std	Y+38, r25	; 0x26
     c9e:	af a3       	std	Y+39, r26	; 0x27
     ca0:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e8       	ldi	r20, 0x80	; 128
     ca8:	5f e3       	ldi	r21, 0x3F	; 63
     caa:	6d a1       	ldd	r22, Y+37	; 0x25
     cac:	7e a1       	ldd	r23, Y+38	; 0x26
     cae:	8f a1       	ldd	r24, Y+39	; 0x27
     cb0:	98 a5       	ldd	r25, Y+40	; 0x28
     cb2:	36 d3       	rcall	.+1644   	; 0x1320 <__cmpsf2>
     cb4:	88 23       	and	r24, r24
     cb6:	2c f4       	brge	.+10     	; 0xcc2 <Debugging_State+0x246>
		__ticks = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	9a a7       	std	Y+42, r25	; 0x2a
     cbe:	89 a7       	std	Y+41, r24	; 0x29
     cc0:	3b c0       	rjmp	.+118    	; 0xd38 <Debugging_State+0x2bc>
	else if (__tmp > 65535)
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	3f ef       	ldi	r19, 0xFF	; 255
     cc6:	4f e7       	ldi	r20, 0x7F	; 127
     cc8:	57 e4       	ldi	r21, 0x47	; 71
     cca:	6d a1       	ldd	r22, Y+37	; 0x25
     ccc:	7e a1       	ldd	r23, Y+38	; 0x26
     cce:	8f a1       	ldd	r24, Y+39	; 0x27
     cd0:	98 a5       	ldd	r25, Y+40	; 0x28
     cd2:	33 d4       	rcall	.+2150   	; 0x153a <__gesf2>
     cd4:	18 16       	cp	r1, r24
     cd6:	3c f5       	brge	.+78     	; 0xd26 <Debugging_State+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e2       	ldi	r20, 0x20	; 32
     cde:	51 e4       	ldi	r21, 0x41	; 65
     ce0:	69 a1       	ldd	r22, Y+33	; 0x21
     ce2:	7a a1       	ldd	r23, Y+34	; 0x22
     ce4:	8b a1       	ldd	r24, Y+35	; 0x23
     ce6:	9c a1       	ldd	r25, Y+36	; 0x24
     ce8:	2c d4       	rcall	.+2136   	; 0x1542 <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	82 d3       	rcall	.+1796   	; 0x13f8 <__fixunssfsi>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	9a a7       	std	Y+42, r25	; 0x2a
     cfa:	89 a7       	std	Y+41, r24	; 0x29
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <Debugging_State+0x2a0>
     cfe:	89 e1       	ldi	r24, 0x19	; 25
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9c a7       	std	Y+44, r25	; 0x2c
     d04:	8b a7       	std	Y+43, r24	; 0x2b
     d06:	8b a5       	ldd	r24, Y+43	; 0x2b
     d08:	9c a5       	ldd	r25, Y+44	; 0x2c
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <Debugging_State+0x28e>
     d0e:	9c a7       	std	Y+44, r25	; 0x2c
     d10:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d12:	89 a5       	ldd	r24, Y+41	; 0x29
     d14:	9a a5       	ldd	r25, Y+42	; 0x2a
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	9a a7       	std	Y+42, r25	; 0x2a
     d1a:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1c:	89 a5       	ldd	r24, Y+41	; 0x29
     d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	69 f7       	brne	.-38     	; 0xcfe <Debugging_State+0x282>
     d24:	13 c0       	rjmp	.+38     	; 0xd4c <Debugging_State+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d26:	6d a1       	ldd	r22, Y+37	; 0x25
     d28:	7e a1       	ldd	r23, Y+38	; 0x26
     d2a:	8f a1       	ldd	r24, Y+39	; 0x27
     d2c:	98 a5       	ldd	r25, Y+40	; 0x28
     d2e:	64 d3       	rcall	.+1736   	; 0x13f8 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9a a7       	std	Y+42, r25	; 0x2a
     d36:	89 a7       	std	Y+41, r24	; 0x29
     d38:	89 a5       	ldd	r24, Y+41	; 0x29
     d3a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d3c:	9e a7       	std	Y+46, r25	; 0x2e
     d3e:	8d a7       	std	Y+45, r24	; 0x2d
     d40:	8d a5       	ldd	r24, Y+45	; 0x2d
     d42:	9e a5       	ldd	r25, Y+46	; 0x2e
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <Debugging_State+0x2c8>
     d48:	9e a7       	std	Y+46, r25	; 0x2e
     d4a:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(2000);
	}
}
     d4c:	ae 96       	adiw	r28, 0x2e	; 46
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <MotasController>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void MotasController(void)
{
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
     d66:	80 91 8d 00 	lds	r24, 0x008D
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	91 05       	cpc	r25, r1
     d72:	a1 f0       	breq	.+40     	; 0xd9c <MotasController+0x3e>
     d74:	83 30       	cpi	r24, 0x03	; 3
     d76:	91 05       	cpc	r25, r1
     d78:	34 f4       	brge	.+12     	; 0xd86 <MotasController+0x28>
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	59 f0       	breq	.+22     	; 0xd94 <MotasController+0x36>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	91 05       	cpc	r25, r1
     d82:	51 f0       	breq	.+20     	; 0xd98 <MotasController+0x3a>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
     d84:	11 c0       	rjmp	.+34     	; 0xda8 <MotasController+0x4a>
*/
void MotasController(void)
{
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	91 05       	cpc	r25, r1
     d8a:	51 f0       	breq	.+20     	; 0xda0 <MotasController+0x42>
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	91 05       	cpc	r25, r1
     d90:	49 f0       	breq	.+18     	; 0xda4 <MotasController+0x46>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <MotasController+0x4a>
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
	{
		case MOTAS_INIT_STATE:
			Init_State();
     d94:	e6 db       	rcall	.-2100   	; 0x562 <Init_State>
			break;	
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <MotasController+0x4a>

		case MOTAS_CALIBRATION_STATE:
			Calibration_State();
     d98:	fc db       	rcall	.-2056   	; 0x592 <Calibration_State>
			break;	
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <MotasController+0x4a>

		case MOTAS_STANDBY_STATE:
			Standby_State();
     d9c:	88 dc       	rcall	.-1776   	; 0x6ae <Standby_State>
			break;
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <MotasController+0x4a>

		case MOTAS_ACTIVE_STATE:
			Active_State();
     da0:	37 dd       	rcall	.-1426   	; 0x810 <Active_State>
			break;
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <MotasController+0x4a>

		case MOTAS_DEBUGGING_STATE:		
			Debugging_State();	
     da4:	6b de       	rcall	.-810    	; 0xa7c <Debugging_State>
			break;
     da6:	00 00       	nop
		default : 
			/*Do nothing*/
			break;	

	}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <__vector_1>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "Peripheral_Drivers.h"

ISR(PIR_INTERRUPT_VECT)
{
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	00 90 5f 00 	lds	r0, 0x005F
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count++;
     dc6:	80 91 93 00 	lds	r24, 0x0093
     dca:	90 91 94 00 	lds	r25, 0x0094
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	90 93 94 00 	sts	0x0094, r25
     dd4:	80 93 93 00 	sts	0x0093, r24
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	0f 90       	pop	r0
     de2:	00 92 5f 00 	sts	0x005F, r0
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <__vector_2>:

ISR(USS_INTERRUPT_VECT)				
{
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	00 90 5f 00 	lds	r0, 0x005F
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	static uint8_t UssEdgeCount = 0;
	if (UssEdgeCount)		
     e18:	80 91 90 00 	lds	r24, 0x0090
     e1c:	88 23       	and	r24, r24
     e1e:	d9 f0       	breq	.+54     	; 0xe56 <__vector_2+0x6a>
	{
		Stop_Timer1();
     e20:	40 d2       	rcall	.+1152   	; 0x12a2 <Stop_Timer1>
		UssPulseCount = TCNT1;		// Store the time duration of the echo pulse.
     e22:	8c e4       	ldi	r24, 0x4C	; 76
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	90 93 92 00 	sts	0x0092, r25
     e30:	80 93 91 00 	sts	0x0091, r24
		TCNT1 = 0;
     e34:	8c e4       	ldi	r24, 0x4C	; 76
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	11 82       	std	Z+1, r1	; 0x01
     e3c:	10 82       	st	Z, r1
		UssEdgeCount = 0;
     e3e:	10 92 90 00 	sts	0x0090, r1
		MCUCR |= (1 << ISC10);												// Rising edge will trigger the next interrupt
     e42:	85 e5       	ldi	r24, 0x55	; 85
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	25 e5       	ldi	r18, 0x55	; 85
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	24 60       	ori	r18, 0x04	; 4
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <__vector_2+0x84>
	}
	else 
	{
		Start_Timer1();
     e56:	15 d2       	rcall	.+1066   	; 0x1282 <Start_Timer1>
		UssEdgeCount = 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 90 00 	sts	0x0090, r24
		MCUCR &= ~(1 << ISC10);										// falling edge for INT0 enabled
     e5e:	85 e5       	ldi	r24, 0x55	; 85
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	25 e5       	ldi	r18, 0x55	; 85
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	f9 01       	movw	r30, r18
     e68:	20 81       	ld	r18, Z
     e6a:	2b 7f       	andi	r18, 0xFB	; 251
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
	}
}
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	00 92 5f 00 	sts	0x005F, r0
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <Trigger_Ultrasonic_Sensor>:

void Trigger_Ultrasonic_Sensor()									// Function tested for 10us trigger 
{
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	a0 97       	sbiw	r28, 0x20	; 32
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	SETBIT(USS_PORT, USS_TRIGGER);
     eac:	82 e3       	ldi	r24, 0x32	; 50
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	22 e3       	ldi	r18, 0x32	; 50
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	f9 01       	movw	r30, r18
     eb6:	20 81       	ld	r18, Z
     eb8:	20 61       	ori	r18, 0x10	; 16
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a0 e2       	ldi	r26, 0x20	; 32
     ec4:	b1 e4       	ldi	r27, 0x41	; 65
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	ab 83       	std	Y+3, r26	; 0x03
     ecc:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
     ece:	2b ea       	ldi	r18, 0xAB	; 171
     ed0:	3a ea       	ldi	r19, 0xAA	; 170
     ed2:	4a ea       	ldi	r20, 0xAA	; 170
     ed4:	5e e3       	ldi	r21, 0x3E	; 62
     ed6:	69 81       	ldd	r22, Y+1	; 0x01
     ed8:	7a 81       	ldd	r23, Y+2	; 0x02
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	31 d3       	rcall	.+1634   	; 0x1542 <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	8d 83       	std	Y+5, r24	; 0x05
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	af 83       	std	Y+7, r26	; 0x07
     eea:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e8       	ldi	r20, 0x80	; 128
     ef2:	5e e3       	ldi	r21, 0x3E	; 62
     ef4:	69 81       	ldd	r22, Y+1	; 0x01
     ef6:	7a 81       	ldd	r23, Y+2	; 0x02
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	22 d3       	rcall	.+1604   	; 0x1542 <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	89 87       	std	Y+9, r24	; 0x09
     f04:	9a 87       	std	Y+10, r25	; 0x0a
     f06:	ab 87       	std	Y+11, r26	; 0x0b
     f08:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	6d 81       	ldd	r22, Y+5	; 0x05
     f14:	7e 81       	ldd	r23, Y+6	; 0x06
     f16:	8f 81       	ldd	r24, Y+7	; 0x07
     f18:	98 85       	ldd	r25, Y+8	; 0x08
     f1a:	02 d2       	rcall	.+1028   	; 0x1320 <__cmpsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	1c f4       	brge	.+6      	; 0xf26 <Trigger_Ultrasonic_Sensor+0x8e>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8d 87       	std	Y+13, r24	; 0x0d
     f24:	a7 c0       	rjmp	.+334    	; 0x1074 <Trigger_Ultrasonic_Sensor+0x1dc>
	else if (__tmp2 > 65535)
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	3f ef       	ldi	r19, 0xFF	; 255
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	57 e4       	ldi	r21, 0x47	; 71
     f2e:	69 85       	ldd	r22, Y+9	; 0x09
     f30:	7a 85       	ldd	r23, Y+10	; 0x0a
     f32:	8b 85       	ldd	r24, Y+11	; 0x0b
     f34:	9c 85       	ldd	r25, Y+12	; 0x0c
     f36:	01 d3       	rcall	.+1538   	; 0x153a <__gesf2>
     f38:	18 16       	cp	r1, r24
     f3a:	0c f0       	brlt	.+2      	; 0xf3e <Trigger_Ultrasonic_Sensor+0xa6>
     f3c:	74 c0       	rjmp	.+232    	; 0x1026 <Trigger_Ultrasonic_Sensor+0x18e>
	{
		_delay_ms(__us / 1000.0);
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a e7       	ldi	r20, 0x7A	; 122
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	69 81       	ldd	r22, Y+1	; 0x01
     f48:	7a 81       	ldd	r23, Y+2	; 0x02
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	ec d1       	rcall	.+984    	; 0x1328 <__divsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	8e 87       	std	Y+14, r24	; 0x0e
     f56:	9f 87       	std	Y+15, r25	; 0x0f
     f58:	a8 8b       	std	Y+16, r26	; 0x10
     f5a:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a e7       	ldi	r20, 0x7A	; 122
     f62:	53 e4       	ldi	r21, 0x43	; 67
     f64:	6e 85       	ldd	r22, Y+14	; 0x0e
     f66:	7f 85       	ldd	r23, Y+15	; 0x0f
     f68:	88 89       	ldd	r24, Y+16	; 0x10
     f6a:	99 89       	ldd	r25, Y+17	; 0x11
     f6c:	ea d2       	rcall	.+1492   	; 0x1542 <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	8a 8b       	std	Y+18, r24	; 0x12
     f74:	9b 8b       	std	Y+19, r25	; 0x13
     f76:	ac 8b       	std	Y+20, r26	; 0x14
     f78:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	6a 89       	ldd	r22, Y+18	; 0x12
     f84:	7b 89       	ldd	r23, Y+19	; 0x13
     f86:	8c 89       	ldd	r24, Y+20	; 0x14
     f88:	9d 89       	ldd	r25, Y+21	; 0x15
     f8a:	ca d1       	rcall	.+916    	; 0x1320 <__cmpsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	2c f4       	brge	.+10     	; 0xf9a <Trigger_Ultrasonic_Sensor+0x102>
		__ticks = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9f 8b       	std	Y+23, r25	; 0x17
     f96:	8e 8b       	std	Y+22, r24	; 0x16
     f98:	3b c0       	rjmp	.+118    	; 0x1010 <Trigger_Ultrasonic_Sensor+0x178>
	else if (__tmp > 65535)
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	4f e7       	ldi	r20, 0x7F	; 127
     fa0:	57 e4       	ldi	r21, 0x47	; 71
     fa2:	6a 89       	ldd	r22, Y+18	; 0x12
     fa4:	7b 89       	ldd	r23, Y+19	; 0x13
     fa6:	8c 89       	ldd	r24, Y+20	; 0x14
     fa8:	9d 89       	ldd	r25, Y+21	; 0x15
     faa:	c7 d2       	rcall	.+1422   	; 0x153a <__gesf2>
     fac:	18 16       	cp	r1, r24
     fae:	3c f5       	brge	.+78     	; 0xffe <Trigger_Ultrasonic_Sensor+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	6e 85       	ldd	r22, Y+14	; 0x0e
     fba:	7f 85       	ldd	r23, Y+15	; 0x0f
     fbc:	88 89       	ldd	r24, Y+16	; 0x10
     fbe:	99 89       	ldd	r25, Y+17	; 0x11
     fc0:	c0 d2       	rcall	.+1408   	; 0x1542 <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	16 d2       	rcall	.+1068   	; 0x13f8 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9f 8b       	std	Y+23, r25	; 0x17
     fd2:	8e 8b       	std	Y+22, r24	; 0x16
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <Trigger_Ultrasonic_Sensor+0x15c>
     fd6:	89 e1       	ldi	r24, 0x19	; 25
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	99 8f       	std	Y+25, r25	; 0x19
     fdc:	88 8f       	std	Y+24, r24	; 0x18
     fde:	88 8d       	ldd	r24, Y+24	; 0x18
     fe0:	99 8d       	ldd	r25, Y+25	; 0x19
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <Trigger_Ultrasonic_Sensor+0x14a>
     fe6:	99 8f       	std	Y+25, r25	; 0x19
     fe8:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fea:	8e 89       	ldd	r24, Y+22	; 0x16
     fec:	9f 89       	ldd	r25, Y+23	; 0x17
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	9f 8b       	std	Y+23, r25	; 0x17
     ff2:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	8e 89       	ldd	r24, Y+22	; 0x16
     ff6:	9f 89       	ldd	r25, Y+23	; 0x17
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	69 f7       	brne	.-38     	; 0xfd6 <Trigger_Ultrasonic_Sensor+0x13e>
     ffc:	3b c0       	rjmp	.+118    	; 0x1074 <Trigger_Ultrasonic_Sensor+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffe:	6a 89       	ldd	r22, Y+18	; 0x12
    1000:	7b 89       	ldd	r23, Y+19	; 0x13
    1002:	8c 89       	ldd	r24, Y+20	; 0x14
    1004:	9d 89       	ldd	r25, Y+21	; 0x15
    1006:	f8 d1       	rcall	.+1008   	; 0x13f8 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9f 8b       	std	Y+23, r25	; 0x17
    100e:	8e 8b       	std	Y+22, r24	; 0x16
    1010:	8e 89       	ldd	r24, Y+22	; 0x16
    1012:	9f 89       	ldd	r25, Y+23	; 0x17
    1014:	9b 8f       	std	Y+27, r25	; 0x1b
    1016:	8a 8f       	std	Y+26, r24	; 0x1a
    1018:	8a 8d       	ldd	r24, Y+26	; 0x1a
    101a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <Trigger_Ultrasonic_Sensor+0x184>
    1020:	9b 8f       	std	Y+27, r25	; 0x1b
    1022:	8a 8f       	std	Y+26, r24	; 0x1a
    1024:	27 c0       	rjmp	.+78     	; 0x1074 <Trigger_Ultrasonic_Sensor+0x1dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	53 e4       	ldi	r21, 0x43	; 67
    102e:	6d 81       	ldd	r22, Y+5	; 0x05
    1030:	7e 81       	ldd	r23, Y+6	; 0x06
    1032:	8f 81       	ldd	r24, Y+7	; 0x07
    1034:	98 85       	ldd	r25, Y+8	; 0x08
    1036:	81 d2       	rcall	.+1282   	; 0x153a <__gesf2>
    1038:	18 16       	cp	r1, r24
    103a:	a4 f4       	brge	.+40     	; 0x1064 <Trigger_Ultrasonic_Sensor+0x1cc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    103c:	69 85       	ldd	r22, Y+9	; 0x09
    103e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1040:	8b 85       	ldd	r24, Y+11	; 0x0b
    1042:	9c 85       	ldd	r25, Y+12	; 0x0c
    1044:	d9 d1       	rcall	.+946    	; 0x13f8 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9d 8f       	std	Y+29, r25	; 0x1d
    104c:	8c 8f       	std	Y+28, r24	; 0x1c
    104e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1050:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1052:	9f 8f       	std	Y+31, r25	; 0x1f
    1054:	8e 8f       	std	Y+30, r24	; 0x1e
    1056:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1058:	9f 8d       	ldd	r25, Y+31	; 0x1f
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <Trigger_Ultrasonic_Sensor+0x1c2>
    105e:	9f 8f       	std	Y+31, r25	; 0x1f
    1060:	8e 8f       	std	Y+30, r24	; 0x1e
    1062:	0e c0       	rjmp	.+28     	; 0x1080 <Trigger_Ultrasonic_Sensor+0x1e8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1064:	6d 81       	ldd	r22, Y+5	; 0x05
    1066:	7e 81       	ldd	r23, Y+6	; 0x06
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
    106a:	98 85       	ldd	r25, Y+8	; 0x08
    106c:	c5 d1       	rcall	.+906    	; 0x13f8 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8d 87       	std	Y+13, r24	; 0x0d
    1074:	8d 85       	ldd	r24, Y+13	; 0x0d
    1076:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1078:	88 a1       	ldd	r24, Y+32	; 0x20
    107a:	8a 95       	dec	r24
    107c:	f1 f7       	brne	.-4      	; 0x107a <Trigger_Ultrasonic_Sensor+0x1e2>
    107e:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(10);													// 10us Pulse as per datasheet of HC-SR04 Ultrasonic Sensor
	CLEARBIT(USS_PORT, USS_TRIGGER);
    1080:	82 e3       	ldi	r24, 0x32	; 50
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	22 e3       	ldi	r18, 0x32	; 50
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	f9 01       	movw	r30, r18
    108a:	20 81       	ld	r18, Z
    108c:	2f 7e       	andi	r18, 0xEF	; 239
    108e:	fc 01       	movw	r30, r24
    1090:	20 83       	st	Z, r18
}
    1092:	a0 96       	adiw	r28, 0x20	; 32
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <Init_Pir>:

void Init_Pir()
{
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PIR_INPUT_DIR_REG, PIR_INPUT_PIN);						// Set the pin direction as input
    10ac:	81 e3       	ldi	r24, 0x31	; 49
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	21 e3       	ldi	r18, 0x31	; 49
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	f9 01       	movw	r30, r18
    10b6:	20 81       	ld	r18, Z
    10b8:	2b 7f       	andi	r18, 0xFB	; 251
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
	SETBIT(PIR_INPUT_PORT, PIR_INPUT_PIN);							// Setup the controllers internal Pull up resistor
    10be:	82 e3       	ldi	r24, 0x32	; 50
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	22 e3       	ldi	r18, 0x32	; 50
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	20 81       	ld	r18, Z
    10ca:	24 60       	ori	r18, 0x04	; 4
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 83       	st	Z, r18

	MCUCR |= (1 << ISC01) | (1 << ISC00);
    10d0:	85 e5       	ldi	r24, 0x55	; 85
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	25 e5       	ldi	r18, 0x55	; 85
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	f9 01       	movw	r30, r18
    10da:	20 81       	ld	r18, Z
    10dc:	23 60       	ori	r18, 0x03	; 3
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
	GICR |= (1 << INT0);
    10e2:	8b e5       	ldi	r24, 0x5B	; 91
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	2b e5       	ldi	r18, 0x5B	; 91
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	f9 01       	movw	r30, r18
    10ec:	20 81       	ld	r18, Z
    10ee:	20 64       	ori	r18, 0x40	; 64
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <Init_Ultrasonic_Sensor>:

void Init_Ultrasonic_Sensor()
{
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	SETBIT(USS_DIR_REG, USS_TRIGGER);								// Set the pin direction as output
    1102:	81 e3       	ldi	r24, 0x31	; 49
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	21 e3       	ldi	r18, 0x31	; 49
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	20 61       	ori	r18, 0x10	; 16
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
	CLEARBIT(USS_PORT, USS_TRIGGER);								// Initial state of trigger is LOW
    1114:	82 e3       	ldi	r24, 0x32	; 50
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	22 e3       	ldi	r18, 0x32	; 50
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	f9 01       	movw	r30, r18
    111e:	20 81       	ld	r18, Z
    1120:	2f 7e       	andi	r18, 0xEF	; 239
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
	SETBIT(USS_PORT, USS_ECHO);										// Activate pull-up on ECHO pin.
    1126:	82 e3       	ldi	r24, 0x32	; 50
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	22 e3       	ldi	r18, 0x32	; 50
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	f9 01       	movw	r30, r18
    1130:	20 81       	ld	r18, Z
    1132:	28 60       	ori	r18, 0x08	; 8
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
	
	MCUCR |= (1 << ISC11) | (1 << ISC10);							// Set the interrupt to trigger at the rising edge.
    1138:	85 e5       	ldi	r24, 0x55	; 85
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	25 e5       	ldi	r18, 0x55	; 85
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	20 81       	ld	r18, Z
    1144:	2c 60       	ori	r18, 0x0C	; 12
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
	GICR |= (1 << INT1);
    114a:	8b e5       	ldi	r24, 0x5B	; 91
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	2b e5       	ldi	r18, 0x5B	; 91
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	20 68       	ori	r18, 0x80	; 128
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <Get_Uss_Count>:
{
	CLEARBIT(PORTC, led_color);
}

uint16_t Get_Uss_Count()
{
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	2e 97       	sbiw	r28, 0x0e	; 14
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
	Trigger_Ultrasonic_Sensor();
    1176:	90 de       	rcall	.-736    	; 0xe98 <Trigger_Ultrasonic_Sensor>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	aa e7       	ldi	r26, 0x7A	; 122
    117e:	b4 e4       	ldi	r27, 0x44	; 68
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	ab 83       	std	Y+3, r26	; 0x03
    1186:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	4a e7       	ldi	r20, 0x7A	; 122
    118e:	53 e4       	ldi	r21, 0x43	; 67
    1190:	69 81       	ldd	r22, Y+1	; 0x01
    1192:	7a 81       	ldd	r23, Y+2	; 0x02
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	d4 d1       	rcall	.+936    	; 0x1542 <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8d 83       	std	Y+5, r24	; 0x05
    11a0:	9e 83       	std	Y+6, r25	; 0x06
    11a2:	af 83       	std	Y+7, r26	; 0x07
    11a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5f e3       	ldi	r21, 0x3F	; 63
    11ae:	6d 81       	ldd	r22, Y+5	; 0x05
    11b0:	7e 81       	ldd	r23, Y+6	; 0x06
    11b2:	8f 81       	ldd	r24, Y+7	; 0x07
    11b4:	98 85       	ldd	r25, Y+8	; 0x08
    11b6:	b4 d0       	rcall	.+360    	; 0x1320 <__cmpsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <Get_Uss_Count+0x64>
		__ticks = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9a 87       	std	Y+10, r25	; 0x0a
    11c2:	89 87       	std	Y+9, r24	; 0x09
    11c4:	3b c0       	rjmp	.+118    	; 0x123c <Get_Uss_Count+0xda>
	else if (__tmp > 65535)
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	3f ef       	ldi	r19, 0xFF	; 255
    11ca:	4f e7       	ldi	r20, 0x7F	; 127
    11cc:	57 e4       	ldi	r21, 0x47	; 71
    11ce:	6d 81       	ldd	r22, Y+5	; 0x05
    11d0:	7e 81       	ldd	r23, Y+6	; 0x06
    11d2:	8f 81       	ldd	r24, Y+7	; 0x07
    11d4:	98 85       	ldd	r25, Y+8	; 0x08
    11d6:	b1 d1       	rcall	.+866    	; 0x153a <__gesf2>
    11d8:	18 16       	cp	r1, r24
    11da:	3c f5       	brge	.+78     	; 0x122a <Get_Uss_Count+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	69 81       	ldd	r22, Y+1	; 0x01
    11e6:	7a 81       	ldd	r23, Y+2	; 0x02
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	aa d1       	rcall	.+852    	; 0x1542 <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	00 d1       	rcall	.+512    	; 0x13f8 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9a 87       	std	Y+10, r25	; 0x0a
    11fe:	89 87       	std	Y+9, r24	; 0x09
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <Get_Uss_Count+0xbe>
    1202:	89 e1       	ldi	r24, 0x19	; 25
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9c 87       	std	Y+12, r25	; 0x0c
    1208:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    120a:	8b 85       	ldd	r24, Y+11	; 0x0b
    120c:	9c 85       	ldd	r25, Y+12	; 0x0c
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <Get_Uss_Count+0xac>
    1212:	9c 87       	std	Y+12, r25	; 0x0c
    1214:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	9a 87       	std	Y+10, r25	; 0x0a
    121e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	69 f7       	brne	.-38     	; 0x1202 <Get_Uss_Count+0xa0>
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <Get_Uss_Count+0xee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122a:	6d 81       	ldd	r22, Y+5	; 0x05
    122c:	7e 81       	ldd	r23, Y+6	; 0x06
    122e:	8f 81       	ldd	r24, Y+7	; 0x07
    1230:	98 85       	ldd	r25, Y+8	; 0x08
    1232:	e2 d0       	rcall	.+452    	; 0x13f8 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9a 87       	std	Y+10, r25	; 0x0a
    123a:	89 87       	std	Y+9, r24	; 0x09
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	9e 87       	std	Y+14, r25	; 0x0e
    1242:	8d 87       	std	Y+13, r24	; 0x0d
    1244:	8d 85       	ldd	r24, Y+13	; 0x0d
    1246:	9e 85       	ldd	r25, Y+14	; 0x0e
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <Get_Uss_Count+0xe6>
    124c:	9e 87       	std	Y+14, r25	; 0x0e
    124e:	8d 87       	std	Y+13, r24	; 0x0d
	SendDebug("USS count:");
	USART_Transmit_dec(UssPulseCount);
	USART_SendByte(0x0D);
	USART_SendByte(0x0A);
	#endif
	return UssPulseCount;
    1250:	80 91 91 00 	lds	r24, 0x0091
    1254:	90 91 92 00 	lds	r25, 0x0092
}
    1258:	2e 96       	adiw	r28, 0x0e	; 14
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <Init_Timer1>:

void Init_Timer1()
{
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1272:	8c e4       	ldi	r24, 0x4C	; 76
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	11 82       	std	Z+1, r1	; 0x01
    127a:	10 82       	st	Z, r1
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <Start_Timer1>:

void Start_Timer1()
{
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS10);		// No pre-scalar
    128a:	8e e4       	ldi	r24, 0x4E	; 78
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	2e e4       	ldi	r18, 0x4E	; 78
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	f9 01       	movw	r30, r18
    1294:	20 81       	ld	r18, Z
    1296:	21 60       	ori	r18, 0x01	; 1
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18
}
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <Stop_Timer1>:

void Stop_Timer1()
{
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS10);
    12aa:	8e e4       	ldi	r24, 0x4E	; 78
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	2e e4       	ldi	r18, 0x4E	; 78
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	f9 01       	movw	r30, r18
    12b4:	20 81       	ld	r18, Z
    12b6:	2e 7f       	andi	r18, 0xFE	; 254
    12b8:	fc 01       	movw	r30, r24
    12ba:	20 83       	st	Z, r18
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <Get_Pir_count>:

uint16_t Get_Pir_count()
{
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	return pir_trigger_count;
    12ca:	80 91 93 00 	lds	r24, 0x0093
    12ce:	90 91 94 00 	lds	r25, 0x0094
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <Reset_Pir_count>:

void Reset_Pir_count()
{
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count = 0;
    12e0:	10 92 94 00 	sts	0x0094, r1
    12e4:	10 92 93 00 	sts	0x0093, r1
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <Init_Gpio>:
	
	return 0;
}

void Init_Gpio()
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	RELAY_PORT_DIR_REG |= (1 << RELAY_PIN);		// Set the relay pin as a output pin
    12f6:	87 e3       	ldi	r24, 0x37	; 55
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	27 e3       	ldi	r18, 0x37	; 55
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	f9 01       	movw	r30, r18
    1300:	20 81       	ld	r18, Z
    1302:	21 60       	ori	r18, 0x01	; 1
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
	RELAY_PORT &= ~(1 << RELAY_PIN);			// Initialise relay in OFF state.
    1308:	88 e3       	ldi	r24, 0x38	; 56
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	28 e3       	ldi	r18, 0x38	; 56
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	20 81       	ld	r18, Z
    1314:	2e 7f       	andi	r18, 0xFE	; 254
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <__cmpsf2>:
    1320:	97 d0       	rcall	.+302    	; 0x1450 <__fp_cmp>
    1322:	08 f4       	brcc	.+2      	; 0x1326 <__cmpsf2+0x6>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	08 95       	ret

00001328 <__divsf3>:
    1328:	0c d0       	rcall	.+24     	; 0x1342 <__divsf3x>
    132a:	cd c0       	rjmp	.+410    	; 0x14c6 <__fp_round>
    132c:	c5 d0       	rcall	.+394    	; 0x14b8 <__fp_pscB>
    132e:	40 f0       	brcs	.+16     	; 0x1340 <__divsf3+0x18>
    1330:	bc d0       	rcall	.+376    	; 0x14aa <__fp_pscA>
    1332:	30 f0       	brcs	.+12     	; 0x1340 <__divsf3+0x18>
    1334:	21 f4       	brne	.+8      	; 0x133e <__divsf3+0x16>
    1336:	5f 3f       	cpi	r21, 0xFF	; 255
    1338:	19 f0       	breq	.+6      	; 0x1340 <__divsf3+0x18>
    133a:	ae c0       	rjmp	.+348    	; 0x1498 <__fp_inf>
    133c:	51 11       	cpse	r21, r1
    133e:	f7 c0       	rjmp	.+494    	; 0x152e <__fp_szero>
    1340:	b1 c0       	rjmp	.+354    	; 0x14a4 <__fp_nan>

00001342 <__divsf3x>:
    1342:	d2 d0       	rcall	.+420    	; 0x14e8 <__fp_split3>
    1344:	98 f3       	brcs	.-26     	; 0x132c <__divsf3+0x4>

00001346 <__divsf3_pse>:
    1346:	99 23       	and	r25, r25
    1348:	c9 f3       	breq	.-14     	; 0x133c <__divsf3+0x14>
    134a:	55 23       	and	r21, r21
    134c:	b1 f3       	breq	.-20     	; 0x133a <__divsf3+0x12>
    134e:	95 1b       	sub	r25, r21
    1350:	55 0b       	sbc	r21, r21
    1352:	bb 27       	eor	r27, r27
    1354:	aa 27       	eor	r26, r26
    1356:	62 17       	cp	r22, r18
    1358:	73 07       	cpc	r23, r19
    135a:	84 07       	cpc	r24, r20
    135c:	38 f0       	brcs	.+14     	; 0x136c <__divsf3_pse+0x26>
    135e:	9f 5f       	subi	r25, 0xFF	; 255
    1360:	5f 4f       	sbci	r21, 0xFF	; 255
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	44 1f       	adc	r20, r20
    1368:	aa 1f       	adc	r26, r26
    136a:	a9 f3       	breq	.-22     	; 0x1356 <__divsf3_pse+0x10>
    136c:	33 d0       	rcall	.+102    	; 0x13d4 <__divsf3_pse+0x8e>
    136e:	0e 2e       	mov	r0, r30
    1370:	3a f0       	brmi	.+14     	; 0x1380 <__divsf3_pse+0x3a>
    1372:	e0 e8       	ldi	r30, 0x80	; 128
    1374:	30 d0       	rcall	.+96     	; 0x13d6 <__divsf3_pse+0x90>
    1376:	91 50       	subi	r25, 0x01	; 1
    1378:	50 40       	sbci	r21, 0x00	; 0
    137a:	e6 95       	lsr	r30
    137c:	00 1c       	adc	r0, r0
    137e:	ca f7       	brpl	.-14     	; 0x1372 <__divsf3_pse+0x2c>
    1380:	29 d0       	rcall	.+82     	; 0x13d4 <__divsf3_pse+0x8e>
    1382:	fe 2f       	mov	r31, r30
    1384:	27 d0       	rcall	.+78     	; 0x13d4 <__divsf3_pse+0x8e>
    1386:	66 0f       	add	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	88 1f       	adc	r24, r24
    138c:	bb 1f       	adc	r27, r27
    138e:	26 17       	cp	r18, r22
    1390:	37 07       	cpc	r19, r23
    1392:	48 07       	cpc	r20, r24
    1394:	ab 07       	cpc	r26, r27
    1396:	b0 e8       	ldi	r27, 0x80	; 128
    1398:	09 f0       	breq	.+2      	; 0x139c <__divsf3_pse+0x56>
    139a:	bb 0b       	sbc	r27, r27
    139c:	80 2d       	mov	r24, r0
    139e:	bf 01       	movw	r22, r30
    13a0:	ff 27       	eor	r31, r31
    13a2:	93 58       	subi	r25, 0x83	; 131
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	2a f0       	brmi	.+10     	; 0x13b2 <__divsf3_pse+0x6c>
    13a8:	9e 3f       	cpi	r25, 0xFE	; 254
    13aa:	51 05       	cpc	r21, r1
    13ac:	68 f0       	brcs	.+26     	; 0x13c8 <__divsf3_pse+0x82>
    13ae:	74 c0       	rjmp	.+232    	; 0x1498 <__fp_inf>
    13b0:	be c0       	rjmp	.+380    	; 0x152e <__fp_szero>
    13b2:	5f 3f       	cpi	r21, 0xFF	; 255
    13b4:	ec f3       	brlt	.-6      	; 0x13b0 <__divsf3_pse+0x6a>
    13b6:	98 3e       	cpi	r25, 0xE8	; 232
    13b8:	dc f3       	brlt	.-10     	; 0x13b0 <__divsf3_pse+0x6a>
    13ba:	86 95       	lsr	r24
    13bc:	77 95       	ror	r23
    13be:	67 95       	ror	r22
    13c0:	b7 95       	ror	r27
    13c2:	f7 95       	ror	r31
    13c4:	9f 5f       	subi	r25, 0xFF	; 255
    13c6:	c9 f7       	brne	.-14     	; 0x13ba <__divsf3_pse+0x74>
    13c8:	88 0f       	add	r24, r24
    13ca:	91 1d       	adc	r25, r1
    13cc:	96 95       	lsr	r25
    13ce:	87 95       	ror	r24
    13d0:	97 f9       	bld	r25, 7
    13d2:	08 95       	ret
    13d4:	e1 e0       	ldi	r30, 0x01	; 1
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	88 1f       	adc	r24, r24
    13dc:	bb 1f       	adc	r27, r27
    13de:	62 17       	cp	r22, r18
    13e0:	73 07       	cpc	r23, r19
    13e2:	84 07       	cpc	r24, r20
    13e4:	ba 07       	cpc	r27, r26
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <__divsf3_pse+0xaa>
    13e8:	62 1b       	sub	r22, r18
    13ea:	73 0b       	sbc	r23, r19
    13ec:	84 0b       	sbc	r24, r20
    13ee:	ba 0b       	sbc	r27, r26
    13f0:	ee 1f       	adc	r30, r30
    13f2:	88 f7       	brcc	.-30     	; 0x13d6 <__divsf3_pse+0x90>
    13f4:	e0 95       	com	r30
    13f6:	08 95       	ret

000013f8 <__fixunssfsi>:
    13f8:	7f d0       	rcall	.+254    	; 0x14f8 <__fp_splitA>
    13fa:	88 f0       	brcs	.+34     	; 0x141e <__fixunssfsi+0x26>
    13fc:	9f 57       	subi	r25, 0x7F	; 127
    13fe:	90 f0       	brcs	.+36     	; 0x1424 <__fixunssfsi+0x2c>
    1400:	b9 2f       	mov	r27, r25
    1402:	99 27       	eor	r25, r25
    1404:	b7 51       	subi	r27, 0x17	; 23
    1406:	a0 f0       	brcs	.+40     	; 0x1430 <__fixunssfsi+0x38>
    1408:	d1 f0       	breq	.+52     	; 0x143e <__fixunssfsi+0x46>
    140a:	66 0f       	add	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	1a f0       	brmi	.+6      	; 0x141a <__fixunssfsi+0x22>
    1414:	ba 95       	dec	r27
    1416:	c9 f7       	brne	.-14     	; 0x140a <__fixunssfsi+0x12>
    1418:	12 c0       	rjmp	.+36     	; 0x143e <__fixunssfsi+0x46>
    141a:	b1 30       	cpi	r27, 0x01	; 1
    141c:	81 f0       	breq	.+32     	; 0x143e <__fixunssfsi+0x46>
    141e:	86 d0       	rcall	.+268    	; 0x152c <__fp_zero>
    1420:	b1 e0       	ldi	r27, 0x01	; 1
    1422:	08 95       	ret
    1424:	83 c0       	rjmp	.+262    	; 0x152c <__fp_zero>
    1426:	67 2f       	mov	r22, r23
    1428:	78 2f       	mov	r23, r24
    142a:	88 27       	eor	r24, r24
    142c:	b8 5f       	subi	r27, 0xF8	; 248
    142e:	39 f0       	breq	.+14     	; 0x143e <__fixunssfsi+0x46>
    1430:	b9 3f       	cpi	r27, 0xF9	; 249
    1432:	cc f3       	brlt	.-14     	; 0x1426 <__fixunssfsi+0x2e>
    1434:	86 95       	lsr	r24
    1436:	77 95       	ror	r23
    1438:	67 95       	ror	r22
    143a:	b3 95       	inc	r27
    143c:	d9 f7       	brne	.-10     	; 0x1434 <__fixunssfsi+0x3c>
    143e:	3e f4       	brtc	.+14     	; 0x144e <__fixunssfsi+0x56>
    1440:	90 95       	com	r25
    1442:	80 95       	com	r24
    1444:	70 95       	com	r23
    1446:	61 95       	neg	r22
    1448:	7f 4f       	sbci	r23, 0xFF	; 255
    144a:	8f 4f       	sbci	r24, 0xFF	; 255
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	08 95       	ret

00001450 <__fp_cmp>:
    1450:	99 0f       	add	r25, r25
    1452:	00 08       	sbc	r0, r0
    1454:	55 0f       	add	r21, r21
    1456:	aa 0b       	sbc	r26, r26
    1458:	e0 e8       	ldi	r30, 0x80	; 128
    145a:	fe ef       	ldi	r31, 0xFE	; 254
    145c:	16 16       	cp	r1, r22
    145e:	17 06       	cpc	r1, r23
    1460:	e8 07       	cpc	r30, r24
    1462:	f9 07       	cpc	r31, r25
    1464:	c0 f0       	brcs	.+48     	; 0x1496 <__fp_cmp+0x46>
    1466:	12 16       	cp	r1, r18
    1468:	13 06       	cpc	r1, r19
    146a:	e4 07       	cpc	r30, r20
    146c:	f5 07       	cpc	r31, r21
    146e:	98 f0       	brcs	.+38     	; 0x1496 <__fp_cmp+0x46>
    1470:	62 1b       	sub	r22, r18
    1472:	73 0b       	sbc	r23, r19
    1474:	84 0b       	sbc	r24, r20
    1476:	95 0b       	sbc	r25, r21
    1478:	39 f4       	brne	.+14     	; 0x1488 <__fp_cmp+0x38>
    147a:	0a 26       	eor	r0, r26
    147c:	61 f0       	breq	.+24     	; 0x1496 <__fp_cmp+0x46>
    147e:	23 2b       	or	r18, r19
    1480:	24 2b       	or	r18, r20
    1482:	25 2b       	or	r18, r21
    1484:	21 f4       	brne	.+8      	; 0x148e <__fp_cmp+0x3e>
    1486:	08 95       	ret
    1488:	0a 26       	eor	r0, r26
    148a:	09 f4       	brne	.+2      	; 0x148e <__fp_cmp+0x3e>
    148c:	a1 40       	sbci	r26, 0x01	; 1
    148e:	a6 95       	lsr	r26
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	81 1d       	adc	r24, r1
    1494:	81 1d       	adc	r24, r1
    1496:	08 95       	ret

00001498 <__fp_inf>:
    1498:	97 f9       	bld	r25, 7
    149a:	9f 67       	ori	r25, 0x7F	; 127
    149c:	80 e8       	ldi	r24, 0x80	; 128
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	08 95       	ret

000014a4 <__fp_nan>:
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	80 ec       	ldi	r24, 0xC0	; 192
    14a8:	08 95       	ret

000014aa <__fp_pscA>:
    14aa:	00 24       	eor	r0, r0
    14ac:	0a 94       	dec	r0
    14ae:	16 16       	cp	r1, r22
    14b0:	17 06       	cpc	r1, r23
    14b2:	18 06       	cpc	r1, r24
    14b4:	09 06       	cpc	r0, r25
    14b6:	08 95       	ret

000014b8 <__fp_pscB>:
    14b8:	00 24       	eor	r0, r0
    14ba:	0a 94       	dec	r0
    14bc:	12 16       	cp	r1, r18
    14be:	13 06       	cpc	r1, r19
    14c0:	14 06       	cpc	r1, r20
    14c2:	05 06       	cpc	r0, r21
    14c4:	08 95       	ret

000014c6 <__fp_round>:
    14c6:	09 2e       	mov	r0, r25
    14c8:	03 94       	inc	r0
    14ca:	00 0c       	add	r0, r0
    14cc:	11 f4       	brne	.+4      	; 0x14d2 <__fp_round+0xc>
    14ce:	88 23       	and	r24, r24
    14d0:	52 f0       	brmi	.+20     	; 0x14e6 <__fp_round+0x20>
    14d2:	bb 0f       	add	r27, r27
    14d4:	40 f4       	brcc	.+16     	; 0x14e6 <__fp_round+0x20>
    14d6:	bf 2b       	or	r27, r31
    14d8:	11 f4       	brne	.+4      	; 0x14de <__fp_round+0x18>
    14da:	60 ff       	sbrs	r22, 0
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <__fp_round+0x20>
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 4f       	sbci	r24, 0xFF	; 255
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	08 95       	ret

000014e8 <__fp_split3>:
    14e8:	57 fd       	sbrc	r21, 7
    14ea:	90 58       	subi	r25, 0x80	; 128
    14ec:	44 0f       	add	r20, r20
    14ee:	55 1f       	adc	r21, r21
    14f0:	59 f0       	breq	.+22     	; 0x1508 <__fp_splitA+0x10>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	71 f0       	breq	.+28     	; 0x1512 <__fp_splitA+0x1a>
    14f6:	47 95       	ror	r20

000014f8 <__fp_splitA>:
    14f8:	88 0f       	add	r24, r24
    14fa:	97 fb       	bst	r25, 7
    14fc:	99 1f       	adc	r25, r25
    14fe:	61 f0       	breq	.+24     	; 0x1518 <__fp_splitA+0x20>
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	79 f0       	breq	.+30     	; 0x1522 <__fp_splitA+0x2a>
    1504:	87 95       	ror	r24
    1506:	08 95       	ret
    1508:	12 16       	cp	r1, r18
    150a:	13 06       	cpc	r1, r19
    150c:	14 06       	cpc	r1, r20
    150e:	55 1f       	adc	r21, r21
    1510:	f2 cf       	rjmp	.-28     	; 0x14f6 <__fp_split3+0xe>
    1512:	46 95       	lsr	r20
    1514:	f1 df       	rcall	.-30     	; 0x14f8 <__fp_splitA>
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <__fp_splitA+0x30>
    1518:	16 16       	cp	r1, r22
    151a:	17 06       	cpc	r1, r23
    151c:	18 06       	cpc	r1, r24
    151e:	99 1f       	adc	r25, r25
    1520:	f1 cf       	rjmp	.-30     	; 0x1504 <__fp_splitA+0xc>
    1522:	86 95       	lsr	r24
    1524:	71 05       	cpc	r23, r1
    1526:	61 05       	cpc	r22, r1
    1528:	08 94       	sec
    152a:	08 95       	ret

0000152c <__fp_zero>:
    152c:	e8 94       	clt

0000152e <__fp_szero>:
    152e:	bb 27       	eor	r27, r27
    1530:	66 27       	eor	r22, r22
    1532:	77 27       	eor	r23, r23
    1534:	cb 01       	movw	r24, r22
    1536:	97 f9       	bld	r25, 7
    1538:	08 95       	ret

0000153a <__gesf2>:
    153a:	8a df       	rcall	.-236    	; 0x1450 <__fp_cmp>
    153c:	08 f4       	brcc	.+2      	; 0x1540 <__gesf2+0x6>
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	08 95       	ret

00001542 <__mulsf3>:
    1542:	0b d0       	rcall	.+22     	; 0x155a <__mulsf3x>
    1544:	c0 cf       	rjmp	.-128    	; 0x14c6 <__fp_round>
    1546:	b1 df       	rcall	.-158    	; 0x14aa <__fp_pscA>
    1548:	28 f0       	brcs	.+10     	; 0x1554 <__mulsf3+0x12>
    154a:	b6 df       	rcall	.-148    	; 0x14b8 <__fp_pscB>
    154c:	18 f0       	brcs	.+6      	; 0x1554 <__mulsf3+0x12>
    154e:	95 23       	and	r25, r21
    1550:	09 f0       	breq	.+2      	; 0x1554 <__mulsf3+0x12>
    1552:	a2 cf       	rjmp	.-188    	; 0x1498 <__fp_inf>
    1554:	a7 cf       	rjmp	.-178    	; 0x14a4 <__fp_nan>
    1556:	11 24       	eor	r1, r1
    1558:	ea cf       	rjmp	.-44     	; 0x152e <__fp_szero>

0000155a <__mulsf3x>:
    155a:	c6 df       	rcall	.-116    	; 0x14e8 <__fp_split3>
    155c:	a0 f3       	brcs	.-24     	; 0x1546 <__mulsf3+0x4>

0000155e <__mulsf3_pse>:
    155e:	95 9f       	mul	r25, r21
    1560:	d1 f3       	breq	.-12     	; 0x1556 <__mulsf3+0x14>
    1562:	95 0f       	add	r25, r21
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	55 1f       	adc	r21, r21
    1568:	62 9f       	mul	r22, r18
    156a:	f0 01       	movw	r30, r0
    156c:	72 9f       	mul	r23, r18
    156e:	bb 27       	eor	r27, r27
    1570:	f0 0d       	add	r31, r0
    1572:	b1 1d       	adc	r27, r1
    1574:	63 9f       	mul	r22, r19
    1576:	aa 27       	eor	r26, r26
    1578:	f0 0d       	add	r31, r0
    157a:	b1 1d       	adc	r27, r1
    157c:	aa 1f       	adc	r26, r26
    157e:	64 9f       	mul	r22, r20
    1580:	66 27       	eor	r22, r22
    1582:	b0 0d       	add	r27, r0
    1584:	a1 1d       	adc	r26, r1
    1586:	66 1f       	adc	r22, r22
    1588:	82 9f       	mul	r24, r18
    158a:	22 27       	eor	r18, r18
    158c:	b0 0d       	add	r27, r0
    158e:	a1 1d       	adc	r26, r1
    1590:	62 1f       	adc	r22, r18
    1592:	73 9f       	mul	r23, r19
    1594:	b0 0d       	add	r27, r0
    1596:	a1 1d       	adc	r26, r1
    1598:	62 1f       	adc	r22, r18
    159a:	83 9f       	mul	r24, r19
    159c:	a0 0d       	add	r26, r0
    159e:	61 1d       	adc	r22, r1
    15a0:	22 1f       	adc	r18, r18
    15a2:	74 9f       	mul	r23, r20
    15a4:	33 27       	eor	r19, r19
    15a6:	a0 0d       	add	r26, r0
    15a8:	61 1d       	adc	r22, r1
    15aa:	23 1f       	adc	r18, r19
    15ac:	84 9f       	mul	r24, r20
    15ae:	60 0d       	add	r22, r0
    15b0:	21 1d       	adc	r18, r1
    15b2:	82 2f       	mov	r24, r18
    15b4:	76 2f       	mov	r23, r22
    15b6:	6a 2f       	mov	r22, r26
    15b8:	11 24       	eor	r1, r1
    15ba:	9f 57       	subi	r25, 0x7F	; 127
    15bc:	50 40       	sbci	r21, 0x00	; 0
    15be:	8a f0       	brmi	.+34     	; 0x15e2 <__mulsf3_pse+0x84>
    15c0:	e1 f0       	breq	.+56     	; 0x15fa <__mulsf3_pse+0x9c>
    15c2:	88 23       	and	r24, r24
    15c4:	4a f0       	brmi	.+18     	; 0x15d8 <__mulsf3_pse+0x7a>
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	bb 1f       	adc	r27, r27
    15cc:	66 1f       	adc	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	50 40       	sbci	r21, 0x00	; 0
    15d6:	a9 f7       	brne	.-22     	; 0x15c2 <__mulsf3_pse+0x64>
    15d8:	9e 3f       	cpi	r25, 0xFE	; 254
    15da:	51 05       	cpc	r21, r1
    15dc:	70 f0       	brcs	.+28     	; 0x15fa <__mulsf3_pse+0x9c>
    15de:	5c cf       	rjmp	.-328    	; 0x1498 <__fp_inf>
    15e0:	a6 cf       	rjmp	.-180    	; 0x152e <__fp_szero>
    15e2:	5f 3f       	cpi	r21, 0xFF	; 255
    15e4:	ec f3       	brlt	.-6      	; 0x15e0 <__mulsf3_pse+0x82>
    15e6:	98 3e       	cpi	r25, 0xE8	; 232
    15e8:	dc f3       	brlt	.-10     	; 0x15e0 <__mulsf3_pse+0x82>
    15ea:	86 95       	lsr	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	b7 95       	ror	r27
    15f2:	f7 95       	ror	r31
    15f4:	e7 95       	ror	r30
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	c1 f7       	brne	.-16     	; 0x15ea <__mulsf3_pse+0x8c>
    15fa:	fe 2b       	or	r31, r30
    15fc:	88 0f       	add	r24, r24
    15fe:	91 1d       	adc	r25, r1
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	97 f9       	bld	r25, 7
    1606:	08 95       	ret

00001608 <_exit>:
    1608:	f8 94       	cli

0000160a <__stop_program>:
    160a:	ff cf       	rjmp	.-2      	; 0x160a <__stop_program>
