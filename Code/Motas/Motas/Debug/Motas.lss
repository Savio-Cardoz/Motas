
Motas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001808  0000189c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800062  00800062  0000189e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f0  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013bb  00000000  00000000  00001abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b1  00000000  00000000  00002e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bae  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a4  00000000  00000000  000041d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e9  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cd2  00000000  00000000  00004f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00005c37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	f0 c7       	rjmp	.+4064   	; 0xfe4 <__vector_1>
       4:	d0 c7       	rjmp	.+4000   	; 0xfa6 <__vector_2>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	60 c7       	rjmp	.+3776   	; 0xed2 <__vector_8>
      12:	7e c7       	rjmp	.+3836   	; 0xf10 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	33 c0       	rjmp	.+102    	; 0x7e <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e8 e0       	ldi	r30, 0x08	; 8
      3a:	f8 e1       	ldi	r31, 0x18	; 24
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a2 36       	cpi	r26, 0x62	; 98
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	a2 e6       	ldi	r26, 0x62	; 98
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a5 38       	cpi	r26, 0x85	; 133
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	3c d3       	rcall	.+1656   	; 0x6d2 <main>
      5a:	d4 cb       	rjmp	.-2136   	; 0xfffff804 <__eeprom_end+0xff7ef804>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Atmega_init>:
#include "Atmega_Config.h"
#include "Peripheral_Drivers.h"
#include "debug_func.h"

void Atmega_init()
{
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
      66:	3f d0       	rcall	.+126    	; 0xe6 <USART_Init>
	
#if DEBUG_ON
	SendDebug("Serial OK!");
#endif // DEBUG_ON
	
	Init_Ultrasonic_Sensor();
      68:	6d d9       	rcall	.-3366   	; 0xfffff344 <__eeprom_end+0xff7ef344>
	Init_Pir();
      6a:	41 d9       	rcall	.-3454   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
	Init_Timer1();
      6c:	cc d9       	rcall	.-3176   	; 0xfffff406 <__eeprom_end+0xff7ef406>
	Init_Timer0();
      6e:	b2 d9       	rcall	.-3228   	; 0xfffff3d4 <__eeprom_end+0xff7ef3d4>
	Init_Gpio();
      70:	15 da       	rcall	.-3030   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
	DebugLedInit();
      72:	de d0       	rcall	.+444    	; 0x230 <DebugLedInit>
	Trigger_Ultrasonic_Sensor();
      74:	36 d8       	rcall	.-3988   	; 0xfffff0e2 <__eeprom_end+0xff7ef0e2>
	sei();
      76:	78 94       	sei
      78:	df 91       	pop	r29
      7a:	cf 91       	pop	r28
      7c:	08 95       	ret

0000007e <__vector_11>:
	temp2 = int_data / 4096;
	dec_adc_value = dec_adc_value + (temp2 * 4096);
	temp2 = temp1;
	temp1 = temp1 % 256;
	temp2 = temp2 / 256;
	dec_adc_value = dec_adc_value + (temp2 * 256);
      7e:	1f 92       	push	r1
	temp2 = temp1;
      80:	0f 92       	push	r0
      82:	00 90 5f 00 	lds	r0, 0x005F
      86:	0f 92       	push	r0
	temp1 = temp1 % 16;
      88:	11 24       	eor	r1, r1
      8a:	2f 93       	push	r18
      8c:	3f 93       	push	r19
      8e:	4f 93       	push	r20
      90:	5f 93       	push	r21
      92:	6f 93       	push	r22
	temp2 = temp2 / 16;
      94:	7f 93       	push	r23
      96:	8f 93       	push	r24
      98:	9f 93       	push	r25
      9a:	af 93       	push	r26
      9c:	bf 93       	push	r27
      9e:	ef 93       	push	r30
      a0:	ff 93       	push	r31
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	1f 92       	push	r1
	dec_adc_value = (dec_adc_value + (temp2 * 16) + temp1);
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	8c e2       	ldi	r24, 0x2C	; 44
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	fc 01       	movw	r30, r24
      b2:	80 81       	ld	r24, Z
      b4:	50 d0       	rcall	.+160    	; 0x156 <Ring_Add>
      b6:	89 83       	std	Y+1, r24	; 0x01
      b8:	8f ef       	ldi	r24, 0xFF	; 255
      ba:	89 83       	std	Y+1, r24	; 0x01
      bc:	0f 90       	pop	r0
      be:	df 91       	pop	r29
      c0:	cf 91       	pop	r28
      c2:	ff 91       	pop	r31
      c4:	ef 91       	pop	r30
      c6:	bf 91       	pop	r27
      c8:	af 91       	pop	r26
      ca:	9f 91       	pop	r25
      cc:	8f 91       	pop	r24
	temp1 = dec_adc_value;
      ce:	7f 91       	pop	r23
      d0:	6f 91       	pop	r22
      d2:	5f 91       	pop	r21
      d4:	4f 91       	pop	r20
	USART_SendByte((dec_adc_value / 10000) | 0x30);
      d6:	3f 91       	pop	r19
      d8:	2f 91       	pop	r18
      da:	0f 90       	pop	r0
      dc:	00 92 5f 00 	sts	0x005F, r0
      e0:	0f 90       	pop	r0
      e2:	1f 90       	pop	r1
      e4:	18 95       	reti

000000e6 <USART_Init>:
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	89 e2       	ldi	r24, 0x29	; 41
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2c e0       	ldi	r18, 0x0C	; 12
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	80 e4       	ldi	r24, 0x40	; 64
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	fc 01       	movw	r30, r24
	dec_adc_value = temp1 % 10000;
      fe:	10 82       	st	Z, r1
     100:	8b e2       	ldi	r24, 0x2B	; 43
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2b e2       	ldi	r18, 0x2B	; 43
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	22 60       	ori	r18, 0x02	; 2
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	8a e2       	ldi	r24, 0x2A	; 42
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	28 e9       	ldi	r18, 0x98	; 152
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <USART_SendByte>:
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	1f 92       	push	r1
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	89 83       	std	Y+1, r24	; 0x01
     12e:	00 00       	nop
     130:	8b e2       	ldi	r24, 0x2B	; 43
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	fc 01       	movw	r30, r24
     136:	80 81       	ld	r24, Z
     138:	88 2f       	mov	r24, r24
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	80 72       	andi	r24, 0x20	; 32
     13e:	99 27       	eor	r25, r25
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	b1 f3       	breq	.-20     	; 0x130 <USART_SendByte+0xe>
	USART_SendByte((dec_adc_value / 1000) | 0x30);
     144:	8c e2       	ldi	r24, 0x2C	; 44
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	29 81       	ldd	r18, Y+1	; 0x01
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
     14e:	0f 90       	pop	r0
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <Ring_Add>:
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	00 d0       	rcall	.+0      	; 0x15c <Ring_Add+0x6>
     15c:	00 d0       	rcall	.+0      	; 0x15e <Ring_Add+0x8>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	8a 83       	std	Y+2, r24	; 0x02
     164:	80 91 6f 00 	lds	r24, 0x006F
     168:	88 2f       	mov	r24, r24
     16a:	90 e0       	ldi	r25, 0x00	; 0
	dec_adc_value = temp1 % 1000;
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	2c e0       	ldi	r18, 0x0C	; 12
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	b9 01       	movw	r22, r18
     174:	20 db       	rcall	.-2496   	; 0xfffff7b6 <__eeprom_end+0xff7ef7b6>
     176:	89 83       	std	Y+1, r24	; 0x01
     178:	80 91 70 00 	lds	r24, 0x0070
     17c:	99 81       	ldd	r25, Y+1	; 0x01
     17e:	98 17       	cp	r25, r24
     180:	79 f0       	breq	.+30     	; 0x1a0 <Ring_Add+0x4a>
     182:	80 91 6f 00 	lds	r24, 0x006F
     186:	88 2f       	mov	r24, r24
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	8f 58       	subi	r24, 0x8F	; 143
     18c:	9f 4f       	sbci	r25, 0xFF	; 255
     18e:	2a 81       	ldd	r18, Y+2	; 0x02
     190:	fc 01       	movw	r30, r24
     192:	20 83       	st	Z, r18
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	80 93 6f 00 	sts	0x006F, r24
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <Ring_Add+0x4e>
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	9f ef       	ldi	r25, 0xFF	; 255
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <Ring_Remove>:
	USART_SendByte((dec_adc_value /100) | 0x30);
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <Ring_Remove+0x6>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <Ring_Remove+0x8>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	90 91 6f 00 	lds	r25, 0x006F
     1c2:	80 91 70 00 	lds	r24, 0x0070
     1c6:	98 17       	cp	r25, r24
     1c8:	d1 f0       	breq	.+52     	; 0x1fe <Ring_Remove+0x4c>
     1ca:	80 91 70 00 	lds	r24, 0x0070
	dec_adc_value = temp1 % 100;
     1ce:	88 2f       	mov	r24, r24
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	8f 58       	subi	r24, 0x8F	; 143
     1d4:	9f 4f       	sbci	r25, 0xFF	; 255
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	88 2f       	mov	r24, r24
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9a 83       	std	Y+2, r25	; 0x02
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	80 91 70 00 	lds	r24, 0x0070
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	2c e0       	ldi	r18, 0x0C	; 12
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	b9 01       	movw	r22, r18
     1f2:	e1 da       	rcall	.-2622   	; 0xfffff7b6 <__eeprom_end+0xff7ef7b6>
     1f4:	80 93 70 00 	sts	0x0070, r24
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	9a 81       	ldd	r25, Y+2	; 0x02
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <Ring_Remove+0x50>
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	9f ef       	ldi	r25, 0xFF	; 255
	USART_SendByte((dec_adc_value / 10) | 0x30);
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <Is_Buffer_Empty>:
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	90 91 6f 00 	lds	r25, 0x006F
     21c:	80 91 70 00 	lds	r24, 0x0070
	dec_adc_value = temp1 % 10;
     220:	98 17       	cp	r25, r24
     222:	11 f4       	brne	.+4      	; 0x228 <Is_Buffer_Empty+0x18>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	01 c0       	rjmp	.+2      	; 0x22a <Is_Buffer_Empty+0x1a>
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <DebugLedInit>:

#include <avr/io.h>
#include "debug_func.h"

void DebugLedInit()
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
	RED_LED_DIR_REG |= (1 << RED_LED);
     238:	84 e3       	ldi	r24, 0x34	; 52
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	24 e3       	ldi	r18, 0x34	; 52
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	21 60       	ori	r18, 0x01	; 1
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	YELLOW_LED_DIR_REG |= (1 << YELLOW_LED);
     24a:	84 e3       	ldi	r24, 0x34	; 52
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	24 e3       	ldi	r18, 0x34	; 52
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	f9 01       	movw	r30, r18
     254:	20 81       	ld	r18, Z
     256:	22 60       	ori	r18, 0x02	; 2
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
	
	RED_LED_PORT &= ~(1 << RED_LED);
     25c:	85 e3       	ldi	r24, 0x35	; 53
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	25 e3       	ldi	r18, 0x35	; 53
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	2e 7f       	andi	r18, 0xFE	; 254
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
	YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     26e:	85 e3       	ldi	r24, 0x35	; 53
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	25 e3       	ldi	r18, 0x35	; 53
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	2d 7f       	andi	r18, 0xFD	; 253
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <DebugLedTransmit>:
		param led_colour:	LED_RED
							LED_YELLOW
							LED_ORANGE
*/
void DebugLedTransmit(debug_led_state_t led_state, debug_led_colour_t led_colour)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	00 d0       	rcall	.+0      	; 0x28c <DebugLedTransmit+0x6>
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	6a 83       	std	Y+2, r22	; 0x02
	if(led_state == LED_ON)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	a9 f5       	brne	.+106    	; 0x304 <DebugLedTransmit+0x7e>
	{
		switch(led_colour)
     29a:	8a 81       	ldd	r24, Y+2	; 0x02
     29c:	88 2f       	mov	r24, r24
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	91 05       	cpc	r25, r1
     2a4:	39 f0       	breq	.+14     	; 0x2b4 <DebugLedTransmit+0x2e>
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	91 05       	cpc	r25, r1
     2aa:	c1 f0       	breq	.+48     	; 0x2dc <DebugLedTransmit+0x56>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	91 05       	cpc	r25, r1
     2b0:	59 f0       	breq	.+22     	; 0x2c8 <DebugLedTransmit+0x42>
     2b2:	5f c0       	rjmp	.+190    	; 0x372 <DebugLedTransmit+0xec>
		{
			case LED_RED:
				RED_LED_PORT |= (1 << RED_LED);
     2b4:	85 e3       	ldi	r24, 0x35	; 53
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	25 e3       	ldi	r18, 0x35	; 53
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	f9 01       	movw	r30, r18
     2be:	20 81       	ld	r18, Z
     2c0:	21 60       	ori	r18, 0x01	; 1
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
				break;
     2c6:	1d c0       	rjmp	.+58     	; 0x302 <DebugLedTransmit+0x7c>
				
			case LED_YELLOW:
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     2c8:	85 e3       	ldi	r24, 0x35	; 53
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	25 e3       	ldi	r18, 0x35	; 53
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	f9 01       	movw	r30, r18
     2d2:	20 81       	ld	r18, Z
     2d4:	22 60       	ori	r18, 0x02	; 2
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
				break;
     2da:	13 c0       	rjmp	.+38     	; 0x302 <DebugLedTransmit+0x7c>
				
			case LED_ORANGE:
				RED_LED_PORT |= (1 << RED_LED);
     2dc:	85 e3       	ldi	r24, 0x35	; 53
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	25 e3       	ldi	r18, 0x35	; 53
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	21 60       	ori	r18, 0x01	; 1
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     2ee:	85 e3       	ldi	r24, 0x35	; 53
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	25 e3       	ldi	r18, 0x35	; 53
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	22 60       	ori	r18, 0x02	; 2
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
				break;
     300:	00 00       	nop
     302:	37 c0       	rjmp	.+110    	; 0x372 <DebugLedTransmit+0xec>
		} 
	}
	else if(led_state == LED_OFF)
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	88 23       	and	r24, r24
     308:	a1 f5       	brne	.+104    	; 0x372 <DebugLedTransmit+0xec>
	{
		switch(led_colour)
     30a:	8a 81       	ldd	r24, Y+2	; 0x02
     30c:	88 2f       	mov	r24, r24
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	91 05       	cpc	r25, r1
     314:	39 f0       	breq	.+14     	; 0x324 <DebugLedTransmit+0x9e>
     316:	83 30       	cpi	r24, 0x03	; 3
     318:	91 05       	cpc	r25, r1
     31a:	c1 f0       	breq	.+48     	; 0x34c <DebugLedTransmit+0xc6>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	91 05       	cpc	r25, r1
     320:	59 f0       	breq	.+22     	; 0x338 <DebugLedTransmit+0xb2>
     322:	27 c0       	rjmp	.+78     	; 0x372 <DebugLedTransmit+0xec>
		{
			case LED_RED:
			RED_LED_PORT &= ~(1 << RED_LED);
     324:	85 e3       	ldi	r24, 0x35	; 53
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	25 e3       	ldi	r18, 0x35	; 53
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	20 81       	ld	r18, Z
     330:	2e 7f       	andi	r18, 0xFE	; 254
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
			break;
     336:	1d c0       	rjmp	.+58     	; 0x372 <DebugLedTransmit+0xec>
		
			case LED_YELLOW:
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     338:	85 e3       	ldi	r24, 0x35	; 53
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	25 e3       	ldi	r18, 0x35	; 53
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	f9 01       	movw	r30, r18
     342:	20 81       	ld	r18, Z
     344:	2d 7f       	andi	r18, 0xFD	; 253
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
			break;
     34a:	13 c0       	rjmp	.+38     	; 0x372 <DebugLedTransmit+0xec>
		
			case LED_ORANGE:
			RED_LED_PORT &= ~(1 << RED_LED);
     34c:	85 e3       	ldi	r24, 0x35	; 53
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	25 e3       	ldi	r18, 0x35	; 53
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	2e 7f       	andi	r18, 0xFE	; 254
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     35e:	85 e3       	ldi	r24, 0x35	; 53
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	25 e3       	ldi	r18, 0x35	; 53
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	2d 7f       	andi	r18, 0xFD	; 253
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
			break;
     370:	00 00       	nop
		}
	}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <Dfplayer_Cmd>:
	argument 1: Type of command. Refer Dfplayer.h for command name definitions
	argument 2: Parameter to the command         
	                                                            
************************************************************************/
void Dfplayer_Cmd(uint8_t cmd, uint16_t parameter)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	63 97       	sbiw	r28, 0x13	; 19
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	89 8b       	std	Y+17, r24	; 0x11
     392:	7b 8b       	std	Y+19, r23	; 0x13
     394:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t cmd_lenght = 0x06;			// Currently all commands that'll be used have a lenght of 6. So this is fixed
     396:	86 e0       	ldi	r24, 0x06	; 6
     398:	89 83       	std	Y+1, r24	; 0x01
	uint8_t tempholder = 0;
     39a:	1a 82       	std	Y+2, r1	; 0x02

	/*	Create the CMD string	*/
	command.header = CMD_STRT_BYTE;
     39c:	8e e7       	ldi	r24, 0x7E	; 126
     39e:	80 93 7d 00 	sts	0x007D, r24
	command.version = CMD_VER;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	80 93 7e 00 	sts	0x007E, r24
	command.lenght = cmd_lenght;
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	80 93 7f 00 	sts	0x007F, r24
	command.type = cmd;
     3ae:	89 89       	ldd	r24, Y+17	; 0x11
     3b0:	80 93 80 00 	sts	0x0080, r24
	command.feedback = CMD_RECV_NFB;
     3b4:	10 92 81 00 	sts	0x0081, r1
	command.parah = parameter / 256;
     3b8:	8a 89       	ldd	r24, Y+18	; 0x12
     3ba:	9b 89       	ldd	r25, Y+19	; 0x13
     3bc:	89 2f       	mov	r24, r25
     3be:	99 27       	eor	r25, r25
     3c0:	80 93 82 00 	sts	0x0082, r24
	command.paral = parameter % 256;
     3c4:	8a 89       	ldd	r24, Y+18	; 0x12
     3c6:	80 93 83 00 	sts	0x0083, r24
	command.tail = CMD_END_BYTE;
     3ca:	8f ee       	ldi	r24, 0xEF	; 239
     3cc:	80 93 84 00 	sts	0x0084, r24
	
	Dfplayer_Send(&command);
     3d0:	8d e7       	ldi	r24, 0x7D	; 125
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	90 d0       	rcall	.+288    	; 0x4f6 <Dfplayer_Send>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	a0 e2       	ldi	r26, 0x20	; 32
     3dc:	b1 e4       	ldi	r27, 0x41	; 65
     3de:	8b 83       	std	Y+3, r24	; 0x03
     3e0:	9c 83       	std	Y+4, r25	; 0x04
     3e2:	ad 83       	std	Y+5, r26	; 0x05
     3e4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	4a e7       	ldi	r20, 0x7A	; 122
     3ec:	53 e4       	ldi	r21, 0x43	; 67
     3ee:	6b 81       	ldd	r22, Y+3	; 0x03
     3f0:	7c 81       	ldd	r23, Y+4	; 0x04
     3f2:	8d 81       	ldd	r24, Y+5	; 0x05
     3f4:	9e 81       	ldd	r25, Y+6	; 0x06
     3f6:	7c d9       	rcall	.-3336   	; 0xfffff6f0 <__eeprom_end+0xff7ef6f0>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	8f 83       	std	Y+7, r24	; 0x07
     3fe:	98 87       	std	Y+8, r25	; 0x08
     400:	a9 87       	std	Y+9, r26	; 0x09
     402:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e8       	ldi	r20, 0x80	; 128
     40a:	5f e3       	ldi	r21, 0x3F	; 63
     40c:	6f 81       	ldd	r22, Y+7	; 0x07
     40e:	78 85       	ldd	r23, Y+8	; 0x08
     410:	89 85       	ldd	r24, Y+9	; 0x09
     412:	9a 85       	ldd	r25, Y+10	; 0x0a
     414:	5c d8       	rcall	.-3912   	; 0xfffff4ce <__eeprom_end+0xff7ef4ce>
     416:	88 23       	and	r24, r24
     418:	2c f4       	brge	.+10     	; 0x424 <Dfplayer_Cmd+0xa8>
		__ticks = 1;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9c 87       	std	Y+12, r25	; 0x0c
     420:	8b 87       	std	Y+11, r24	; 0x0b
     422:	3b c0       	rjmp	.+118    	; 0x49a <__stack+0x3b>
	else if (__tmp > 65535)
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	3f ef       	ldi	r19, 0xFF	; 255
     428:	4f e7       	ldi	r20, 0x7F	; 127
     42a:	57 e4       	ldi	r21, 0x47	; 71
     42c:	6f 81       	ldd	r22, Y+7	; 0x07
     42e:	78 85       	ldd	r23, Y+8	; 0x08
     430:	89 85       	ldd	r24, Y+9	; 0x09
     432:	9a 85       	ldd	r25, Y+10	; 0x0a
     434:	59 d9       	rcall	.-3406   	; 0xfffff6e8 <__eeprom_end+0xff7ef6e8>
     436:	18 16       	cp	r1, r24
     438:	3c f5       	brge	.+78     	; 0x488 <__stack+0x29>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	40 e2       	ldi	r20, 0x20	; 32
     440:	51 e4       	ldi	r21, 0x41	; 65
     442:	6b 81       	ldd	r22, Y+3	; 0x03
     444:	7c 81       	ldd	r23, Y+4	; 0x04
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	9e 81       	ldd	r25, Y+6	; 0x06
     44a:	52 d9       	rcall	.-3420   	; 0xfffff6f0 <__eeprom_end+0xff7ef6f0>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	a8 d8       	rcall	.-3760   	; 0xfffff5a6 <__eeprom_end+0xff7ef5a6>
     456:	dc 01       	movw	r26, r24
     458:	cb 01       	movw	r24, r22
     45a:	9c 87       	std	Y+12, r25	; 0x0c
     45c:	8b 87       	std	Y+11, r24	; 0x0b
     45e:	0f c0       	rjmp	.+30     	; 0x47e <__stack+0x1f>
     460:	89 e1       	ldi	r24, 0x19	; 25
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9e 87       	std	Y+14, r25	; 0x0e
     466:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     468:	8d 85       	ldd	r24, Y+13	; 0x0d
     46a:	9e 85       	ldd	r25, Y+14	; 0x0e
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
     470:	9e 87       	std	Y+14, r25	; 0x0e
     472:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     474:	8b 85       	ldd	r24, Y+11	; 0x0b
     476:	9c 85       	ldd	r25, Y+12	; 0x0c
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	9c 87       	std	Y+12, r25	; 0x0c
     47c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47e:	8b 85       	ldd	r24, Y+11	; 0x0b
     480:	9c 85       	ldd	r25, Y+12	; 0x0c
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	69 f7       	brne	.-38     	; 0x460 <__stack+0x1>
     486:	13 c0       	rjmp	.+38     	; 0x4ae <__stack+0x4f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     488:	6f 81       	ldd	r22, Y+7	; 0x07
     48a:	78 85       	ldd	r23, Y+8	; 0x08
     48c:	89 85       	ldd	r24, Y+9	; 0x09
     48e:	9a 85       	ldd	r25, Y+10	; 0x0a
     490:	8a d8       	rcall	.-3820   	; 0xfffff5a6 <__eeprom_end+0xff7ef5a6>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	9c 87       	std	Y+12, r25	; 0x0c
     498:	8b 87       	std	Y+11, r24	; 0x0b
     49a:	8b 85       	ldd	r24, Y+11	; 0x0b
     49c:	9c 85       	ldd	r25, Y+12	; 0x0c
     49e:	98 8b       	std	Y+16, r25	; 0x10
     4a0:	8f 87       	std	Y+15, r24	; 0x0f
     4a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     4a4:	98 89       	ldd	r25, Y+16	; 0x10
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__stack+0x47>
     4aa:	98 8b       	std	Y+16, r25	; 0x10
     4ac:	8f 87       	std	Y+15, r24	; 0x0f

/*************************************************************************
*  If Commands are query based, a immediate response will be received
*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
     4ae:	b0 de       	rcall	.-672    	; 0x210 <Is_Buffer_Empty>
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	91 05       	cpc	r25, r1
     4b4:	b9 f4       	brne	.+46     	; 0x4e4 <__stack+0x85>
	{
		do{
			tempholder = Ring_Remove();
     4b6:	7d de       	rcall	.-774    	; 0x1b2 <Ring_Remove>
     4b8:	8a 83       	std	Y+2, r24	; 0x02
		}while(tempholder != CMD_STRT_BYTE);
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	8e 37       	cpi	r24, 0x7E	; 126
     4be:	d9 f7       	brne	.-10     	; 0x4b6 <__stack+0x57>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
     4c0:	78 de       	rcall	.-784    	; 0x1b2 <Ring_Remove>
     4c2:	80 93 7e 00 	sts	0x007E, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
     4c6:	75 de       	rcall	.-790    	; 0x1b2 <Ring_Remove>
     4c8:	80 93 7f 00 	sts	0x007F, r24
		command.type = Ring_Remove();
     4cc:	72 de       	rcall	.-796    	; 0x1b2 <Ring_Remove>
     4ce:	80 93 80 00 	sts	0x0080, r24
		command.feedback = Ring_Remove();
     4d2:	6f de       	rcall	.-802    	; 0x1b2 <Ring_Remove>
     4d4:	80 93 81 00 	sts	0x0081, r24
		command.parah = Ring_Remove();
     4d8:	6c de       	rcall	.-808    	; 0x1b2 <Ring_Remove>
     4da:	80 93 82 00 	sts	0x0082, r24
		command.paral = Ring_Remove();
     4de:	69 de       	rcall	.-814    	; 0x1b2 <Ring_Remove>
     4e0:	80 93 83 00 	sts	0x0083, r24
		//command.tail = Ring_Remove();
	}
}
     4e4:	63 96       	adiw	r28, 0x13	; 19
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <Dfplayer_Send>:

void Dfplayer_Send(command_t* strct_ptr)
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <Dfplayer_Send+0x6>
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	9a 83       	std	Y+2, r25	; 0x02
     502:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte(strct_ptr->header);
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	fc 01       	movw	r30, r24
     50a:	80 81       	ld	r24, Z
     50c:	0a de       	rcall	.-1004   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->version);
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	9a 81       	ldd	r25, Y+2	; 0x02
     512:	fc 01       	movw	r30, r24
     514:	81 81       	ldd	r24, Z+1	; 0x01
     516:	05 de       	rcall	.-1014   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->lenght);
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	fc 01       	movw	r30, r24
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	00 de       	rcall	.-1024   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->type);
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	fc 01       	movw	r30, r24
     528:	83 81       	ldd	r24, Z+3	; 0x03
     52a:	fb dd       	rcall	.-1034   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->feedback);
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	fc 01       	movw	r30, r24
     532:	84 81       	ldd	r24, Z+4	; 0x04
     534:	f6 dd       	rcall	.-1044   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->parah);
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	85 81       	ldd	r24, Z+5	; 0x05
     53e:	f1 dd       	rcall	.-1054   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->paral);
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	fc 01       	movw	r30, r24
     546:	86 81       	ldd	r24, Z+6	; 0x06
     548:	ec dd       	rcall	.-1064   	; 0x122 <USART_SendByte>
	USART_SendByte(strct_ptr->tail);
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
     54e:	fc 01       	movw	r30, r24
     550:	87 81       	ldd	r24, Z+7	; 0x07
     552:	e7 dd       	rcall	.-1074   	; 0x122 <USART_SendByte>
}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <Dfplayer_Query_Card_Presence>:
 * returns		0 if card is present
				1 if no card is present
 */				
				 
uint8_t Dfplayer_Query_Card_Presence()
{
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	2f 97       	sbiw	r28, 0x0f	; 15
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
	uint8_t tempholder = 0;
     572:	19 82       	std	Y+1, r1	; 0x01
	command.header = CMD_STRT_BYTE;
     574:	8e e7       	ldi	r24, 0x7E	; 126
     576:	80 93 7d 00 	sts	0x007D, r24
	command.version = CMD_VER;
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 7e 00 	sts	0x007E, r24
	command.lenght = 0x06;
     580:	86 e0       	ldi	r24, 0x06	; 6
     582:	80 93 7f 00 	sts	0x007F, r24
	command.type = CMD_TF_FILES;
     586:	88 e4       	ldi	r24, 0x48	; 72
     588:	80 93 80 00 	sts	0x0080, r24
	command.feedback = CMD_RECV_NFB;
     58c:	10 92 81 00 	sts	0x0081, r1
	command.parah = 0x00;
     590:	10 92 82 00 	sts	0x0082, r1
	command.paral = 0x00;
     594:	10 92 83 00 	sts	0x0083, r1
	command.tail = CMD_END_BYTE;
     598:	8f ee       	ldi	r24, 0xEF	; 239
     59a:	80 93 84 00 	sts	0x0084, r24
	
	Dfplayer_Send(&command);
     59e:	8d e7       	ldi	r24, 0x7D	; 125
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a9 df       	rcall	.-174    	; 0x4f6 <Dfplayer_Send>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e2       	ldi	r26, 0x20	; 32
     5aa:	b1 e4       	ldi	r27, 0x41	; 65
     5ac:	8a 83       	std	Y+2, r24	; 0x02
     5ae:	9b 83       	std	Y+3, r25	; 0x03
     5b0:	ac 83       	std	Y+4, r26	; 0x04
     5b2:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	4a e7       	ldi	r20, 0x7A	; 122
     5ba:	53 e4       	ldi	r21, 0x43	; 67
     5bc:	6a 81       	ldd	r22, Y+2	; 0x02
     5be:	7b 81       	ldd	r23, Y+3	; 0x03
     5c0:	8c 81       	ldd	r24, Y+4	; 0x04
     5c2:	9d 81       	ldd	r25, Y+5	; 0x05
     5c4:	95 d8       	rcall	.-3798   	; 0xfffff6f0 <__eeprom_end+0xff7ef6f0>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	8e 83       	std	Y+6, r24	; 0x06
     5cc:	9f 83       	std	Y+7, r25	; 0x07
     5ce:	a8 87       	std	Y+8, r26	; 0x08
     5d0:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e8       	ldi	r20, 0x80	; 128
     5d8:	5f e3       	ldi	r21, 0x3F	; 63
     5da:	6e 81       	ldd	r22, Y+6	; 0x06
     5dc:	7f 81       	ldd	r23, Y+7	; 0x07
     5de:	88 85       	ldd	r24, Y+8	; 0x08
     5e0:	99 85       	ldd	r25, Y+9	; 0x09
     5e2:	75 d7       	rcall	.+3818   	; 0x14ce <__cmpsf2>
     5e4:	88 23       	and	r24, r24
     5e6:	2c f4       	brge	.+10     	; 0x5f2 <Dfplayer_Query_Card_Presence+0x94>
		__ticks = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	9b 87       	std	Y+11, r25	; 0x0b
     5ee:	8a 87       	std	Y+10, r24	; 0x0a
     5f0:	3b c0       	rjmp	.+118    	; 0x668 <Dfplayer_Query_Card_Presence+0x10a>
	else if (__tmp > 65535)
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	3f ef       	ldi	r19, 0xFF	; 255
     5f6:	4f e7       	ldi	r20, 0x7F	; 127
     5f8:	57 e4       	ldi	r21, 0x47	; 71
     5fa:	6e 81       	ldd	r22, Y+6	; 0x06
     5fc:	7f 81       	ldd	r23, Y+7	; 0x07
     5fe:	88 85       	ldd	r24, Y+8	; 0x08
     600:	99 85       	ldd	r25, Y+9	; 0x09
     602:	72 d8       	rcall	.-3868   	; 0xfffff6e8 <__eeprom_end+0xff7ef6e8>
     604:	18 16       	cp	r1, r24
     606:	3c f5       	brge	.+78     	; 0x656 <Dfplayer_Query_Card_Presence+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e2       	ldi	r20, 0x20	; 32
     60e:	51 e4       	ldi	r21, 0x41	; 65
     610:	6a 81       	ldd	r22, Y+2	; 0x02
     612:	7b 81       	ldd	r23, Y+3	; 0x03
     614:	8c 81       	ldd	r24, Y+4	; 0x04
     616:	9d 81       	ldd	r25, Y+5	; 0x05
     618:	6b d8       	rcall	.-3882   	; 0xfffff6f0 <__eeprom_end+0xff7ef6f0>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	bc 01       	movw	r22, r24
     620:	cd 01       	movw	r24, r26
     622:	c1 d7       	rcall	.+3970   	; 0x15a6 <__fixunssfsi>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	9b 87       	std	Y+11, r25	; 0x0b
     62a:	8a 87       	std	Y+10, r24	; 0x0a
     62c:	0f c0       	rjmp	.+30     	; 0x64c <Dfplayer_Query_Card_Presence+0xee>
     62e:	89 e1       	ldi	r24, 0x19	; 25
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9d 87       	std	Y+13, r25	; 0x0d
     634:	8c 87       	std	Y+12, r24	; 0x0c
     636:	8c 85       	ldd	r24, Y+12	; 0x0c
     638:	9d 85       	ldd	r25, Y+13	; 0x0d
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <Dfplayer_Query_Card_Presence+0xdc>
     63e:	9d 87       	std	Y+13, r25	; 0x0d
     640:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	9b 85       	ldd	r25, Y+11	; 0x0b
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	9b 87       	std	Y+11, r25	; 0x0b
     64a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64c:	8a 85       	ldd	r24, Y+10	; 0x0a
     64e:	9b 85       	ldd	r25, Y+11	; 0x0b
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	69 f7       	brne	.-38     	; 0x62e <Dfplayer_Query_Card_Presence+0xd0>
     654:	13 c0       	rjmp	.+38     	; 0x67c <Dfplayer_Query_Card_Presence+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     656:	6e 81       	ldd	r22, Y+6	; 0x06
     658:	7f 81       	ldd	r23, Y+7	; 0x07
     65a:	88 85       	ldd	r24, Y+8	; 0x08
     65c:	99 85       	ldd	r25, Y+9	; 0x09
     65e:	a3 d7       	rcall	.+3910   	; 0x15a6 <__fixunssfsi>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	9b 87       	std	Y+11, r25	; 0x0b
     666:	8a 87       	std	Y+10, r24	; 0x0a
     668:	8a 85       	ldd	r24, Y+10	; 0x0a
     66a:	9b 85       	ldd	r25, Y+11	; 0x0b
     66c:	9f 87       	std	Y+15, r25	; 0x0f
     66e:	8e 87       	std	Y+14, r24	; 0x0e
     670:	8e 85       	ldd	r24, Y+14	; 0x0e
     672:	9f 85       	ldd	r25, Y+15	; 0x0f
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <Dfplayer_Query_Card_Presence+0x116>
     678:	9f 87       	std	Y+15, r25	; 0x0f
     67a:	8e 87       	std	Y+14, r24	; 0x0e

	/*************************************************************************
	*  If Commands are query based, a immediate response will be received
	*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
     67c:	c9 dd       	rcall	.-1134   	; 0x210 <Is_Buffer_Empty>
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	91 05       	cpc	r25, r1
     682:	b9 f4       	brne	.+46     	; 0x6b2 <Dfplayer_Query_Card_Presence+0x154>
	{
		do{
			tempholder = Ring_Remove();
     684:	96 dd       	rcall	.-1236   	; 0x1b2 <Ring_Remove>
     686:	89 83       	std	Y+1, r24	; 0x01
		}while(tempholder != CMD_STRT_BYTE);
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	8e 37       	cpi	r24, 0x7E	; 126
     68c:	d9 f7       	brne	.-10     	; 0x684 <Dfplayer_Query_Card_Presence+0x126>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
     68e:	91 dd       	rcall	.-1246   	; 0x1b2 <Ring_Remove>
     690:	80 93 7e 00 	sts	0x007E, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
     694:	8e dd       	rcall	.-1252   	; 0x1b2 <Ring_Remove>
     696:	80 93 7f 00 	sts	0x007F, r24
		command.type = Ring_Remove();
     69a:	8b dd       	rcall	.-1258   	; 0x1b2 <Ring_Remove>
     69c:	80 93 80 00 	sts	0x0080, r24
		command.feedback = Ring_Remove();
     6a0:	88 dd       	rcall	.-1264   	; 0x1b2 <Ring_Remove>
     6a2:	80 93 81 00 	sts	0x0081, r24
		command.parah = Ring_Remove();
     6a6:	85 dd       	rcall	.-1270   	; 0x1b2 <Ring_Remove>
     6a8:	80 93 82 00 	sts	0x0082, r24
		command.paral = Ring_Remove();
     6ac:	82 dd       	rcall	.-1276   	; 0x1b2 <Ring_Remove>
     6ae:	80 93 83 00 	sts	0x0083, r24
	}
	
	if(command.type == CMD_ERROR)
     6b2:	80 91 80 00 	lds	r24, 0x0080
     6b6:	80 34       	cpi	r24, 0x40	; 64
     6b8:	11 f4       	brne	.+4      	; 0x6be <Dfplayer_Query_Card_Presence+0x160>
	return 1;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <Dfplayer_Query_Card_Presence+0x162>
	
	else return 0;
     6be:	80 e0       	ldi	r24, 0x00	; 0
}
     6c0:	2f 96       	adiw	r28, 0x0f	; 15
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <main>:
#include "debug_func.h"



int main(void)
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
	Atmega_init();
     6da:	c1 dc       	rcall	.-1662   	; 0x5e <Atmega_init>
	
    while(1)
    {
		MotasController();
     6dc:	d2 d3       	rcall	.+1956   	; 0xe82 <MotasController>
    }
     6de:	fe cf       	rjmp	.-4      	; 0x6dc <main+0xa>

000006e0 <Init_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Init_State(void)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	flag_register_controller = 0;
     6e8:	10 92 62 00 	sts	0x0062, r1
	threshold_uss_count = 65535;
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	9f ef       	ldi	r25, 0xFF	; 255
     6f0:	90 93 65 00 	sts	0x0065, r25
     6f4:	80 93 64 00 	sts	0x0064, r24
	
	// TODO: Add code to check the status of the DFplayer if a SD card is or isn't inserted
	if(Dfplayer_Query_Card_Presence())
     6f8:	32 df       	rcall	.-412    	; 0x55e <Dfplayer_Query_Card_Presence>
     6fa:	88 23       	and	r24, r24
     6fc:	41 f0       	breq	.+16     	; 0x70e <Init_State+0x2e>
	flag_sd_card_empty_g = True;
     6fe:	82 e6       	ldi	r24, 0x62	; 98
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	fc 01       	movw	r30, r24
     704:	20 81       	ld	r18, Z
     706:	21 60       	ori	r18, 0x01	; 1
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
     70c:	07 c0       	rjmp	.+14     	; 0x71c <Init_State+0x3c>
	else flag_sd_card_empty_g = False;
     70e:	82 e6       	ldi	r24, 0x62	; 98
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fc 01       	movw	r30, r24
     714:	20 81       	ld	r18, Z
     716:	2e 7f       	andi	r18, 0xFE	; 254
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18
	// TODO: extern this flag. Please do not change the name
	if(True == flag_sd_card_empty_g)
     71c:	82 e6       	ldi	r24, 0x62	; 98
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	81 70       	andi	r24, 0x01	; 1
     726:	88 23       	and	r24, r24
     728:	21 f0       	breq	.+8      	; 0x732 <Init_State+0x52>
	{
		#ifdef DEBUG_ON
			//TODO: Add a LED colour for information
		#endif

		motascontroller_state = MOTAS_DEBUGGING_STATE;	
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	80 93 63 00 	sts	0x0063, r24
     730:	03 c0       	rjmp	.+6      	; 0x738 <Init_State+0x58>

	//TODO: Check if any additional condition is required for this transition
	/* No debugging required. Start calibration */
	else
	{	
		motascontroller_state = MOTAS_CALIBRATION_STATE;	
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 93 63 00 	sts	0x0063, r24
	}
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <Calibration_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Calibration_State(void)
{	
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	2e 97       	sbiw	r28, 0x0e	; 14
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e4       	ldi	r25, 0x40	; 64
     756:	ac e9       	ldi	r26, 0x9C	; 156
     758:	b5 e4       	ldi	r27, 0x45	; 69
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	ab 83       	std	Y+3, r26	; 0x03
     760:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	4a e7       	ldi	r20, 0x7A	; 122
     768:	53 e4       	ldi	r21, 0x43	; 67
     76a:	69 81       	ldd	r22, Y+1	; 0x01
     76c:	7a 81       	ldd	r23, Y+2	; 0x02
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	be d7       	rcall	.+3964   	; 0x16f0 <__mulsf3>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	8d 83       	std	Y+5, r24	; 0x05
     77a:	9e 83       	std	Y+6, r25	; 0x06
     77c:	af 83       	std	Y+7, r26	; 0x07
     77e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e8       	ldi	r20, 0x80	; 128
     786:	5f e3       	ldi	r21, 0x3F	; 63
     788:	6d 81       	ldd	r22, Y+5	; 0x05
     78a:	7e 81       	ldd	r23, Y+6	; 0x06
     78c:	8f 81       	ldd	r24, Y+7	; 0x07
     78e:	98 85       	ldd	r25, Y+8	; 0x08
     790:	9e d6       	rcall	.+3388   	; 0x14ce <__cmpsf2>
     792:	88 23       	and	r24, r24
     794:	2c f4       	brge	.+10     	; 0x7a0 <Calibration_State+0x62>
		__ticks = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9a 87       	std	Y+10, r25	; 0x0a
     79c:	89 87       	std	Y+9, r24	; 0x09
     79e:	3b c0       	rjmp	.+118    	; 0x816 <Calibration_State+0xd8>
	else if (__tmp > 65535)
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	3f ef       	ldi	r19, 0xFF	; 255
     7a4:	4f e7       	ldi	r20, 0x7F	; 127
     7a6:	57 e4       	ldi	r21, 0x47	; 71
     7a8:	6d 81       	ldd	r22, Y+5	; 0x05
     7aa:	7e 81       	ldd	r23, Y+6	; 0x06
     7ac:	8f 81       	ldd	r24, Y+7	; 0x07
     7ae:	98 85       	ldd	r25, Y+8	; 0x08
     7b0:	9b d7       	rcall	.+3894   	; 0x16e8 <__gesf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	3c f5       	brge	.+78     	; 0x804 <Calibration_State+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e2       	ldi	r20, 0x20	; 32
     7bc:	51 e4       	ldi	r21, 0x41	; 65
     7be:	69 81       	ldd	r22, Y+1	; 0x01
     7c0:	7a 81       	ldd	r23, Y+2	; 0x02
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	94 d7       	rcall	.+3880   	; 0x16f0 <__mulsf3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	bc 01       	movw	r22, r24
     7ce:	cd 01       	movw	r24, r26
     7d0:	ea d6       	rcall	.+3540   	; 0x15a6 <__fixunssfsi>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	9a 87       	std	Y+10, r25	; 0x0a
     7d8:	89 87       	std	Y+9, r24	; 0x09
     7da:	0f c0       	rjmp	.+30     	; 0x7fa <Calibration_State+0xbc>
     7dc:	89 e1       	ldi	r24, 0x19	; 25
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	9c 87       	std	Y+12, r25	; 0x0c
     7e2:	8b 87       	std	Y+11, r24	; 0x0b
     7e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <Calibration_State+0xaa>
     7ec:	9c 87       	std	Y+12, r25	; 0x0c
     7ee:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f0:	89 85       	ldd	r24, Y+9	; 0x09
     7f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	9a 87       	std	Y+10, r25	; 0x0a
     7f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fa:	89 85       	ldd	r24, Y+9	; 0x09
     7fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	69 f7       	brne	.-38     	; 0x7dc <Calibration_State+0x9e>
     802:	13 c0       	rjmp	.+38     	; 0x82a <Calibration_State+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     804:	6d 81       	ldd	r22, Y+5	; 0x05
     806:	7e 81       	ldd	r23, Y+6	; 0x06
     808:	8f 81       	ldd	r24, Y+7	; 0x07
     80a:	98 85       	ldd	r25, Y+8	; 0x08
     80c:	cc d6       	rcall	.+3480   	; 0x15a6 <__fixunssfsi>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	9a 87       	std	Y+10, r25	; 0x0a
     814:	89 87       	std	Y+9, r24	; 0x09
     816:	89 85       	ldd	r24, Y+9	; 0x09
     818:	9a 85       	ldd	r25, Y+10	; 0x0a
     81a:	9e 87       	std	Y+14, r25	; 0x0e
     81c:	8d 87       	std	Y+13, r24	; 0x0d
     81e:	8d 85       	ldd	r24, Y+13	; 0x0d
     820:	9e 85       	ldd	r25, Y+14	; 0x0e
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <Calibration_State+0xe4>
     826:	9e 87       	std	Y+14, r25	; 0x0e
     828:	8d 87       	std	Y+13, r24	; 0x0d
	/* Update the value of threshold*/
	_delay_ms(5000);
	threshold_uss_count = Get_Uss_Count();
     82a:	c9 d5       	rcall	.+2962   	; 0x13be <Get_Uss_Count>
     82c:	90 93 65 00 	sts	0x0065, r25
     830:	80 93 64 00 	sts	0x0064, r24
	threshold_uss_count -= 200;
     834:	80 91 64 00 	lds	r24, 0x0064
     838:	90 91 65 00 	lds	r25, 0x0065
     83c:	88 5c       	subi	r24, 0xC8	; 200
     83e:	91 09       	sbc	r25, r1
     840:	90 93 65 00 	sts	0x0065, r25
     844:	80 93 64 00 	sts	0x0064, r24
	#if DEBUG_ON
	SendDebug("USS calib");
	USART_Transmit_dec(threshold_uss_count);
	#endif
	/* Reset the PIR count*/
	Reset_Pir_count();
     848:	1e d6       	rcall	.+3132   	; 0x1486 <Reset_Pir_count>
	//_delay_ms(1000);
	//DebugLedTransmit(LED_OFF ,LED_RED);		/* Switch OFF the LED */
	#endif
	
	/* Update state */
	motascontroller_state = MOTAS_STANDBY_STATE;
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	80 93 63 00 	sts	0x0063, r24
	
	#if DEBUG_ON
	SendDebug("calib done");
	#endif
}
     850:	2e 96       	adiw	r28, 0x0e	; 14
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <Standby_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Standby_State(void)
{
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	62 97       	sbiw	r28, 0x12	; 18
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
	uint16_t standby_pircount = 0;
     876:	1a 82       	std	Y+2, r1	; 0x02
     878:	19 82       	std	Y+1, r1	; 0x01
	uint16_t standby_usscount = 0; 
     87a:	1c 82       	std	Y+4, r1	; 0x04
     87c:	1b 82       	std	Y+3, r1	; 0x03

	/* Update the PIR and ultrasonic count */
	standby_pircount = Get_Pir_count();
     87e:	f8 d5       	rcall	.+3056   	; 0x1470 <Get_Pir_count>
     880:	9a 83       	std	Y+2, r25	; 0x02
     882:	89 83       	std	Y+1, r24	; 0x01
	standby_usscount = Get_Uss_Count(); 
     884:	9c d5       	rcall	.+2872   	; 0x13be <Get_Uss_Count>
     886:	9c 83       	std	Y+4, r25	; 0x04
     888:	8b 83       	std	Y+3, r24	; 0x03

	DebugLedTransmit(LED_ON, LED_YELLOW);
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	fb dc       	rcall	.-1546   	; 0x286 <DebugLedTransmit>

	/*Check if Ultrasonic or pir has triggered because customer entering the room */
	if(flag_uss_state_g || (standby_pircount > 1))
     890:	82 e6       	ldi	r24, 0x62	; 98
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	84 70       	andi	r24, 0x04	; 4
     89a:	88 23       	and	r24, r24
     89c:	31 f4       	brne	.+12     	; 0x8aa <Standby_State+0x48>
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	9a 81       	ldd	r25, Y+2	; 0x02
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	91 05       	cpc	r25, r1
     8a6:	08 f4       	brcc	.+2      	; 0x8aa <Standby_State+0x48>
     8a8:	8c c0       	rjmp	.+280    	; 0x9c2 <Standby_State+0x160>
	{
		DebugLedTransmit(LED_OFF ,LED_RED);
     8aa:	62 e0       	ldi	r22, 0x02	; 2
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	eb dc       	rcall	.-1578   	; 0x286 <DebugLedTransmit>
		flag_uss_state_g = False;
     8b0:	82 e6       	ldi	r24, 0x62	; 98
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 81       	ld	r18, Z
     8b8:	2b 7f       	andi	r18, 0xFB	; 251
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
		/* Clear the standby pir count */
		standby_pircount = 0;
     8be:	1a 82       	std	Y+2, r1	; 0x02
     8c0:	19 82       	std	Y+1, r1	; 0x01
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e8       	ldi	r25, 0x80	; 128
     8c6:	ab e3       	ldi	r26, 0x3B	; 59
     8c8:	b5 e4       	ldi	r27, 0x45	; 69
     8ca:	8d 83       	std	Y+5, r24	; 0x05
     8cc:	9e 83       	std	Y+6, r25	; 0x06
     8ce:	af 83       	std	Y+7, r26	; 0x07
     8d0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	4a e7       	ldi	r20, 0x7A	; 122
     8d8:	53 e4       	ldi	r21, 0x43	; 67
     8da:	6d 81       	ldd	r22, Y+5	; 0x05
     8dc:	7e 81       	ldd	r23, Y+6	; 0x06
     8de:	8f 81       	ldd	r24, Y+7	; 0x07
     8e0:	98 85       	ldd	r25, Y+8	; 0x08
     8e2:	06 d7       	rcall	.+3596   	; 0x16f0 <__mulsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	89 87       	std	Y+9, r24	; 0x09
     8ea:	9a 87       	std	Y+10, r25	; 0x0a
     8ec:	ab 87       	std	Y+11, r26	; 0x0b
     8ee:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e8       	ldi	r20, 0x80	; 128
     8f6:	5f e3       	ldi	r21, 0x3F	; 63
     8f8:	69 85       	ldd	r22, Y+9	; 0x09
     8fa:	7a 85       	ldd	r23, Y+10	; 0x0a
     8fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     900:	e6 d5       	rcall	.+3020   	; 0x14ce <__cmpsf2>
     902:	88 23       	and	r24, r24
     904:	2c f4       	brge	.+10     	; 0x910 <Standby_State+0xae>
		__ticks = 1;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	9e 87       	std	Y+14, r25	; 0x0e
     90c:	8d 87       	std	Y+13, r24	; 0x0d
     90e:	3b c0       	rjmp	.+118    	; 0x986 <Standby_State+0x124>
	else if (__tmp > 65535)
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	3f ef       	ldi	r19, 0xFF	; 255
     914:	4f e7       	ldi	r20, 0x7F	; 127
     916:	57 e4       	ldi	r21, 0x47	; 71
     918:	69 85       	ldd	r22, Y+9	; 0x09
     91a:	7a 85       	ldd	r23, Y+10	; 0x0a
     91c:	8b 85       	ldd	r24, Y+11	; 0x0b
     91e:	9c 85       	ldd	r25, Y+12	; 0x0c
     920:	e3 d6       	rcall	.+3526   	; 0x16e8 <__gesf2>
     922:	18 16       	cp	r1, r24
     924:	3c f5       	brge	.+78     	; 0x974 <Standby_State+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e2       	ldi	r20, 0x20	; 32
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	6d 81       	ldd	r22, Y+5	; 0x05
     930:	7e 81       	ldd	r23, Y+6	; 0x06
     932:	8f 81       	ldd	r24, Y+7	; 0x07
     934:	98 85       	ldd	r25, Y+8	; 0x08
     936:	dc d6       	rcall	.+3512   	; 0x16f0 <__mulsf3>
     938:	dc 01       	movw	r26, r24
     93a:	cb 01       	movw	r24, r22
     93c:	bc 01       	movw	r22, r24
     93e:	cd 01       	movw	r24, r26
     940:	32 d6       	rcall	.+3172   	; 0x15a6 <__fixunssfsi>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	9e 87       	std	Y+14, r25	; 0x0e
     948:	8d 87       	std	Y+13, r24	; 0x0d
     94a:	0f c0       	rjmp	.+30     	; 0x96a <Standby_State+0x108>
     94c:	89 e1       	ldi	r24, 0x19	; 25
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	98 8b       	std	Y+16, r25	; 0x10
     952:	8f 87       	std	Y+15, r24	; 0x0f
     954:	8f 85       	ldd	r24, Y+15	; 0x0f
     956:	98 89       	ldd	r25, Y+16	; 0x10
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <Standby_State+0xf6>
     95c:	98 8b       	std	Y+16, r25	; 0x10
     95e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     960:	8d 85       	ldd	r24, Y+13	; 0x0d
     962:	9e 85       	ldd	r25, Y+14	; 0x0e
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	9e 87       	std	Y+14, r25	; 0x0e
     968:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     96a:	8d 85       	ldd	r24, Y+13	; 0x0d
     96c:	9e 85       	ldd	r25, Y+14	; 0x0e
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	69 f7       	brne	.-38     	; 0x94c <Standby_State+0xea>
     972:	13 c0       	rjmp	.+38     	; 0x99a <Standby_State+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     974:	69 85       	ldd	r22, Y+9	; 0x09
     976:	7a 85       	ldd	r23, Y+10	; 0x0a
     978:	8b 85       	ldd	r24, Y+11	; 0x0b
     97a:	9c 85       	ldd	r25, Y+12	; 0x0c
     97c:	14 d6       	rcall	.+3112   	; 0x15a6 <__fixunssfsi>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	9e 87       	std	Y+14, r25	; 0x0e
     984:	8d 87       	std	Y+13, r24	; 0x0d
     986:	8d 85       	ldd	r24, Y+13	; 0x0d
     988:	9e 85       	ldd	r25, Y+14	; 0x0e
     98a:	9a 8b       	std	Y+18, r25	; 0x12
     98c:	89 8b       	std	Y+17, r24	; 0x11
     98e:	89 89       	ldd	r24, Y+17	; 0x11
     990:	9a 89       	ldd	r25, Y+18	; 0x12
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <Standby_State+0x130>
     996:	9a 8b       	std	Y+18, r25	; 0x12
     998:	89 8b       	std	Y+17, r24	; 0x11
		
		/* Delay of 3 seconds to let the pir count increment */
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();
     99a:	6a d5       	rcall	.+2772   	; 0x1470 <Get_Pir_count>
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     9a0:	80 91 60 00 	lds	r24, 0x0060
     9a4:	90 91 61 00 	lds	r25, 0x0061
     9a8:	29 81       	ldd	r18, Y+1	; 0x01
     9aa:	3a 81       	ldd	r19, Y+2	; 0x02
     9ac:	82 17       	cp	r24, r18
     9ae:	93 07       	cpc	r25, r19
     9b0:	20 f4       	brcc	.+8      	; 0x9ba <Standby_State+0x158>
		{
			#if DEBUG_ON
			SendDebug("State changed : MOTAS ACTIVE");
			#endif
			motascontroller_state = MOTAS_ACTIVE_STATE;
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	80 93 63 00 	sts	0x0063, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <Standby_State+0x166>
		else 
		{
			#if DEBUG_ON
			SendDebug("State changed : MOTAS STANDBY");
			#endif
			motascontroller_state = MOTAS_STANDBY_STATE;
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 93 63 00 	sts	0x0063, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <Standby_State+0x166>
	else
	{
		#if DEBUG_ON
		SendDebug("State changed : MOTAS STANDBY");
		#endif
		motascontroller_state = MOTAS_STANDBY_STATE;
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	80 93 63 00 	sts	0x0063, r24
	}
}
     9c8:	62 96       	adiw	r28, 0x12	; 18
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <Active_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Active_State(void)
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	62 97       	sbiw	r28, 0x12	; 18
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
	uint16_t active_pir_count = 0;
     9ee:	1a 82       	std	Y+2, r1	; 0x02
     9f0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t active_usscount = 0; 
     9f2:	1c 82       	std	Y+4, r1	; 0x04
     9f4:	1b 82       	std	Y+3, r1	; 0x03
	/* Reset the USS flag	*/
	flag_uss_state_g = False;
     9f6:	82 e6       	ldi	r24, 0x62	; 98
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 81       	ld	r18, Z
     9fe:	2b 7f       	andi	r18, 0xFB	; 251
     a00:	fc 01       	movw	r30, r24
     a02:	20 83       	st	Z, r18
	
	/* Play music */
	if(False == flag_player_status_g)
     a04:	82 e6       	ldi	r24, 0x62	; 98
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	82 70       	andi	r24, 0x02	; 2
     a0e:	88 23       	and	r24, r24
     a10:	59 f4       	brne	.+22     	; 0xa28 <Active_State+0x4e>
	{
		/* Change the status of music player to playing */
		flag_player_status_g = True;
     a12:	82 e6       	ldi	r24, 0x62	; 98
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	fc 01       	movw	r30, r24
     a18:	20 81       	ld	r18, Z
     a1a:	22 60       	ori	r18, 0x02	; 2
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
		/* Play the first track */
		Dfplayer_Cmd(CMD_PLY_TRCK, 1);
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	aa dc       	rcall	.-1708   	; 0x37c <Dfplayer_Cmd>
		/* Do nothing */
	}

	///* Orange led light for 1 second indicating in the standy state */
	
	DebugLedTransmit(LED_OFF, LED_YELLOW);
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	2c dc       	rcall	.-1960   	; 0x286 <DebugLedTransmit>
	//_delay_ms(1000);
	//DebugLedTransmit(LED_OFF ,LED_ORANGE);		/* Switch OFF the LED */
	
	Reset_Pir_count();
     a2e:	2b d5       	rcall	.+2646   	; 0x1486 <Reset_Pir_count>
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e4       	ldi	r25, 0x40	; 64
     a34:	ac e9       	ldi	r26, 0x9C	; 156
     a36:	b5 e4       	ldi	r27, 0x45	; 69
     a38:	8d 83       	std	Y+5, r24	; 0x05
     a3a:	9e 83       	std	Y+6, r25	; 0x06
     a3c:	af 83       	std	Y+7, r26	; 0x07
     a3e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	4a e7       	ldi	r20, 0x7A	; 122
     a46:	53 e4       	ldi	r21, 0x43	; 67
     a48:	6d 81       	ldd	r22, Y+5	; 0x05
     a4a:	7e 81       	ldd	r23, Y+6	; 0x06
     a4c:	8f 81       	ldd	r24, Y+7	; 0x07
     a4e:	98 85       	ldd	r25, Y+8	; 0x08
     a50:	4f d6       	rcall	.+3230   	; 0x16f0 <__mulsf3>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	89 87       	std	Y+9, r24	; 0x09
     a58:	9a 87       	std	Y+10, r25	; 0x0a
     a5a:	ab 87       	std	Y+11, r26	; 0x0b
     a5c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e8       	ldi	r20, 0x80	; 128
     a64:	5f e3       	ldi	r21, 0x3F	; 63
     a66:	69 85       	ldd	r22, Y+9	; 0x09
     a68:	7a 85       	ldd	r23, Y+10	; 0x0a
     a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a6e:	2f d5       	rcall	.+2654   	; 0x14ce <__cmpsf2>
     a70:	88 23       	and	r24, r24
     a72:	2c f4       	brge	.+10     	; 0xa7e <Active_State+0xa4>
		__ticks = 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	9e 87       	std	Y+14, r25	; 0x0e
     a7a:	8d 87       	std	Y+13, r24	; 0x0d
     a7c:	3b c0       	rjmp	.+118    	; 0xaf4 <Active_State+0x11a>
	else if (__tmp > 65535)
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	3f ef       	ldi	r19, 0xFF	; 255
     a82:	4f e7       	ldi	r20, 0x7F	; 127
     a84:	57 e4       	ldi	r21, 0x47	; 71
     a86:	69 85       	ldd	r22, Y+9	; 0x09
     a88:	7a 85       	ldd	r23, Y+10	; 0x0a
     a8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a8e:	2c d6       	rcall	.+3160   	; 0x16e8 <__gesf2>
     a90:	18 16       	cp	r1, r24
     a92:	3c f5       	brge	.+78     	; 0xae2 <Active_State+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	40 e2       	ldi	r20, 0x20	; 32
     a9a:	51 e4       	ldi	r21, 0x41	; 65
     a9c:	6d 81       	ldd	r22, Y+5	; 0x05
     a9e:	7e 81       	ldd	r23, Y+6	; 0x06
     aa0:	8f 81       	ldd	r24, Y+7	; 0x07
     aa2:	98 85       	ldd	r25, Y+8	; 0x08
     aa4:	25 d6       	rcall	.+3146   	; 0x16f0 <__mulsf3>
     aa6:	dc 01       	movw	r26, r24
     aa8:	cb 01       	movw	r24, r22
     aaa:	bc 01       	movw	r22, r24
     aac:	cd 01       	movw	r24, r26
     aae:	7b d5       	rcall	.+2806   	; 0x15a6 <__fixunssfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	9e 87       	std	Y+14, r25	; 0x0e
     ab6:	8d 87       	std	Y+13, r24	; 0x0d
     ab8:	0f c0       	rjmp	.+30     	; 0xad8 <Active_State+0xfe>
     aba:	89 e1       	ldi	r24, 0x19	; 25
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	98 8b       	std	Y+16, r25	; 0x10
     ac0:	8f 87       	std	Y+15, r24	; 0x0f
     ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac4:	98 89       	ldd	r25, Y+16	; 0x10
     ac6:	01 97       	sbiw	r24, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <Active_State+0xec>
     aca:	98 8b       	std	Y+16, r25	; 0x10
     acc:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ace:	8d 85       	ldd	r24, Y+13	; 0x0d
     ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	9e 87       	std	Y+14, r25	; 0x0e
     ad6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
     ada:	9e 85       	ldd	r25, Y+14	; 0x0e
     adc:	00 97       	sbiw	r24, 0x00	; 0
     ade:	69 f7       	brne	.-38     	; 0xaba <Active_State+0xe0>
     ae0:	13 c0       	rjmp	.+38     	; 0xb08 <Active_State+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ae2:	69 85       	ldd	r22, Y+9	; 0x09
     ae4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ae6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aea:	5d d5       	rcall	.+2746   	; 0x15a6 <__fixunssfsi>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	9e 87       	std	Y+14, r25	; 0x0e
     af2:	8d 87       	std	Y+13, r24	; 0x0d
     af4:	8d 85       	ldd	r24, Y+13	; 0x0d
     af6:	9e 85       	ldd	r25, Y+14	; 0x0e
     af8:	9a 8b       	std	Y+18, r25	; 0x12
     afa:	89 8b       	std	Y+17, r24	; 0x11
     afc:	89 89       	ldd	r24, Y+17	; 0x11
     afe:	9a 89       	ldd	r25, Y+18	; 0x12
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <Active_State+0x126>
     b04:	9a 8b       	std	Y+18, r25	; 0x12
     b06:	89 8b       	std	Y+17, r24	; 0x11

	_delay_ms(5000);			// Default scan rate of the PIR requires 5 seconds before the next pulse is given
	
	/* Get pir count */
	active_pir_count = Get_Pir_count();
     b08:	b3 d4       	rcall	.+2406   	; 0x1470 <Get_Pir_count>
     b0a:	9a 83       	std	Y+2, r25	; 0x02
     b0c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check if Customer present in the room */
	if((active_pir_count >= threshold_pir_count) && (!flag_uss_state_g))
     b0e:	80 91 60 00 	lds	r24, 0x0060
     b12:	90 91 61 00 	lds	r25, 0x0061
     b16:	29 81       	ldd	r18, Y+1	; 0x01
     b18:	3a 81       	ldd	r19, Y+2	; 0x02
     b1a:	28 17       	cp	r18, r24
     b1c:	39 07       	cpc	r19, r25
     b1e:	58 f0       	brcs	.+22     	; 0xb36 <Active_State+0x15c>
     b20:	82 e6       	ldi	r24, 0x62	; 98
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	84 70       	andi	r24, 0x04	; 4
     b2a:	88 23       	and	r24, r24
     b2c:	21 f4       	brne	.+8      	; 0xb36 <Active_State+0x15c>
	{
		/* Do not change the state. Keep audio playing*/
		motascontroller_state = MOTAS_ACTIVE_STATE;
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	80 93 63 00 	sts	0x0063, r24
     b34:	2c c0       	rjmp	.+88     	; 0xb8e <Active_State+0x1b4>
	}
	/*Customer has left the room */
	else if(flag_uss_state_g)
     b36:	82 e6       	ldi	r24, 0x62	; 98
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	fc 01       	movw	r30, r24
     b3c:	80 81       	ld	r24, Z
     b3e:	84 70       	andi	r24, 0x04	; 4
     b40:	88 23       	and	r24, r24
     b42:	11 f1       	breq	.+68     	; 0xb88 <Active_State+0x1ae>
	{
		DebugLedTransmit(LED_OFF ,LED_RED);
     b44:	62 e0       	ldi	r22, 0x02	; 2
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	9e db       	rcall	.-2244   	; 0x286 <DebugLedTransmit>
		flag_uss_state_g = False;
     b4a:	82 e6       	ldi	r24, 0x62	; 98
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	fc 01       	movw	r30, r24
     b50:	20 81       	ld	r18, Z
     b52:	2b 7f       	andi	r18, 0xFB	; 251
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
		/* Stop playing music */
		#if DEBUG_ON
		SendDebug("State changed MOTAS STOP PLaying");
		#endif
		Dfplayer_Cmd(CMD_PAUSE, 1);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	8e e0       	ldi	r24, 0x0E	; 14
     b5e:	0e dc       	rcall	.-2020   	; 0x37c <Dfplayer_Cmd>
		Dfplayer_Cmd(CMD_PAUSE, 1);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	8e e0       	ldi	r24, 0x0E	; 14
     b66:	0a dc       	rcall	.-2028   	; 0x37c <Dfplayer_Cmd>
		Dfplayer_Cmd(CMD_PAUSE, 1);
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	8e e0       	ldi	r24, 0x0E	; 14
     b6e:	06 dc       	rcall	.-2036   	; 0x37c <Dfplayer_Cmd>
		
		/* Change the status of music player to false(Music not playing) */
		flag_player_status_g = False;
     b70:	82 e6       	ldi	r24, 0x62	; 98
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	fc 01       	movw	r30, r24
     b76:	20 81       	ld	r18, Z
     b78:	2d 7f       	andi	r18, 0xFD	; 253
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
		
		/* Change the state to standby state*/
		Reset_Pir_count();
     b7e:	83 d4       	rcall	.+2310   	; 0x1486 <Reset_Pir_count>
		motascontroller_state = MOTAS_STANDBY_STATE;	
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	80 93 63 00 	sts	0x0063, r24
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <Active_State+0x1b4>
	}
	else motascontroller_state = MOTAS_ACTIVE_STATE;
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	80 93 63 00 	sts	0x0063, r24
	
}
     b8e:	62 96       	adiw	r28, 0x12	; 18
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <Debugging_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Debugging_State(void)
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	ae 97       	sbiw	r28, 0x2e	; 46
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
	uint16_t pir_count = 0;
     bb4:	1a 82       	std	Y+2, r1	; 0x02
     bb6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t uss_count = 0;
     bb8:	1c 82       	std	Y+4, r1	; 0x04
     bba:	1b 82       	std	Y+3, r1	; 0x03
	#if DEBUG_ON
	SendDebug("STATE : DEBUGGING");
	#endif
		
	/* Yellow led light indicating start of Debugging mode */
	DebugLedTransmit(LED_ON ,LED_YELLOW);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	62 db       	rcall	.-2364   	; 0x286 <DebugLedTransmit>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	aa ef       	ldi	r26, 0xFA	; 250
     bc8:	b4 e4       	ldi	r27, 0x44	; 68
     bca:	8d 83       	std	Y+5, r24	; 0x05
     bcc:	9e 83       	std	Y+6, r25	; 0x06
     bce:	af 83       	std	Y+7, r26	; 0x07
     bd0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	4a e7       	ldi	r20, 0x7A	; 122
     bd8:	53 e4       	ldi	r21, 0x43	; 67
     bda:	6d 81       	ldd	r22, Y+5	; 0x05
     bdc:	7e 81       	ldd	r23, Y+6	; 0x06
     bde:	8f 81       	ldd	r24, Y+7	; 0x07
     be0:	98 85       	ldd	r25, Y+8	; 0x08
     be2:	86 d5       	rcall	.+2828   	; 0x16f0 <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	89 87       	std	Y+9, r24	; 0x09
     bea:	9a 87       	std	Y+10, r25	; 0x0a
     bec:	ab 87       	std	Y+11, r26	; 0x0b
     bee:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	69 85       	ldd	r22, Y+9	; 0x09
     bfa:	7a 85       	ldd	r23, Y+10	; 0x0a
     bfc:	8b 85       	ldd	r24, Y+11	; 0x0b
     bfe:	9c 85       	ldd	r25, Y+12	; 0x0c
     c00:	66 d4       	rcall	.+2252   	; 0x14ce <__cmpsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <Debugging_State+0x70>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 87       	std	Y+14, r25	; 0x0e
     c0c:	8d 87       	std	Y+13, r24	; 0x0d
     c0e:	3b c0       	rjmp	.+118    	; 0xc86 <Debugging_State+0xe6>
	else if (__tmp > 65535)
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	3f ef       	ldi	r19, 0xFF	; 255
     c14:	4f e7       	ldi	r20, 0x7F	; 127
     c16:	57 e4       	ldi	r21, 0x47	; 71
     c18:	69 85       	ldd	r22, Y+9	; 0x09
     c1a:	7a 85       	ldd	r23, Y+10	; 0x0a
     c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c20:	63 d5       	rcall	.+2758   	; 0x16e8 <__gesf2>
     c22:	18 16       	cp	r1, r24
     c24:	3c f5       	brge	.+78     	; 0xc74 <Debugging_State+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	6d 81       	ldd	r22, Y+5	; 0x05
     c30:	7e 81       	ldd	r23, Y+6	; 0x06
     c32:	8f 81       	ldd	r24, Y+7	; 0x07
     c34:	98 85       	ldd	r25, Y+8	; 0x08
     c36:	5c d5       	rcall	.+2744   	; 0x16f0 <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	b2 d4       	rcall	.+2404   	; 0x15a6 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9e 87       	std	Y+14, r25	; 0x0e
     c48:	8d 87       	std	Y+13, r24	; 0x0d
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <Debugging_State+0xca>
     c4c:	89 e1       	ldi	r24, 0x19	; 25
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	98 8b       	std	Y+16, r25	; 0x10
     c52:	8f 87       	std	Y+15, r24	; 0x0f
     c54:	8f 85       	ldd	r24, Y+15	; 0x0f
     c56:	98 89       	ldd	r25, Y+16	; 0x10
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <Debugging_State+0xb8>
     c5c:	98 8b       	std	Y+16, r25	; 0x10
     c5e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8d 85       	ldd	r24, Y+13	; 0x0d
     c62:	9e 85       	ldd	r25, Y+14	; 0x0e
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	9e 87       	std	Y+14, r25	; 0x0e
     c68:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	69 f7       	brne	.-38     	; 0xc4c <Debugging_State+0xac>
     c72:	13 c0       	rjmp	.+38     	; 0xc9a <Debugging_State+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	69 85       	ldd	r22, Y+9	; 0x09
     c76:	7a 85       	ldd	r23, Y+10	; 0x0a
     c78:	8b 85       	ldd	r24, Y+11	; 0x0b
     c7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     c7c:	94 d4       	rcall	.+2344   	; 0x15a6 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	9e 87       	std	Y+14, r25	; 0x0e
     c84:	8d 87       	std	Y+13, r24	; 0x0d
     c86:	8d 85       	ldd	r24, Y+13	; 0x0d
     c88:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8a:	9a 8b       	std	Y+18, r25	; 0x12
     c8c:	89 8b       	std	Y+17, r24	; 0x11
     c8e:	89 89       	ldd	r24, Y+17	; 0x11
     c90:	9a 89       	ldd	r25, Y+18	; 0x12
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <Debugging_State+0xf2>
     c96:	9a 8b       	std	Y+18, r25	; 0x12
     c98:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(2000);
	
	/* Get the pir count */
	Reset_Pir_count();
     c9a:	f5 d3       	rcall	.+2026   	; 0x1486 <Reset_Pir_count>
	pir_count = Get_Pir_count();
     c9c:	e9 d3       	rcall	.+2002   	; 0x1470 <Get_Pir_count>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01

	/* Get the USS count */
	uss_count = Get_Uss_Count();
     ca2:	8d d3       	rcall	.+1818   	; 0x13be <Get_Uss_Count>
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	8b 83       	std	Y+3, r24	; 0x03

	/* Check if pir is triggered */
	if(pir_count > 1)
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	91 05       	cpc	r25, r1
     cb0:	08 f4       	brcc	.+2      	; 0xcb4 <Debugging_State+0x114>
     cb2:	6f c0       	rjmp	.+222    	; 0xd92 <Debugging_State+0x1f2>
	{
		/* Red led light indicating pir triggered */
		DebugLedTransmit(LED_ON, LED_RED);
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	e6 da       	rcall	.-2612   	; 0x286 <DebugLedTransmit>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	aa ef       	ldi	r26, 0xFA	; 250
     cc0:	b4 e4       	ldi	r27, 0x44	; 68
     cc2:	8b 8b       	std	Y+19, r24	; 0x13
     cc4:	9c 8b       	std	Y+20, r25	; 0x14
     cc6:	ad 8b       	std	Y+21, r26	; 0x15
     cc8:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	4a e7       	ldi	r20, 0x7A	; 122
     cd0:	53 e4       	ldi	r21, 0x43	; 67
     cd2:	6b 89       	ldd	r22, Y+19	; 0x13
     cd4:	7c 89       	ldd	r23, Y+20	; 0x14
     cd6:	8d 89       	ldd	r24, Y+21	; 0x15
     cd8:	9e 89       	ldd	r25, Y+22	; 0x16
     cda:	0a d5       	rcall	.+2580   	; 0x16f0 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8f 8b       	std	Y+23, r24	; 0x17
     ce2:	98 8f       	std	Y+24, r25	; 0x18
     ce4:	a9 8f       	std	Y+25, r26	; 0x19
     ce6:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e8       	ldi	r20, 0x80	; 128
     cee:	5f e3       	ldi	r21, 0x3F	; 63
     cf0:	6f 89       	ldd	r22, Y+23	; 0x17
     cf2:	78 8d       	ldd	r23, Y+24	; 0x18
     cf4:	89 8d       	ldd	r24, Y+25	; 0x19
     cf6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cf8:	ea d3       	rcall	.+2004   	; 0x14ce <__cmpsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	2c f4       	brge	.+10     	; 0xd08 <Debugging_State+0x168>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9c 8f       	std	Y+28, r25	; 0x1c
     d04:	8b 8f       	std	Y+27, r24	; 0x1b
     d06:	3b c0       	rjmp	.+118    	; 0xd7e <Debugging_State+0x1de>
	else if (__tmp > 65535)
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	6f 89       	ldd	r22, Y+23	; 0x17
     d12:	78 8d       	ldd	r23, Y+24	; 0x18
     d14:	89 8d       	ldd	r24, Y+25	; 0x19
     d16:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d18:	e7 d4       	rcall	.+2510   	; 0x16e8 <__gesf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	3c f5       	brge	.+78     	; 0xd6c <Debugging_State+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e2       	ldi	r20, 0x20	; 32
     d24:	51 e4       	ldi	r21, 0x41	; 65
     d26:	6b 89       	ldd	r22, Y+19	; 0x13
     d28:	7c 89       	ldd	r23, Y+20	; 0x14
     d2a:	8d 89       	ldd	r24, Y+21	; 0x15
     d2c:	9e 89       	ldd	r25, Y+22	; 0x16
     d2e:	e0 d4       	rcall	.+2496   	; 0x16f0 <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	bc 01       	movw	r22, r24
     d36:	cd 01       	movw	r24, r26
     d38:	36 d4       	rcall	.+2156   	; 0x15a6 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9c 8f       	std	Y+28, r25	; 0x1c
     d40:	8b 8f       	std	Y+27, r24	; 0x1b
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <Debugging_State+0x1c2>
     d44:	89 e1       	ldi	r24, 0x19	; 25
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9e 8f       	std	Y+30, r25	; 0x1e
     d4a:	8d 8f       	std	Y+29, r24	; 0x1d
     d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <Debugging_State+0x1b0>
     d54:	9e 8f       	std	Y+30, r25	; 0x1e
     d56:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9c 8f       	std	Y+28, r25	; 0x1c
     d60:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	69 f7       	brne	.-38     	; 0xd44 <Debugging_State+0x1a4>
     d6a:	13 c0       	rjmp	.+38     	; 0xd92 <Debugging_State+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6c:	6f 89       	ldd	r22, Y+23	; 0x17
     d6e:	78 8d       	ldd	r23, Y+24	; 0x18
     d70:	89 8d       	ldd	r24, Y+25	; 0x19
     d72:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d74:	18 d4       	rcall	.+2096   	; 0x15a6 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9c 8f       	std	Y+28, r25	; 0x1c
     d7c:	8b 8f       	std	Y+27, r24	; 0x1b
     d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d82:	98 a3       	std	Y+32, r25	; 0x20
     d84:	8f 8f       	std	Y+31, r24	; 0x1f
     d86:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d88:	98 a1       	ldd	r25, Y+32	; 0x20
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <Debugging_State+0x1ea>
     d8e:	98 a3       	std	Y+32, r25	; 0x20
     d90:	8f 8f       	std	Y+31, r24	; 0x1f
	}
	/* Check if USS is triggered */
	else if(uss_count > debug_threshold_uss_count);
	{
		/* Orange led light indicating uss triggered */
		DebugLedTransmit(LED_ON, LED_ORANGE);
     d92:	63 e0       	ldi	r22, 0x03	; 3
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	77 da       	rcall	.-2834   	; 0x286 <DebugLedTransmit>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	aa ef       	ldi	r26, 0xFA	; 250
     d9e:	b4 e4       	ldi	r27, 0x44	; 68
     da0:	89 a3       	std	Y+33, r24	; 0x21
     da2:	9a a3       	std	Y+34, r25	; 0x22
     da4:	ab a3       	std	Y+35, r26	; 0x23
     da6:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	4a e7       	ldi	r20, 0x7A	; 122
     dae:	53 e4       	ldi	r21, 0x43	; 67
     db0:	69 a1       	ldd	r22, Y+33	; 0x21
     db2:	7a a1       	ldd	r23, Y+34	; 0x22
     db4:	8b a1       	ldd	r24, Y+35	; 0x23
     db6:	9c a1       	ldd	r25, Y+36	; 0x24
     db8:	9b d4       	rcall	.+2358   	; 0x16f0 <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8d a3       	std	Y+37, r24	; 0x25
     dc0:	9e a3       	std	Y+38, r25	; 0x26
     dc2:	af a3       	std	Y+39, r26	; 0x27
     dc4:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e8       	ldi	r20, 0x80	; 128
     dcc:	5f e3       	ldi	r21, 0x3F	; 63
     dce:	6d a1       	ldd	r22, Y+37	; 0x25
     dd0:	7e a1       	ldd	r23, Y+38	; 0x26
     dd2:	8f a1       	ldd	r24, Y+39	; 0x27
     dd4:	98 a5       	ldd	r25, Y+40	; 0x28
     dd6:	7b d3       	rcall	.+1782   	; 0x14ce <__cmpsf2>
     dd8:	88 23       	and	r24, r24
     dda:	2c f4       	brge	.+10     	; 0xde6 <Debugging_State+0x246>
		__ticks = 1;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9a a7       	std	Y+42, r25	; 0x2a
     de2:	89 a7       	std	Y+41, r24	; 0x29
     de4:	3b c0       	rjmp	.+118    	; 0xe5c <Debugging_State+0x2bc>
	else if (__tmp > 65535)
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	6d a1       	ldd	r22, Y+37	; 0x25
     df0:	7e a1       	ldd	r23, Y+38	; 0x26
     df2:	8f a1       	ldd	r24, Y+39	; 0x27
     df4:	98 a5       	ldd	r25, Y+40	; 0x28
     df6:	78 d4       	rcall	.+2288   	; 0x16e8 <__gesf2>
     df8:	18 16       	cp	r1, r24
     dfa:	3c f5       	brge	.+78     	; 0xe4a <Debugging_State+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e2       	ldi	r20, 0x20	; 32
     e02:	51 e4       	ldi	r21, 0x41	; 65
     e04:	69 a1       	ldd	r22, Y+33	; 0x21
     e06:	7a a1       	ldd	r23, Y+34	; 0x22
     e08:	8b a1       	ldd	r24, Y+35	; 0x23
     e0a:	9c a1       	ldd	r25, Y+36	; 0x24
     e0c:	71 d4       	rcall	.+2274   	; 0x16f0 <__mulsf3>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	bc 01       	movw	r22, r24
     e14:	cd 01       	movw	r24, r26
     e16:	c7 d3       	rcall	.+1934   	; 0x15a6 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a a7       	std	Y+42, r25	; 0x2a
     e1e:	89 a7       	std	Y+41, r24	; 0x29
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <Debugging_State+0x2a0>
     e22:	89 e1       	ldi	r24, 0x19	; 25
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9c a7       	std	Y+44, r25	; 0x2c
     e28:	8b a7       	std	Y+43, r24	; 0x2b
     e2a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e2c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <Debugging_State+0x28e>
     e32:	9c a7       	std	Y+44, r25	; 0x2c
     e34:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e36:	89 a5       	ldd	r24, Y+41	; 0x29
     e38:	9a a5       	ldd	r25, Y+42	; 0x2a
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	9a a7       	std	Y+42, r25	; 0x2a
     e3e:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e40:	89 a5       	ldd	r24, Y+41	; 0x29
     e42:	9a a5       	ldd	r25, Y+42	; 0x2a
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	69 f7       	brne	.-38     	; 0xe22 <Debugging_State+0x282>
     e48:	13 c0       	rjmp	.+38     	; 0xe70 <Debugging_State+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4a:	6d a1       	ldd	r22, Y+37	; 0x25
     e4c:	7e a1       	ldd	r23, Y+38	; 0x26
     e4e:	8f a1       	ldd	r24, Y+39	; 0x27
     e50:	98 a5       	ldd	r25, Y+40	; 0x28
     e52:	a9 d3       	rcall	.+1874   	; 0x15a6 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9a a7       	std	Y+42, r25	; 0x2a
     e5a:	89 a7       	std	Y+41, r24	; 0x29
     e5c:	89 a5       	ldd	r24, Y+41	; 0x29
     e5e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e60:	9e a7       	std	Y+46, r25	; 0x2e
     e62:	8d a7       	std	Y+45, r24	; 0x2d
     e64:	8d a5       	ldd	r24, Y+45	; 0x2d
     e66:	9e a5       	ldd	r25, Y+46	; 0x2e
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <Debugging_State+0x2c8>
     e6c:	9e a7       	std	Y+46, r25	; 0x2e
     e6e:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(2000);
	}
}
     e70:	ae 96       	adiw	r28, 0x2e	; 46
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <MotasController>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void MotasController(void)
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
     e8a:	80 91 63 00 	lds	r24, 0x0063
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	91 05       	cpc	r25, r1
     e96:	a1 f0       	breq	.+40     	; 0xec0 <MotasController+0x3e>
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	91 05       	cpc	r25, r1
     e9c:	34 f4       	brge	.+12     	; 0xeaa <MotasController+0x28>
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	59 f0       	breq	.+22     	; 0xeb8 <MotasController+0x36>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	51 f0       	breq	.+20     	; 0xebc <MotasController+0x3a>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
     ea8:	11 c0       	rjmp	.+34     	; 0xecc <MotasController+0x4a>
*/
void MotasController(void)
{
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	51 f0       	breq	.+20     	; 0xec4 <MotasController+0x42>
     eb0:	84 30       	cpi	r24, 0x04	; 4
     eb2:	91 05       	cpc	r25, r1
     eb4:	49 f0       	breq	.+18     	; 0xec8 <MotasController+0x46>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
     eb6:	0a c0       	rjmp	.+20     	; 0xecc <MotasController+0x4a>
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
	{
		case MOTAS_INIT_STATE:
			Init_State();
     eb8:	13 dc       	rcall	.-2010   	; 0x6e0 <Init_State>
			break;	
     eba:	08 c0       	rjmp	.+16     	; 0xecc <MotasController+0x4a>

		case MOTAS_CALIBRATION_STATE:
			Calibration_State();
     ebc:	40 dc       	rcall	.-1920   	; 0x73e <Calibration_State>
			break;	
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <MotasController+0x4a>

		case MOTAS_STANDBY_STATE:
			Standby_State();
     ec0:	d0 dc       	rcall	.-1632   	; 0x862 <Standby_State>
			break;
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <MotasController+0x4a>

		case MOTAS_ACTIVE_STATE:
			Active_State();
     ec4:	8a dd       	rcall	.-1260   	; 0x9da <Active_State>
			break;
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <MotasController+0x4a>

		case MOTAS_DEBUGGING_STATE:		
			Debugging_State();	
     ec8:	6b de       	rcall	.-810    	; 0xba0 <Debugging_State>
			break;
     eca:	00 00       	nop
		default : 
			/*Do nothing*/
			break;	

	}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <__vector_8>:

#define SET_USS_FLAG	({flag_register_controller |= (1 << 2);})
#define CLEAR_USS_FLAG  ({flag_register_controller &= ~(1 << 2);})

ISR(TIMER1_OVF_vect)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	00 90 5f 00 	lds	r0, 0x005F
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	++timer1_ovf_count;
     eea:	80 91 6a 00 	lds	r24, 0x006A
     eee:	90 91 6b 00 	lds	r25, 0x006B
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	90 93 6b 00 	sts	0x006B, r25
     ef8:	80 93 6a 00 	sts	0x006A, r24
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	0f 90       	pop	r0
     f06:	00 92 5f 00 	sts	0x005F, r0
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	00 90 5f 00 	lds	r0, 0x005F
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	static uint16_t timer_ovf_count = 0;
	
	if((timer_ovf_count++) == 500)
     f3c:	80 91 6c 00 	lds	r24, 0x006C
     f40:	90 91 6d 00 	lds	r25, 0x006D
     f44:	9c 01       	movw	r18, r24
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	30 93 6d 00 	sts	0x006D, r19
     f4e:	20 93 6c 00 	sts	0x006C, r18
     f52:	84 3f       	cpi	r24, 0xF4	; 244
     f54:	21 e0       	ldi	r18, 0x01	; 1
     f56:	92 07       	cpc	r25, r18
     f58:	91 f4       	brne	.+36     	; 0xf7e <__vector_9+0x6e>
	{
		Trigger_Ultrasonic_Sensor();
     f5a:	c3 d0       	rcall	.+390    	; 0x10e2 <Trigger_Ultrasonic_Sensor>
		timer_ovf_count = 0;
     f5c:	10 92 6d 00 	sts	0x006D, r1
     f60:	10 92 6c 00 	sts	0x006C, r1
		TCCR0 &= ~(1 << CS00);		// Stop the timer. Timer is restarted in the USS echo received interrupt
     f64:	83 e5       	ldi	r24, 0x53	; 83
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	23 e5       	ldi	r18, 0x53	; 83
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	f9 01       	movw	r30, r18
     f6e:	20 81       	ld	r18, Z
     f70:	2e 7f       	andi	r18, 0xFE	; 254
     f72:	fc 01       	movw	r30, r24
     f74:	20 83       	st	Z, r18
		TCNT0 = 0;
     f76:	82 e5       	ldi	r24, 0x52	; 82
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	fc 01       	movw	r30, r24
     f7c:	10 82       	st	Z, r1
	}
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	00 92 5f 00 	sts	0x005F, r0
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <__vector_2>:

ISR(PIR_INTERRUPT_VECT)
{
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	00 90 5f 00 	lds	r0, 0x005F
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count++;
     fbe:	80 91 66 00 	lds	r24, 0x0066
     fc2:	90 91 67 00 	lds	r25, 0x0067
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 67 00 	sts	0x0067, r25
     fcc:	80 93 66 00 	sts	0x0066, r24
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	0f 90       	pop	r0
     fda:	00 92 5f 00 	sts	0x005F, r0
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <__vector_1>:

ISR(USS_INTERRUPT_VECT)				
{
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	00 90 5f 00 	lds	r0, 0x005F
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t UssEdgeCount = 0;
	if (UssEdgeCount)		
    1010:	80 91 6e 00 	lds	r24, 0x006E
    1014:	88 23       	and	r24, r24
    1016:	d9 f1       	breq	.+118    	; 0x108e <__vector_1+0xaa>
	{
		Stop_Timer1();
    1018:	1b d2       	rcall	.+1078   	; 0x1450 <Stop_Timer1>
		UssPulseCount = TCNT1;		// Store the time duration of the echo pulse. 
    101a:	8c e4       	ldi	r24, 0x4C	; 76
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	fc 01       	movw	r30, r24
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	90 93 69 00 	sts	0x0069, r25
    1028:	80 93 68 00 	sts	0x0068, r24
		timer1_ovf_count = 0;
    102c:	10 92 6b 00 	sts	0x006B, r1
    1030:	10 92 6a 00 	sts	0x006A, r1
		TCNT1 = 0;
    1034:	8c e4       	ldi	r24, 0x4C	; 76
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	fc 01       	movw	r30, r24
    103a:	11 82       	std	Z+1, r1	; 0x01
    103c:	10 82       	st	Z, r1
		UssEdgeCount = 0;
    103e:	10 92 6e 00 	sts	0x006E, r1
		MCUCR |= (1 << ISC01) | (1 << ISC00);												// Rising edge will trigger the next interrupt
    1042:	85 e5       	ldi	r24, 0x55	; 85
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	25 e5       	ldi	r18, 0x55	; 85
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	f9 01       	movw	r30, r18
    104c:	20 81       	ld	r18, Z
    104e:	23 60       	ori	r18, 0x03	; 3
    1050:	fc 01       	movw	r30, r24
    1052:	20 83       	st	Z, r18
		TCCR0 |= (1 << CS00);					// Start the timer0 to wait for 1ms to trigger the USS
    1054:	83 e5       	ldi	r24, 0x53	; 83
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	23 e5       	ldi	r18, 0x53	; 83
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	f9 01       	movw	r30, r18
    105e:	20 81       	ld	r18, Z
    1060:	21 60       	ori	r18, 0x01	; 1
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18
		
		if(UssPulseCount < threshold_uss_count)
    1066:	20 91 68 00 	lds	r18, 0x0068
    106a:	30 91 69 00 	lds	r19, 0x0069
    106e:	80 91 64 00 	lds	r24, 0x0064
    1072:	90 91 65 00 	lds	r25, 0x0065
    1076:	28 17       	cp	r18, r24
    1078:	39 07       	cpc	r19, r25
    107a:	f8 f4       	brcc	.+62     	; 0x10ba <__vector_1+0xd6>
		{
			#if DEBUG_ON
			SendDebug("Thres_cross");
			USART_Transmit_dec(UssPulseCount);
			#endif	
			DebugLedTransmit(LED_ON, LED_RED);
    107c:	62 e0       	ldi	r22, 0x02	; 2
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	02 d9       	rcall	.-3580   	; 0x286 <DebugLedTransmit>
			SET_USS_FLAG;	
    1082:	80 91 62 00 	lds	r24, 0x0062
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	80 93 62 00 	sts	0x0062, r24
    108c:	16 c0       	rjmp	.+44     	; 0x10ba <__vector_1+0xd6>
		}
	}
	else 
	{
		Start_Timer1();
    108e:	d0 d1       	rcall	.+928    	; 0x1430 <Start_Timer1>
		UssEdgeCount = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 6e 00 	sts	0x006E, r24
		MCUCR &= ~(1 << ISC00);										// falling edge for INT0 enabled
    1096:	85 e5       	ldi	r24, 0x55	; 85
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	25 e5       	ldi	r18, 0x55	; 85
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	2e 7f       	andi	r18, 0xFE	; 254
    10a4:	fc 01       	movw	r30, r24
    10a6:	20 83       	st	Z, r18
		MCUCR |= (1 << ISC01);
    10a8:	85 e5       	ldi	r24, 0x55	; 85
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	25 e5       	ldi	r18, 0x55	; 85
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	f9 01       	movw	r30, r18
    10b2:	20 81       	ld	r18, Z
    10b4:	22 60       	ori	r18, 0x02	; 2
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
	}
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	00 92 5f 00 	sts	0x005F, r0
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <Trigger_Ultrasonic_Sensor>:

void Trigger_Ultrasonic_Sensor()									// Function tested for 10us trigger 
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	a0 97       	sbiw	r28, 0x20	; 32
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
	SETBIT(USS_TRIGGER_PORT, USS_TRIGGER_PIN);
    10f6:	88 e3       	ldi	r24, 0x38	; 56
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	28 e3       	ldi	r18, 0x38	; 56
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	f9 01       	movw	r30, r18
    1100:	20 81       	ld	r18, Z
    1102:	22 60       	ori	r18, 0x02	; 2
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a0 e2       	ldi	r26, 0x20	; 32
    110e:	b1 e4       	ldi	r27, 0x41	; 65
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	ab 83       	std	Y+3, r26	; 0x03
    1116:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    1118:	2b ea       	ldi	r18, 0xAB	; 171
    111a:	3a ea       	ldi	r19, 0xAA	; 170
    111c:	4a ea       	ldi	r20, 0xAA	; 170
    111e:	5e e3       	ldi	r21, 0x3E	; 62
    1120:	69 81       	ldd	r22, Y+1	; 0x01
    1122:	7a 81       	ldd	r23, Y+2	; 0x02
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	e3 d2       	rcall	.+1478   	; 0x16f0 <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	9e 83       	std	Y+6, r25	; 0x06
    1132:	af 83       	std	Y+7, r26	; 0x07
    1134:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	5e e3       	ldi	r21, 0x3E	; 62
    113e:	69 81       	ldd	r22, Y+1	; 0x01
    1140:	7a 81       	ldd	r23, Y+2	; 0x02
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	d4 d2       	rcall	.+1448   	; 0x16f0 <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	89 87       	std	Y+9, r24	; 0x09
    114e:	9a 87       	std	Y+10, r25	; 0x0a
    1150:	ab 87       	std	Y+11, r26	; 0x0b
    1152:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	6d 81       	ldd	r22, Y+5	; 0x05
    115e:	7e 81       	ldd	r23, Y+6	; 0x06
    1160:	8f 81       	ldd	r24, Y+7	; 0x07
    1162:	98 85       	ldd	r25, Y+8	; 0x08
    1164:	b4 d1       	rcall	.+872    	; 0x14ce <__cmpsf2>
    1166:	88 23       	and	r24, r24
    1168:	1c f4       	brge	.+6      	; 0x1170 <Trigger_Ultrasonic_Sensor+0x8e>
		__ticks = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	8d 87       	std	Y+13, r24	; 0x0d
    116e:	a7 c0       	rjmp	.+334    	; 0x12be <Trigger_Ultrasonic_Sensor+0x1dc>
	else if (__tmp2 > 65535)
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	3f ef       	ldi	r19, 0xFF	; 255
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	57 e4       	ldi	r21, 0x47	; 71
    1178:	69 85       	ldd	r22, Y+9	; 0x09
    117a:	7a 85       	ldd	r23, Y+10	; 0x0a
    117c:	8b 85       	ldd	r24, Y+11	; 0x0b
    117e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1180:	b3 d2       	rcall	.+1382   	; 0x16e8 <__gesf2>
    1182:	18 16       	cp	r1, r24
    1184:	0c f0       	brlt	.+2      	; 0x1188 <Trigger_Ultrasonic_Sensor+0xa6>
    1186:	74 c0       	rjmp	.+232    	; 0x1270 <Trigger_Ultrasonic_Sensor+0x18e>
	{
		_delay_ms(__us / 1000.0);
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	4a e7       	ldi	r20, 0x7A	; 122
    118e:	54 e4       	ldi	r21, 0x44	; 68
    1190:	69 81       	ldd	r22, Y+1	; 0x01
    1192:	7a 81       	ldd	r23, Y+2	; 0x02
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	9e d1       	rcall	.+828    	; 0x14d6 <__divsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8e 87       	std	Y+14, r24	; 0x0e
    11a0:	9f 87       	std	Y+15, r25	; 0x0f
    11a2:	a8 8b       	std	Y+16, r26	; 0x10
    11a4:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	4a e7       	ldi	r20, 0x7A	; 122
    11ac:	53 e4       	ldi	r21, 0x43	; 67
    11ae:	6e 85       	ldd	r22, Y+14	; 0x0e
    11b0:	7f 85       	ldd	r23, Y+15	; 0x0f
    11b2:	88 89       	ldd	r24, Y+16	; 0x10
    11b4:	99 89       	ldd	r25, Y+17	; 0x11
    11b6:	9c d2       	rcall	.+1336   	; 0x16f0 <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	8a 8b       	std	Y+18, r24	; 0x12
    11be:	9b 8b       	std	Y+19, r25	; 0x13
    11c0:	ac 8b       	std	Y+20, r26	; 0x14
    11c2:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	6a 89       	ldd	r22, Y+18	; 0x12
    11ce:	7b 89       	ldd	r23, Y+19	; 0x13
    11d0:	8c 89       	ldd	r24, Y+20	; 0x14
    11d2:	9d 89       	ldd	r25, Y+21	; 0x15
    11d4:	7c d1       	rcall	.+760    	; 0x14ce <__cmpsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <Trigger_Ultrasonic_Sensor+0x102>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9f 8b       	std	Y+23, r25	; 0x17
    11e0:	8e 8b       	std	Y+22, r24	; 0x16
    11e2:	3b c0       	rjmp	.+118    	; 0x125a <Trigger_Ultrasonic_Sensor+0x178>
	else if (__tmp > 65535)
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	3f ef       	ldi	r19, 0xFF	; 255
    11e8:	4f e7       	ldi	r20, 0x7F	; 127
    11ea:	57 e4       	ldi	r21, 0x47	; 71
    11ec:	6a 89       	ldd	r22, Y+18	; 0x12
    11ee:	7b 89       	ldd	r23, Y+19	; 0x13
    11f0:	8c 89       	ldd	r24, Y+20	; 0x14
    11f2:	9d 89       	ldd	r25, Y+21	; 0x15
    11f4:	79 d2       	rcall	.+1266   	; 0x16e8 <__gesf2>
    11f6:	18 16       	cp	r1, r24
    11f8:	3c f5       	brge	.+78     	; 0x1248 <Trigger_Ultrasonic_Sensor+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e2       	ldi	r20, 0x20	; 32
    1200:	51 e4       	ldi	r21, 0x41	; 65
    1202:	6e 85       	ldd	r22, Y+14	; 0x0e
    1204:	7f 85       	ldd	r23, Y+15	; 0x0f
    1206:	88 89       	ldd	r24, Y+16	; 0x10
    1208:	99 89       	ldd	r25, Y+17	; 0x11
    120a:	72 d2       	rcall	.+1252   	; 0x16f0 <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	c8 d1       	rcall	.+912    	; 0x15a6 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	9f 8b       	std	Y+23, r25	; 0x17
    121c:	8e 8b       	std	Y+22, r24	; 0x16
    121e:	0f c0       	rjmp	.+30     	; 0x123e <Trigger_Ultrasonic_Sensor+0x15c>
    1220:	89 e1       	ldi	r24, 0x19	; 25
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	99 8f       	std	Y+25, r25	; 0x19
    1226:	88 8f       	std	Y+24, r24	; 0x18
    1228:	88 8d       	ldd	r24, Y+24	; 0x18
    122a:	99 8d       	ldd	r25, Y+25	; 0x19
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <Trigger_Ultrasonic_Sensor+0x14a>
    1230:	99 8f       	std	Y+25, r25	; 0x19
    1232:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	8e 89       	ldd	r24, Y+22	; 0x16
    1236:	9f 89       	ldd	r25, Y+23	; 0x17
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	9f 8b       	std	Y+23, r25	; 0x17
    123c:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	8e 89       	ldd	r24, Y+22	; 0x16
    1240:	9f 89       	ldd	r25, Y+23	; 0x17
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f7       	brne	.-38     	; 0x1220 <Trigger_Ultrasonic_Sensor+0x13e>
    1246:	3b c0       	rjmp	.+118    	; 0x12be <Trigger_Ultrasonic_Sensor+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	6a 89       	ldd	r22, Y+18	; 0x12
    124a:	7b 89       	ldd	r23, Y+19	; 0x13
    124c:	8c 89       	ldd	r24, Y+20	; 0x14
    124e:	9d 89       	ldd	r25, Y+21	; 0x15
    1250:	aa d1       	rcall	.+852    	; 0x15a6 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	9f 8b       	std	Y+23, r25	; 0x17
    1258:	8e 8b       	std	Y+22, r24	; 0x16
    125a:	8e 89       	ldd	r24, Y+22	; 0x16
    125c:	9f 89       	ldd	r25, Y+23	; 0x17
    125e:	9b 8f       	std	Y+27, r25	; 0x1b
    1260:	8a 8f       	std	Y+26, r24	; 0x1a
    1262:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1264:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <Trigger_Ultrasonic_Sensor+0x184>
    126a:	9b 8f       	std	Y+27, r25	; 0x1b
    126c:	8a 8f       	std	Y+26, r24	; 0x1a
    126e:	27 c0       	rjmp	.+78     	; 0x12be <Trigger_Ultrasonic_Sensor+0x1dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	53 e4       	ldi	r21, 0x43	; 67
    1278:	6d 81       	ldd	r22, Y+5	; 0x05
    127a:	7e 81       	ldd	r23, Y+6	; 0x06
    127c:	8f 81       	ldd	r24, Y+7	; 0x07
    127e:	98 85       	ldd	r25, Y+8	; 0x08
    1280:	33 d2       	rcall	.+1126   	; 0x16e8 <__gesf2>
    1282:	18 16       	cp	r1, r24
    1284:	a4 f4       	brge	.+40     	; 0x12ae <Trigger_Ultrasonic_Sensor+0x1cc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1286:	69 85       	ldd	r22, Y+9	; 0x09
    1288:	7a 85       	ldd	r23, Y+10	; 0x0a
    128a:	8b 85       	ldd	r24, Y+11	; 0x0b
    128c:	9c 85       	ldd	r25, Y+12	; 0x0c
    128e:	8b d1       	rcall	.+790    	; 0x15a6 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	9d 8f       	std	Y+29, r25	; 0x1d
    1296:	8c 8f       	std	Y+28, r24	; 0x1c
    1298:	8c 8d       	ldd	r24, Y+28	; 0x1c
    129a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    129c:	9f 8f       	std	Y+31, r25	; 0x1f
    129e:	8e 8f       	std	Y+30, r24	; 0x1e
    12a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <Trigger_Ultrasonic_Sensor+0x1c2>
    12a8:	9f 8f       	std	Y+31, r25	; 0x1f
    12aa:	8e 8f       	std	Y+30, r24	; 0x1e
    12ac:	0e c0       	rjmp	.+28     	; 0x12ca <Trigger_Ultrasonic_Sensor+0x1e8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12ae:	6d 81       	ldd	r22, Y+5	; 0x05
    12b0:	7e 81       	ldd	r23, Y+6	; 0x06
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	98 85       	ldd	r25, Y+8	; 0x08
    12b6:	77 d1       	rcall	.+750    	; 0x15a6 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8d 87       	std	Y+13, r24	; 0x0d
    12be:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c0:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12c2:	88 a1       	ldd	r24, Y+32	; 0x20
    12c4:	8a 95       	dec	r24
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <Trigger_Ultrasonic_Sensor+0x1e2>
    12c8:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(10);													// 10us Pulse as per datasheet of HC-SR04 Ultrasonic Sensor
	CLEARBIT(USS_TRIGGER_PORT, USS_TRIGGER_PIN);
    12ca:	88 e3       	ldi	r24, 0x38	; 56
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	28 e3       	ldi	r18, 0x38	; 56
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	2d 7f       	andi	r18, 0xFD	; 253
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
}
    12dc:	a0 96       	adiw	r28, 0x20	; 32
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <Init_Pir>:

void Init_Pir()
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PIR_INPUT_DIR_REG, PIR_INPUT_PIN);						// Set the pin direction as input
    12f6:	81 e3       	ldi	r24, 0x31	; 49
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	21 e3       	ldi	r18, 0x31	; 49
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	f9 01       	movw	r30, r18
    1300:	20 81       	ld	r18, Z
    1302:	27 7f       	andi	r18, 0xF7	; 247
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
	SETBIT(PIR_INPUT_PORT, PIR_INPUT_PIN);							// Setup the controllers internal Pull up resistor
    1308:	82 e3       	ldi	r24, 0x32	; 50
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	22 e3       	ldi	r18, 0x32	; 50
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	20 81       	ld	r18, Z
    1314:	28 60       	ori	r18, 0x08	; 8
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18

	MCUCR |= (1 << ISC11) | (1 << ISC10);
    131a:	85 e5       	ldi	r24, 0x55	; 85
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	25 e5       	ldi	r18, 0x55	; 85
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	f9 01       	movw	r30, r18
    1324:	20 81       	ld	r18, Z
    1326:	2c 60       	ori	r18, 0x0C	; 12
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
	GICR |= (1 << INT1);
    132c:	8b e5       	ldi	r24, 0x5B	; 91
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	2b e5       	ldi	r18, 0x5B	; 91
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	f9 01       	movw	r30, r18
    1336:	20 81       	ld	r18, Z
    1338:	20 68       	ori	r18, 0x80	; 128
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <Init_Ultrasonic_Sensor>:

void Init_Ultrasonic_Sensor()
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	USS_TRIGGER_DIR_REG |= (1 << USS_TRIGGER_PIN);					// Set the pin direction as output
    134c:	87 e3       	ldi	r24, 0x37	; 55
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	27 e3       	ldi	r18, 0x37	; 55
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	f9 01       	movw	r30, r18
    1356:	20 81       	ld	r18, Z
    1358:	22 60       	ori	r18, 0x02	; 2
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	USS_TRIGGER_PORT &= ~(1 << USS_TRIGGER_PIN);					// Initial state of trigger is LOW
    135e:	88 e3       	ldi	r24, 0x38	; 56
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	28 e3       	ldi	r18, 0x38	; 56
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	f9 01       	movw	r30, r18
    1368:	20 81       	ld	r18, Z
    136a:	2d 7f       	andi	r18, 0xFD	; 253
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18
	
	USS_ECHO_DIR_REG &= ~(1 << USS_ECHO_PIN);						// ECHO pin is set a s input
    1370:	81 e3       	ldi	r24, 0x31	; 49
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	21 e3       	ldi	r18, 0x31	; 49
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	2b 7f       	andi	r18, 0xFB	; 251
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
	USS_ECHO_PORT |= (1 << USS_ECHO_PIN);							// Keep ECHO pin pulled up
    1382:	82 e3       	ldi	r24, 0x32	; 50
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	22 e3       	ldi	r18, 0x32	; 50
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	f9 01       	movw	r30, r18
    138c:	20 81       	ld	r18, Z
    138e:	24 60       	ori	r18, 0x04	; 4
    1390:	fc 01       	movw	r30, r24
    1392:	20 83       	st	Z, r18
	
	/* Setup rising edge interrupt on the echo pin	*/	
	MCUCR |= (1 << ISC01) | (1 << ISC00);							// Set the interrupt to trigger at the rising edge.
    1394:	85 e5       	ldi	r24, 0x55	; 85
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	25 e5       	ldi	r18, 0x55	; 85
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	f9 01       	movw	r30, r18
    139e:	20 81       	ld	r18, Z
    13a0:	23 60       	ori	r18, 0x03	; 3
    13a2:	fc 01       	movw	r30, r24
    13a4:	20 83       	st	Z, r18
	GICR |= (1 << INT0);
    13a6:	8b e5       	ldi	r24, 0x5B	; 91
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	2b e5       	ldi	r18, 0x5B	; 91
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	f9 01       	movw	r30, r18
    13b0:	20 81       	ld	r18, Z
    13b2:	20 64       	ori	r18, 0x40	; 64
    13b4:	fc 01       	movw	r30, r24
    13b6:	20 83       	st	Z, r18
}
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <Get_Uss_Count>:
{
	CLEARBIT(PORTC, led_color);
}

uint16_t Get_Uss_Count()
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	// TODO: replace with a flag to check if the USS ECHO pulse has been received Speed can be 
	return UssPulseCount;
    13c6:	80 91 68 00 	lds	r24, 0x0068
    13ca:	90 91 69 00 	lds	r25, 0x0069
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <Init_Timer0>:


/* Timer 0 will be used to auto trigger the USS	@ periodic intervals	*/
void Init_Timer0()
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TOIE0);
    13dc:	89 e5       	ldi	r24, 0x59	; 89
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	29 e5       	ldi	r18, 0x59	; 89
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	f9 01       	movw	r30, r18
    13e6:	20 81       	ld	r18, Z
    13e8:	21 60       	ori	r18, 0x01	; 1
    13ea:	fc 01       	movw	r30, r24
    13ec:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS00);		// Start the timer	default 256us overflow rate @ 1MHZ.
    13ee:	83 e5       	ldi	r24, 0x53	; 83
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	23 e5       	ldi	r18, 0x53	; 83
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	f9 01       	movw	r30, r18
    13f8:	20 81       	ld	r18, Z
    13fa:	21 60       	ori	r18, 0x01	; 1
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <Init_Timer1>:

void Init_Timer1()
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    140e:	8c e4       	ldi	r24, 0x4C	; 76
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	fc 01       	movw	r30, r24
    1414:	11 82       	std	Z+1, r1	; 0x01
    1416:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE1);
    1418:	89 e5       	ldi	r24, 0x59	; 89
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	29 e5       	ldi	r18, 0x59	; 89
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	20 81       	ld	r18, Z
    1424:	24 60       	ori	r18, 0x04	; 4
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
}
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <Start_Timer1>:

void Start_Timer1()
{
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS10);		// No pre-scalar
    1438:	8e e4       	ldi	r24, 0x4E	; 78
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	2e e4       	ldi	r18, 0x4E	; 78
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	21 60       	ori	r18, 0x01	; 1
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
}
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	08 95       	ret

00001450 <Stop_Timer1>:

void Stop_Timer1()
{
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS10);
    1458:	8e e4       	ldi	r24, 0x4E	; 78
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	2e e4       	ldi	r18, 0x4E	; 78
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	f9 01       	movw	r30, r18
    1462:	20 81       	ld	r18, Z
    1464:	2e 7f       	andi	r18, 0xFE	; 254
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18
}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <Get_Pir_count>:

uint16_t Get_Pir_count()
{
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
	#if DEBUG_ON
	SendDebug("PIR@");
	USART_Transmit_dec(pir_trigger_count);
	#endif
	return pir_trigger_count;
    1478:	80 91 66 00 	lds	r24, 0x0066
    147c:	90 91 67 00 	lds	r25, 0x0067
}
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <Reset_Pir_count>:

void Reset_Pir_count()
{
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count = 0;
    148e:	10 92 67 00 	sts	0x0067, r1
    1492:	10 92 66 00 	sts	0x0066, r1
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <Init_Gpio>:
	
	return 0;
}

void Init_Gpio()
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	RELAY_PORT_DIR_REG |= (1 << RELAY_PIN);		// Set the relay pin as a output pin
    14a4:	87 e3       	ldi	r24, 0x37	; 55
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	27 e3       	ldi	r18, 0x37	; 55
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	21 60       	ori	r18, 0x01	; 1
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
	RELAY_PORT &= ~(1 << RELAY_PIN);			// Initialise relay in OFF state.
    14b6:	88 e3       	ldi	r24, 0x38	; 56
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	28 e3       	ldi	r18, 0x38	; 56
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	f9 01       	movw	r30, r18
    14c0:	20 81       	ld	r18, Z
    14c2:	2e 7f       	andi	r18, 0xFE	; 254
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
}
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <__cmpsf2>:
    14ce:	97 d0       	rcall	.+302    	; 0x15fe <__fp_cmp>
    14d0:	08 f4       	brcc	.+2      	; 0x14d4 <__cmpsf2+0x6>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	08 95       	ret

000014d6 <__divsf3>:
    14d6:	0c d0       	rcall	.+24     	; 0x14f0 <__divsf3x>
    14d8:	cd c0       	rjmp	.+410    	; 0x1674 <__fp_round>
    14da:	c5 d0       	rcall	.+394    	; 0x1666 <__fp_pscB>
    14dc:	40 f0       	brcs	.+16     	; 0x14ee <__divsf3+0x18>
    14de:	bc d0       	rcall	.+376    	; 0x1658 <__fp_pscA>
    14e0:	30 f0       	brcs	.+12     	; 0x14ee <__divsf3+0x18>
    14e2:	21 f4       	brne	.+8      	; 0x14ec <__divsf3+0x16>
    14e4:	5f 3f       	cpi	r21, 0xFF	; 255
    14e6:	19 f0       	breq	.+6      	; 0x14ee <__divsf3+0x18>
    14e8:	ae c0       	rjmp	.+348    	; 0x1646 <__fp_inf>
    14ea:	51 11       	cpse	r21, r1
    14ec:	f7 c0       	rjmp	.+494    	; 0x16dc <__fp_szero>
    14ee:	b1 c0       	rjmp	.+354    	; 0x1652 <__fp_nan>

000014f0 <__divsf3x>:
    14f0:	d2 d0       	rcall	.+420    	; 0x1696 <__fp_split3>
    14f2:	98 f3       	brcs	.-26     	; 0x14da <__divsf3+0x4>

000014f4 <__divsf3_pse>:
    14f4:	99 23       	and	r25, r25
    14f6:	c9 f3       	breq	.-14     	; 0x14ea <__divsf3+0x14>
    14f8:	55 23       	and	r21, r21
    14fa:	b1 f3       	breq	.-20     	; 0x14e8 <__divsf3+0x12>
    14fc:	95 1b       	sub	r25, r21
    14fe:	55 0b       	sbc	r21, r21
    1500:	bb 27       	eor	r27, r27
    1502:	aa 27       	eor	r26, r26
    1504:	62 17       	cp	r22, r18
    1506:	73 07       	cpc	r23, r19
    1508:	84 07       	cpc	r24, r20
    150a:	38 f0       	brcs	.+14     	; 0x151a <__divsf3_pse+0x26>
    150c:	9f 5f       	subi	r25, 0xFF	; 255
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	22 0f       	add	r18, r18
    1512:	33 1f       	adc	r19, r19
    1514:	44 1f       	adc	r20, r20
    1516:	aa 1f       	adc	r26, r26
    1518:	a9 f3       	breq	.-22     	; 0x1504 <__divsf3_pse+0x10>
    151a:	33 d0       	rcall	.+102    	; 0x1582 <__divsf3_pse+0x8e>
    151c:	0e 2e       	mov	r0, r30
    151e:	3a f0       	brmi	.+14     	; 0x152e <__divsf3_pse+0x3a>
    1520:	e0 e8       	ldi	r30, 0x80	; 128
    1522:	30 d0       	rcall	.+96     	; 0x1584 <__divsf3_pse+0x90>
    1524:	91 50       	subi	r25, 0x01	; 1
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	e6 95       	lsr	r30
    152a:	00 1c       	adc	r0, r0
    152c:	ca f7       	brpl	.-14     	; 0x1520 <__divsf3_pse+0x2c>
    152e:	29 d0       	rcall	.+82     	; 0x1582 <__divsf3_pse+0x8e>
    1530:	fe 2f       	mov	r31, r30
    1532:	27 d0       	rcall	.+78     	; 0x1582 <__divsf3_pse+0x8e>
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	bb 1f       	adc	r27, r27
    153c:	26 17       	cp	r18, r22
    153e:	37 07       	cpc	r19, r23
    1540:	48 07       	cpc	r20, r24
    1542:	ab 07       	cpc	r26, r27
    1544:	b0 e8       	ldi	r27, 0x80	; 128
    1546:	09 f0       	breq	.+2      	; 0x154a <__divsf3_pse+0x56>
    1548:	bb 0b       	sbc	r27, r27
    154a:	80 2d       	mov	r24, r0
    154c:	bf 01       	movw	r22, r30
    154e:	ff 27       	eor	r31, r31
    1550:	93 58       	subi	r25, 0x83	; 131
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	2a f0       	brmi	.+10     	; 0x1560 <__divsf3_pse+0x6c>
    1556:	9e 3f       	cpi	r25, 0xFE	; 254
    1558:	51 05       	cpc	r21, r1
    155a:	68 f0       	brcs	.+26     	; 0x1576 <__divsf3_pse+0x82>
    155c:	74 c0       	rjmp	.+232    	; 0x1646 <__fp_inf>
    155e:	be c0       	rjmp	.+380    	; 0x16dc <__fp_szero>
    1560:	5f 3f       	cpi	r21, 0xFF	; 255
    1562:	ec f3       	brlt	.-6      	; 0x155e <__divsf3_pse+0x6a>
    1564:	98 3e       	cpi	r25, 0xE8	; 232
    1566:	dc f3       	brlt	.-10     	; 0x155e <__divsf3_pse+0x6a>
    1568:	86 95       	lsr	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f7 95       	ror	r31
    1572:	9f 5f       	subi	r25, 0xFF	; 255
    1574:	c9 f7       	brne	.-14     	; 0x1568 <__divsf3_pse+0x74>
    1576:	88 0f       	add	r24, r24
    1578:	91 1d       	adc	r25, r1
    157a:	96 95       	lsr	r25
    157c:	87 95       	ror	r24
    157e:	97 f9       	bld	r25, 7
    1580:	08 95       	ret
    1582:	e1 e0       	ldi	r30, 0x01	; 1
    1584:	66 0f       	add	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	bb 1f       	adc	r27, r27
    158c:	62 17       	cp	r22, r18
    158e:	73 07       	cpc	r23, r19
    1590:	84 07       	cpc	r24, r20
    1592:	ba 07       	cpc	r27, r26
    1594:	20 f0       	brcs	.+8      	; 0x159e <__divsf3_pse+0xaa>
    1596:	62 1b       	sub	r22, r18
    1598:	73 0b       	sbc	r23, r19
    159a:	84 0b       	sbc	r24, r20
    159c:	ba 0b       	sbc	r27, r26
    159e:	ee 1f       	adc	r30, r30
    15a0:	88 f7       	brcc	.-30     	; 0x1584 <__divsf3_pse+0x90>
    15a2:	e0 95       	com	r30
    15a4:	08 95       	ret

000015a6 <__fixunssfsi>:
    15a6:	7f d0       	rcall	.+254    	; 0x16a6 <__fp_splitA>
    15a8:	88 f0       	brcs	.+34     	; 0x15cc <__fixunssfsi+0x26>
    15aa:	9f 57       	subi	r25, 0x7F	; 127
    15ac:	90 f0       	brcs	.+36     	; 0x15d2 <__fixunssfsi+0x2c>
    15ae:	b9 2f       	mov	r27, r25
    15b0:	99 27       	eor	r25, r25
    15b2:	b7 51       	subi	r27, 0x17	; 23
    15b4:	a0 f0       	brcs	.+40     	; 0x15de <__fixunssfsi+0x38>
    15b6:	d1 f0       	breq	.+52     	; 0x15ec <__fixunssfsi+0x46>
    15b8:	66 0f       	add	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	1a f0       	brmi	.+6      	; 0x15c8 <__fixunssfsi+0x22>
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__fixunssfsi+0x12>
    15c6:	12 c0       	rjmp	.+36     	; 0x15ec <__fixunssfsi+0x46>
    15c8:	b1 30       	cpi	r27, 0x01	; 1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <__fixunssfsi+0x46>
    15cc:	86 d0       	rcall	.+268    	; 0x16da <__fp_zero>
    15ce:	b1 e0       	ldi	r27, 0x01	; 1
    15d0:	08 95       	ret
    15d2:	83 c0       	rjmp	.+262    	; 0x16da <__fp_zero>
    15d4:	67 2f       	mov	r22, r23
    15d6:	78 2f       	mov	r23, r24
    15d8:	88 27       	eor	r24, r24
    15da:	b8 5f       	subi	r27, 0xF8	; 248
    15dc:	39 f0       	breq	.+14     	; 0x15ec <__fixunssfsi+0x46>
    15de:	b9 3f       	cpi	r27, 0xF9	; 249
    15e0:	cc f3       	brlt	.-14     	; 0x15d4 <__fixunssfsi+0x2e>
    15e2:	86 95       	lsr	r24
    15e4:	77 95       	ror	r23
    15e6:	67 95       	ror	r22
    15e8:	b3 95       	inc	r27
    15ea:	d9 f7       	brne	.-10     	; 0x15e2 <__fixunssfsi+0x3c>
    15ec:	3e f4       	brtc	.+14     	; 0x15fc <__fixunssfsi+0x56>
    15ee:	90 95       	com	r25
    15f0:	80 95       	com	r24
    15f2:	70 95       	com	r23
    15f4:	61 95       	neg	r22
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	08 95       	ret

000015fe <__fp_cmp>:
    15fe:	99 0f       	add	r25, r25
    1600:	00 08       	sbc	r0, r0
    1602:	55 0f       	add	r21, r21
    1604:	aa 0b       	sbc	r26, r26
    1606:	e0 e8       	ldi	r30, 0x80	; 128
    1608:	fe ef       	ldi	r31, 0xFE	; 254
    160a:	16 16       	cp	r1, r22
    160c:	17 06       	cpc	r1, r23
    160e:	e8 07       	cpc	r30, r24
    1610:	f9 07       	cpc	r31, r25
    1612:	c0 f0       	brcs	.+48     	; 0x1644 <__fp_cmp+0x46>
    1614:	12 16       	cp	r1, r18
    1616:	13 06       	cpc	r1, r19
    1618:	e4 07       	cpc	r30, r20
    161a:	f5 07       	cpc	r31, r21
    161c:	98 f0       	brcs	.+38     	; 0x1644 <__fp_cmp+0x46>
    161e:	62 1b       	sub	r22, r18
    1620:	73 0b       	sbc	r23, r19
    1622:	84 0b       	sbc	r24, r20
    1624:	95 0b       	sbc	r25, r21
    1626:	39 f4       	brne	.+14     	; 0x1636 <__fp_cmp+0x38>
    1628:	0a 26       	eor	r0, r26
    162a:	61 f0       	breq	.+24     	; 0x1644 <__fp_cmp+0x46>
    162c:	23 2b       	or	r18, r19
    162e:	24 2b       	or	r18, r20
    1630:	25 2b       	or	r18, r21
    1632:	21 f4       	brne	.+8      	; 0x163c <__fp_cmp+0x3e>
    1634:	08 95       	ret
    1636:	0a 26       	eor	r0, r26
    1638:	09 f4       	brne	.+2      	; 0x163c <__fp_cmp+0x3e>
    163a:	a1 40       	sbci	r26, 0x01	; 1
    163c:	a6 95       	lsr	r26
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	81 1d       	adc	r24, r1
    1642:	81 1d       	adc	r24, r1
    1644:	08 95       	ret

00001646 <__fp_inf>:
    1646:	97 f9       	bld	r25, 7
    1648:	9f 67       	ori	r25, 0x7F	; 127
    164a:	80 e8       	ldi	r24, 0x80	; 128
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	08 95       	ret

00001652 <__fp_nan>:
    1652:	9f ef       	ldi	r25, 0xFF	; 255
    1654:	80 ec       	ldi	r24, 0xC0	; 192
    1656:	08 95       	ret

00001658 <__fp_pscA>:
    1658:	00 24       	eor	r0, r0
    165a:	0a 94       	dec	r0
    165c:	16 16       	cp	r1, r22
    165e:	17 06       	cpc	r1, r23
    1660:	18 06       	cpc	r1, r24
    1662:	09 06       	cpc	r0, r25
    1664:	08 95       	ret

00001666 <__fp_pscB>:
    1666:	00 24       	eor	r0, r0
    1668:	0a 94       	dec	r0
    166a:	12 16       	cp	r1, r18
    166c:	13 06       	cpc	r1, r19
    166e:	14 06       	cpc	r1, r20
    1670:	05 06       	cpc	r0, r21
    1672:	08 95       	ret

00001674 <__fp_round>:
    1674:	09 2e       	mov	r0, r25
    1676:	03 94       	inc	r0
    1678:	00 0c       	add	r0, r0
    167a:	11 f4       	brne	.+4      	; 0x1680 <__fp_round+0xc>
    167c:	88 23       	and	r24, r24
    167e:	52 f0       	brmi	.+20     	; 0x1694 <__fp_round+0x20>
    1680:	bb 0f       	add	r27, r27
    1682:	40 f4       	brcc	.+16     	; 0x1694 <__fp_round+0x20>
    1684:	bf 2b       	or	r27, r31
    1686:	11 f4       	brne	.+4      	; 0x168c <__fp_round+0x18>
    1688:	60 ff       	sbrs	r22, 0
    168a:	04 c0       	rjmp	.+8      	; 0x1694 <__fp_round+0x20>
    168c:	6f 5f       	subi	r22, 0xFF	; 255
    168e:	7f 4f       	sbci	r23, 0xFF	; 255
    1690:	8f 4f       	sbci	r24, 0xFF	; 255
    1692:	9f 4f       	sbci	r25, 0xFF	; 255
    1694:	08 95       	ret

00001696 <__fp_split3>:
    1696:	57 fd       	sbrc	r21, 7
    1698:	90 58       	subi	r25, 0x80	; 128
    169a:	44 0f       	add	r20, r20
    169c:	55 1f       	adc	r21, r21
    169e:	59 f0       	breq	.+22     	; 0x16b6 <__fp_splitA+0x10>
    16a0:	5f 3f       	cpi	r21, 0xFF	; 255
    16a2:	71 f0       	breq	.+28     	; 0x16c0 <__fp_splitA+0x1a>
    16a4:	47 95       	ror	r20

000016a6 <__fp_splitA>:
    16a6:	88 0f       	add	r24, r24
    16a8:	97 fb       	bst	r25, 7
    16aa:	99 1f       	adc	r25, r25
    16ac:	61 f0       	breq	.+24     	; 0x16c6 <__fp_splitA+0x20>
    16ae:	9f 3f       	cpi	r25, 0xFF	; 255
    16b0:	79 f0       	breq	.+30     	; 0x16d0 <__fp_splitA+0x2a>
    16b2:	87 95       	ror	r24
    16b4:	08 95       	ret
    16b6:	12 16       	cp	r1, r18
    16b8:	13 06       	cpc	r1, r19
    16ba:	14 06       	cpc	r1, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	f2 cf       	rjmp	.-28     	; 0x16a4 <__fp_split3+0xe>
    16c0:	46 95       	lsr	r20
    16c2:	f1 df       	rcall	.-30     	; 0x16a6 <__fp_splitA>
    16c4:	08 c0       	rjmp	.+16     	; 0x16d6 <__fp_splitA+0x30>
    16c6:	16 16       	cp	r1, r22
    16c8:	17 06       	cpc	r1, r23
    16ca:	18 06       	cpc	r1, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	f1 cf       	rjmp	.-30     	; 0x16b2 <__fp_splitA+0xc>
    16d0:	86 95       	lsr	r24
    16d2:	71 05       	cpc	r23, r1
    16d4:	61 05       	cpc	r22, r1
    16d6:	08 94       	sec
    16d8:	08 95       	ret

000016da <__fp_zero>:
    16da:	e8 94       	clt

000016dc <__fp_szero>:
    16dc:	bb 27       	eor	r27, r27
    16de:	66 27       	eor	r22, r22
    16e0:	77 27       	eor	r23, r23
    16e2:	cb 01       	movw	r24, r22
    16e4:	97 f9       	bld	r25, 7
    16e6:	08 95       	ret

000016e8 <__gesf2>:
    16e8:	8a df       	rcall	.-236    	; 0x15fe <__fp_cmp>
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <__gesf2+0x6>
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	08 95       	ret

000016f0 <__mulsf3>:
    16f0:	0b d0       	rcall	.+22     	; 0x1708 <__mulsf3x>
    16f2:	c0 cf       	rjmp	.-128    	; 0x1674 <__fp_round>
    16f4:	b1 df       	rcall	.-158    	; 0x1658 <__fp_pscA>
    16f6:	28 f0       	brcs	.+10     	; 0x1702 <__mulsf3+0x12>
    16f8:	b6 df       	rcall	.-148    	; 0x1666 <__fp_pscB>
    16fa:	18 f0       	brcs	.+6      	; 0x1702 <__mulsf3+0x12>
    16fc:	95 23       	and	r25, r21
    16fe:	09 f0       	breq	.+2      	; 0x1702 <__mulsf3+0x12>
    1700:	a2 cf       	rjmp	.-188    	; 0x1646 <__fp_inf>
    1702:	a7 cf       	rjmp	.-178    	; 0x1652 <__fp_nan>
    1704:	11 24       	eor	r1, r1
    1706:	ea cf       	rjmp	.-44     	; 0x16dc <__fp_szero>

00001708 <__mulsf3x>:
    1708:	c6 df       	rcall	.-116    	; 0x1696 <__fp_split3>
    170a:	a0 f3       	brcs	.-24     	; 0x16f4 <__mulsf3+0x4>

0000170c <__mulsf3_pse>:
    170c:	95 9f       	mul	r25, r21
    170e:	d1 f3       	breq	.-12     	; 0x1704 <__mulsf3+0x14>
    1710:	95 0f       	add	r25, r21
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	55 1f       	adc	r21, r21
    1716:	62 9f       	mul	r22, r18
    1718:	f0 01       	movw	r30, r0
    171a:	72 9f       	mul	r23, r18
    171c:	bb 27       	eor	r27, r27
    171e:	f0 0d       	add	r31, r0
    1720:	b1 1d       	adc	r27, r1
    1722:	63 9f       	mul	r22, r19
    1724:	aa 27       	eor	r26, r26
    1726:	f0 0d       	add	r31, r0
    1728:	b1 1d       	adc	r27, r1
    172a:	aa 1f       	adc	r26, r26
    172c:	64 9f       	mul	r22, r20
    172e:	66 27       	eor	r22, r22
    1730:	b0 0d       	add	r27, r0
    1732:	a1 1d       	adc	r26, r1
    1734:	66 1f       	adc	r22, r22
    1736:	82 9f       	mul	r24, r18
    1738:	22 27       	eor	r18, r18
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	62 1f       	adc	r22, r18
    1740:	73 9f       	mul	r23, r19
    1742:	b0 0d       	add	r27, r0
    1744:	a1 1d       	adc	r26, r1
    1746:	62 1f       	adc	r22, r18
    1748:	83 9f       	mul	r24, r19
    174a:	a0 0d       	add	r26, r0
    174c:	61 1d       	adc	r22, r1
    174e:	22 1f       	adc	r18, r18
    1750:	74 9f       	mul	r23, r20
    1752:	33 27       	eor	r19, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	23 1f       	adc	r18, r19
    175a:	84 9f       	mul	r24, r20
    175c:	60 0d       	add	r22, r0
    175e:	21 1d       	adc	r18, r1
    1760:	82 2f       	mov	r24, r18
    1762:	76 2f       	mov	r23, r22
    1764:	6a 2f       	mov	r22, r26
    1766:	11 24       	eor	r1, r1
    1768:	9f 57       	subi	r25, 0x7F	; 127
    176a:	50 40       	sbci	r21, 0x00	; 0
    176c:	8a f0       	brmi	.+34     	; 0x1790 <__mulsf3_pse+0x84>
    176e:	e1 f0       	breq	.+56     	; 0x17a8 <__mulsf3_pse+0x9c>
    1770:	88 23       	and	r24, r24
    1772:	4a f0       	brmi	.+18     	; 0x1786 <__mulsf3_pse+0x7a>
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	bb 1f       	adc	r27, r27
    177a:	66 1f       	adc	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	91 50       	subi	r25, 0x01	; 1
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	a9 f7       	brne	.-22     	; 0x1770 <__mulsf3_pse+0x64>
    1786:	9e 3f       	cpi	r25, 0xFE	; 254
    1788:	51 05       	cpc	r21, r1
    178a:	70 f0       	brcs	.+28     	; 0x17a8 <__mulsf3_pse+0x9c>
    178c:	5c cf       	rjmp	.-328    	; 0x1646 <__fp_inf>
    178e:	a6 cf       	rjmp	.-180    	; 0x16dc <__fp_szero>
    1790:	5f 3f       	cpi	r21, 0xFF	; 255
    1792:	ec f3       	brlt	.-6      	; 0x178e <__mulsf3_pse+0x82>
    1794:	98 3e       	cpi	r25, 0xE8	; 232
    1796:	dc f3       	brlt	.-10     	; 0x178e <__mulsf3_pse+0x82>
    1798:	86 95       	lsr	r24
    179a:	77 95       	ror	r23
    179c:	67 95       	ror	r22
    179e:	b7 95       	ror	r27
    17a0:	f7 95       	ror	r31
    17a2:	e7 95       	ror	r30
    17a4:	9f 5f       	subi	r25, 0xFF	; 255
    17a6:	c1 f7       	brne	.-16     	; 0x1798 <__mulsf3_pse+0x8c>
    17a8:	fe 2b       	or	r31, r30
    17aa:	88 0f       	add	r24, r24
    17ac:	91 1d       	adc	r25, r1
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	97 f9       	bld	r25, 7
    17b4:	08 95       	ret

000017b6 <__divmodhi4>:
    17b6:	97 fb       	bst	r25, 7
    17b8:	07 2e       	mov	r0, r23
    17ba:	16 f4       	brtc	.+4      	; 0x17c0 <__divmodhi4+0xa>
    17bc:	00 94       	com	r0
    17be:	06 d0       	rcall	.+12     	; 0x17cc <__divmodhi4_neg1>
    17c0:	77 fd       	sbrc	r23, 7
    17c2:	08 d0       	rcall	.+16     	; 0x17d4 <__divmodhi4_neg2>
    17c4:	0b d0       	rcall	.+22     	; 0x17dc <__udivmodhi4>
    17c6:	07 fc       	sbrc	r0, 7
    17c8:	05 d0       	rcall	.+10     	; 0x17d4 <__divmodhi4_neg2>
    17ca:	3e f4       	brtc	.+14     	; 0x17da <__divmodhi4_exit>

000017cc <__divmodhi4_neg1>:
    17cc:	90 95       	com	r25
    17ce:	81 95       	neg	r24
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	08 95       	ret

000017d4 <__divmodhi4_neg2>:
    17d4:	70 95       	com	r23
    17d6:	61 95       	neg	r22
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255

000017da <__divmodhi4_exit>:
    17da:	08 95       	ret

000017dc <__udivmodhi4>:
    17dc:	aa 1b       	sub	r26, r26
    17de:	bb 1b       	sub	r27, r27
    17e0:	51 e1       	ldi	r21, 0x11	; 17
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <__udivmodhi4_ep>

000017e4 <__udivmodhi4_loop>:
    17e4:	aa 1f       	adc	r26, r26
    17e6:	bb 1f       	adc	r27, r27
    17e8:	a6 17       	cp	r26, r22
    17ea:	b7 07       	cpc	r27, r23
    17ec:	10 f0       	brcs	.+4      	; 0x17f2 <__udivmodhi4_ep>
    17ee:	a6 1b       	sub	r26, r22
    17f0:	b7 0b       	sbc	r27, r23

000017f2 <__udivmodhi4_ep>:
    17f2:	88 1f       	adc	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	5a 95       	dec	r21
    17f8:	a9 f7       	brne	.-22     	; 0x17e4 <__udivmodhi4_loop>
    17fa:	80 95       	com	r24
    17fc:	90 95       	com	r25
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	08 95       	ret

00001804 <_exit>:
    1804:	f8 94       	cli

00001806 <__stop_program>:
    1806:	ff cf       	rjmp	.-2      	; 0x1806 <__stop_program>
