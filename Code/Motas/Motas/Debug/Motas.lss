
Motas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000004f  00800060  00800060  0000039c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000160  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d96  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000704  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007e5  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000304  00000000  00000000  000021ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000446  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000534  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  00002e2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1c c1       	rjmp	.+568    	; 0x23c <__vector_1>
   4:	50 c1       	rjmp	.+672    	; 0x2a6 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	4e c0       	rjmp	.+156    	; 0xb4 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e2       	ldi	r30, 0x28	; 40
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 3a       	cpi	r26, 0xAF	; 175
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c4 d0       	rcall	.+392    	; 0x1e2 <main>
  5a:	64 c1       	rjmp	.+712    	; 0x324 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Atmega_init>:
#include "Atmega_Config.h"
#include "Peripheral_Drivers.h"

void Atmega_init()
{
	USART_Init();
  5e:	06 d0       	rcall	.+12     	; 0x6c <USART_Init>
	
#ifdef DEBUG_ON
	SendDebug("Serial OK!");
#endif // DEBUG_ON
	
	Init_Ultrasonic_Sensor();
  60:	0d d1       	rcall	.+538    	; 0x27c <Init_Ultrasonic_Sensor>
	Init_Pir();
  62:	03 d1       	rcall	.+518    	; 0x26a <Init_Pir>
	Init_Timer1();
  64:	15 d1       	rcall	.+554    	; 0x290 <Init_Timer1>
	Init_Gpio();
  66:	5b d1       	rcall	.+694    	; 0x31e <Init_Gpio>
	sei();
  68:	78 94       	sei
  6a:	08 95       	ret

0000006c <USART_Init>:
	temp1 = temp1 % 16;
	temp2 = temp2 / 16;
	dec_adc_value = (dec_adc_value + (temp2 * 16) + temp1);
	temp1 = dec_adc_value;
	USART_SendByte((dec_adc_value / 10000) | 0x30);
	dec_adc_value = temp1 % 10000;
  6c:	8c e0       	ldi	r24, 0x0C	; 12
  6e:	89 b9       	out	0x09, r24	; 9
  70:	10 bc       	out	0x20, r1	; 32
	USART_SendByte((dec_adc_value / 1000) | 0x30);
  72:	59 9a       	sbi	0x0b, 1	; 11
  74:	88 e9       	ldi	r24, 0x98	; 152
  76:	8a b9       	out	0x0a, r24	; 10
  78:	08 95       	ret

0000007a <USART_SendByte>:
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_SendByte>
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <Ring_Add>:
  82:	20 91 65 00 	lds	r18, 0x0065
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	2f 73       	andi	r18, 0x3F	; 63
  8e:	30 78       	andi	r19, 0x80	; 128
  90:	90 91 66 00 	lds	r25, 0x0066
	dec_adc_value = temp1 % 1000;
  94:	92 17       	cp	r25, r18
  96:	59 f0       	breq	.+22     	; 0xae <Ring_Add+0x2c>
  98:	e0 91 65 00 	lds	r30, 0x0065
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	e9 59       	subi	r30, 0x99	; 153
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	80 83       	st	Z, r24
  a4:	20 93 65 00 	sts	0x0065, r18
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	9f ef       	ldi	r25, 0xFF	; 255
  b2:	08 95       	ret

000000b4 <__vector_11>:
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	USART_SendByte((dec_adc_value /100) | 0x30);
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  d6:	8c b1       	in	r24, 0x0c	; 12
  d8:	d4 df       	rcall	.-88     	; 0x82 <Ring_Add>
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
	dec_adc_value = temp1 % 100;
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <Ring_Remove>:
  fc:	90 91 65 00 	lds	r25, 0x0065
 100:	80 91 66 00 	lds	r24, 0x0066
 104:	98 17       	cp	r25, r24
 106:	91 f0       	breq	.+36     	; 0x12c <Ring_Remove+0x30>
 108:	e0 91 66 00 	lds	r30, 0x0066
	USART_SendByte((dec_adc_value / 10) | 0x30);
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	e9 59       	subi	r30, 0x99	; 153
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	20 81       	ld	r18, Z
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	80 91 66 00 	lds	r24, 0x0066
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	8f 73       	andi	r24, 0x3F	; 63
 120:	90 78       	andi	r25, 0x80	; 128
	dec_adc_value = temp1 % 10;
 122:	80 93 66 00 	sts	0x0066, r24
 126:	82 2f       	mov	r24, r18
 128:	93 2f       	mov	r25, r19
 12a:	08 95       	ret
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	08 95       	ret

00000132 <Is_Buffer_Empty>:
 132:	20 91 65 00 	lds	r18, 0x0065
 136:	90 91 66 00 	lds	r25, 0x0066
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	29 13       	cpse	r18, r25
 13e:	01 c0       	rjmp	.+2      	; 0x142 <Is_Buffer_Empty+0x10>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <Dfplayer_Send>:
		command.tail = Ring_Remove();
	}
}

void Dfplayer_Send(command_t* strct_ptr)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	USART_SendByte(strct_ptr->header);
 14a:	88 81       	ld	r24, Y
 14c:	96 df       	rcall	.-212    	; 0x7a <USART_SendByte>
	USART_SendByte(strct_ptr->version);
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	94 df       	rcall	.-216    	; 0x7a <USART_SendByte>
	USART_SendByte(strct_ptr->lenght);
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	92 df       	rcall	.-220    	; 0x7a <USART_SendByte>
	USART_SendByte(strct_ptr->type);
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	90 df       	rcall	.-224    	; 0x7a <USART_SendByte>
	USART_SendByte(strct_ptr->feedback);
 15a:	8c 81       	ldd	r24, Y+4	; 0x04
 15c:	8e df       	rcall	.-228    	; 0x7a <USART_SendByte>
	USART_SendByte(strct_ptr->parah);
 15e:	8d 81       	ldd	r24, Y+5	; 0x05
 160:	8c df       	rcall	.-232    	; 0x7a <USART_SendByte>
	USART_SendByte(strct_ptr->paral);
 162:	8e 81       	ldd	r24, Y+6	; 0x06
 164:	8a df       	rcall	.-236    	; 0x7a <USART_SendByte>
	USART_SendByte(strct_ptr->tail);
 166:	8f 81       	ldd	r24, Y+7	; 0x07
 168:	88 df       	rcall	.-240    	; 0x7a <USART_SendByte>
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <Dfplayer_Cmd>:
{
	uint8_t cmd_lenght = 0x06;			// Currently all commands that'll be used have a lenght of 6. So this is fixed
	uint8_t tempholder = 0;

	/*	Create the CMD string	*/
	command.header = CMD_STRT_BYTE;
 170:	9e e7       	ldi	r25, 0x7E	; 126
 172:	90 93 a7 00 	sts	0x00A7, r25
	command.version = CMD_VER;
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	90 93 a8 00 	sts	0x00A8, r25
	command.lenght = cmd_lenght;
 17c:	96 e0       	ldi	r25, 0x06	; 6
 17e:	90 93 a9 00 	sts	0x00A9, r25
	command.type = cmd;
 182:	80 93 aa 00 	sts	0x00AA, r24
	command.feedback = CMD_RECV_NFB;
 186:	10 92 ab 00 	sts	0x00AB, r1
	command.parah = parameter / 256;
 18a:	70 93 ac 00 	sts	0x00AC, r23
	command.paral = parameter % 256;
 18e:	60 93 ad 00 	sts	0x00AD, r22
	command.tail = CMD_END_BYTE;
 192:	8f ee       	ldi	r24, 0xEF	; 239
 194:	80 93 ae 00 	sts	0x00AE, r24
	
	Dfplayer_Send(&command);
 198:	87 ea       	ldi	r24, 0xA7	; 167
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	d3 df       	rcall	.-90     	; 0x144 <Dfplayer_Send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	83 ec       	ldi	r24, 0xC3	; 195
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Dfplayer_Cmd+0x32>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Dfplayer_Cmd+0x38>
 1a8:	00 00       	nop

/*************************************************************************
*  If Commands are query based, a immediate response will be received
*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
 1aa:	c3 df       	rcall	.-122    	; 0x132 <Is_Buffer_Empty>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	c1 f4       	brne	.+48     	; 0x1e0 <Dfplayer_Cmd+0x70>
	{
		do{
			tempholder = Ring_Remove();
 1b0:	a5 df       	rcall	.-182    	; 0xfc <Ring_Remove>
		}while(tempholder != CMD_STRT_BYTE);
 1b2:	8e 37       	cpi	r24, 0x7E	; 126
 1b4:	e9 f7       	brne	.-6      	; 0x1b0 <Dfplayer_Cmd+0x40>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
 1b6:	a2 df       	rcall	.-188    	; 0xfc <Ring_Remove>
 1b8:	80 93 a8 00 	sts	0x00A8, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
 1bc:	9f df       	rcall	.-194    	; 0xfc <Ring_Remove>
 1be:	80 93 a9 00 	sts	0x00A9, r24
		command.type = Ring_Remove();
 1c2:	9c df       	rcall	.-200    	; 0xfc <Ring_Remove>
 1c4:	80 93 aa 00 	sts	0x00AA, r24
		command.feedback = Ring_Remove();
 1c8:	99 df       	rcall	.-206    	; 0xfc <Ring_Remove>
 1ca:	80 93 ab 00 	sts	0x00AB, r24
		command.parah = Ring_Remove();
 1ce:	96 df       	rcall	.-212    	; 0xfc <Ring_Remove>
 1d0:	80 93 ac 00 	sts	0x00AC, r24
		command.paral = Ring_Remove();
 1d4:	93 df       	rcall	.-218    	; 0xfc <Ring_Remove>
 1d6:	80 93 ad 00 	sts	0x00AD, r24
		command.tail = Ring_Remove();
 1da:	90 df       	rcall	.-224    	; 0xfc <Ring_Remove>
 1dc:	80 93 ae 00 	sts	0x00AE, r24
 1e0:	08 95       	ret

000001e2 <main>:
#include "Peripheral_Drivers.h"


int main(void)
{
	Atmega_init();
 1e2:	3d df       	rcall	.-390    	; 0x5e <Atmega_init>
 1e4:	2f e3       	ldi	r18, 0x3F	; 63
 1e6:	3d e0       	ldi	r19, 0x0D	; 13
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	30 40       	sbci	r19, 0x00	; 0
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x8>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x12>
 1f4:	00 00       	nop
		_delay_ms(1000);
		//Led_Off(AMBER_LED);
		//_delay_ms(1000);
		//Led_Off(YELLOW_LED);
		
		Dfplayer_Cmd(CMD_PLY_TRCK, 1);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	b9 df       	rcall	.-142    	; 0x170 <Dfplayer_Cmd>
 1fe:	9a e2       	ldi	r25, 0x2A	; 42
 200:	20 e5       	ldi	r18, 0x50	; 80
 202:	3e ef       	ldi	r19, 0xFE	; 254
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	91 50       	subi	r25, 0x01	; 1
 208:	20 40       	sbci	r18, 0x00	; 0
 20a:	30 40       	sbci	r19, 0x00	; 0
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	d9 f7       	brne	.-10     	; 0x206 <main+0x24>
 210:	00 00       	nop
		_delay_ms(100000);
		
		RELAY_ON;
 212:	c0 9a       	sbi	0x18, 0	; 24
 214:	9f eb       	ldi	r25, 0xBF	; 191
 216:	27 e2       	ldi	r18, 0x27	; 39
 218:	39 e0       	ldi	r19, 0x09	; 9
 21a:	91 50       	subi	r25, 0x01	; 1
 21c:	20 40       	sbci	r18, 0x00	; 0
 21e:	30 40       	sbci	r19, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x38>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x42>
 224:	00 00       	nop
		_delay_ms(3000);
		RELAY_OFF;
 226:	c0 98       	cbi	0x18, 0	; 24
 228:	8f eb       	ldi	r24, 0xBF	; 191
 22a:	97 e2       	ldi	r25, 0x27	; 39
 22c:	29 e0       	ldi	r18, 0x09	; 9
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x4c>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x56>
 238:	00 00       	nop
 23a:	d4 cf       	rjmp	.-88     	; 0x1e4 <main+0x2>

0000023c <__vector_1>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "Peripheral_Drivers.h"

ISR(PIR_INTERRUPT_VECT)
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
	pir_trigger_count++;
 24a:	80 91 63 00 	lds	r24, 0x0063
 24e:	90 91 64 00 	lds	r25, 0x0064
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 64 00 	sts	0x0064, r25
 258:	80 93 63 00 	sts	0x0063, r24
}
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <Init_Pir>:
	CLEARBIT(USS_PORT, USS_TRIGGER);
}

void Init_Pir()
{
	CLEARBIT(PIR_INPUT_DIR_REG, PIR_INPUT_PIN);						// Set the pin direction as input
 26a:	8a 98       	cbi	0x11, 2	; 17
	SETBIT(PIR_INPUT_PORT, PIR_INPUT_PIN);							// Setup the controllers internal Pull up resistor
 26c:	92 9a       	sbi	0x12, 2	; 18

	MCUCR |= (1 << ISC01) | (1 << ISC00);
 26e:	85 b7       	in	r24, 0x35	; 53
 270:	83 60       	ori	r24, 0x03	; 3
 272:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
 274:	8b b7       	in	r24, 0x3b	; 59
 276:	80 64       	ori	r24, 0x40	; 64
 278:	8b bf       	out	0x3b, r24	; 59
 27a:	08 95       	ret

0000027c <Init_Ultrasonic_Sensor>:
}

void Init_Ultrasonic_Sensor()
{
	SETBIT(USS_DIR_REG, USS_TRIGGER);								// Set the pin direction as output
 27c:	8c 9a       	sbi	0x11, 4	; 17
	CLEARBIT(USS_PORT, USS_TRIGGER);								// Initial state of trigger is LOW
 27e:	94 98       	cbi	0x12, 4	; 18
	SETBIT(USS_PORT, USS_ECHO);										// Activate pull-up on ECHO pin.
 280:	93 9a       	sbi	0x12, 3	; 18
	
	MCUCR |= (1 << ISC11) | (1 << ISC10);							// Set the interrupt to trigger at the rising edge.
 282:	85 b7       	in	r24, 0x35	; 53
 284:	8c 60       	ori	r24, 0x0C	; 12
 286:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);
 288:	8b b7       	in	r24, 0x3b	; 59
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	8b bf       	out	0x3b, r24	; 59
 28e:	08 95       	ret

00000290 <Init_Timer1>:
	return UssPulseCount;
}

void Init_Timer1()
{
	TCNT1 = 0;
 290:	1d bc       	out	0x2d, r1	; 45
 292:	1c bc       	out	0x2c, r1	; 44
 294:	08 95       	ret

00000296 <Start_Timer1>:
}

void Start_Timer1()
{
	TCCR1B |= (1 << CS10);		// No pre-scalar
 296:	8e b5       	in	r24, 0x2e	; 46
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	8e bd       	out	0x2e, r24	; 46
 29c:	08 95       	ret

0000029e <Stop_Timer1>:
}

void Stop_Timer1()
{
	TCCR1B &= ~(1 << CS10);
 29e:	8e b5       	in	r24, 0x2e	; 46
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	8e bd       	out	0x2e, r24	; 46
 2a4:	08 95       	ret

000002a6 <__vector_2>:
{
	pir_trigger_count++;
}

ISR(USS_INTERRUPT_VECT)				
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	static uint8_t UssEdgeCount = 0;
	if (UssEdgeCount)		
 2c8:	80 91 60 00 	lds	r24, 0x0060
 2cc:	88 23       	and	r24, r24
 2ce:	79 f0       	breq	.+30     	; 0x2ee <__vector_2+0x48>
	{
		Stop_Timer1();
 2d0:	e6 df       	rcall	.-52     	; 0x29e <Stop_Timer1>
		UssPulseCount = TCNT1;		// Store the time duration of the echo pulse.
 2d2:	8c b5       	in	r24, 0x2c	; 44
 2d4:	9d b5       	in	r25, 0x2d	; 45
 2d6:	90 93 62 00 	sts	0x0062, r25
 2da:	80 93 61 00 	sts	0x0061, r24
		TCNT1 = 0;
 2de:	1d bc       	out	0x2d, r1	; 45
 2e0:	1c bc       	out	0x2c, r1	; 44
		UssEdgeCount = 0;
 2e2:	10 92 60 00 	sts	0x0060, r1
		MCUCR |= (1 << ISC10);												// Rising edge will trigger the next interrupt
 2e6:	85 b7       	in	r24, 0x35	; 53
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	85 bf       	out	0x35, r24	; 53
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <__vector_2+0x56>
	}
	else 
	{
		Start_Timer1();
 2ee:	d3 df       	rcall	.-90     	; 0x296 <Start_Timer1>
		UssEdgeCount = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 60 00 	sts	0x0060, r24
		MCUCR &= ~(1 << ISC10);										// falling edge for INT0 enabled
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	8b 7f       	andi	r24, 0xFB	; 251
 2fa:	85 bf       	out	0x35, r24	; 53
	}
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <Init_Gpio>:
	return 0;
}

void Init_Gpio()
{
	RELAY_PORT_DIR_REG |= (1 << RELAY_PIN);		// Set the relay pin as a output pin
 31e:	b8 9a       	sbi	0x17, 0	; 23
	RELAY_PORT &= ~(1 << RELAY_PIN);			// Initialise relay in OFF state.
 320:	c0 98       	cbi	0x18, 0	; 24
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
