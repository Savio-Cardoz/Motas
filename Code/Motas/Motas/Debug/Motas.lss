
Motas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00001954  000019e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  008000c0  008000c0  00001a48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013fd  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c07  00000000  00000000  000037a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005cc  00000000  00000000  000043b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000689  00000000  00000000  0000497c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000afc  00000000  00000000  00005005  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00005b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	61 c8       	rjmp	.-3902   	; 0xfffff0c6 <__eeprom_end+0xff7ef0c6>
       4:	41 c8       	rjmp	.-3966   	; 0xfffff088 <__eeprom_end+0xff7ef088>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	34 c0       	rjmp	.+104    	; 0x80 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 e5       	ldi	r30, 0x54	; 84
      3a:	f9 e1       	ldi	r31, 0x19	; 25
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a0 3c       	cpi	r26, 0xC0	; 192
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	a0 ec       	ldi	r26, 0xC0	; 192
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a3 31       	cpi	r26, 0x13	; 19
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	df d3       	rcall	.+1982   	; 0x818 <main>
      5a:	7a cc       	rjmp	.-1804   	; 0xfffff950 <__eeprom_end+0xff7ef950>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Atmega_init>:
#include "Atmega_Config.h"
#include "Peripheral_Drivers.h"
#include "debug_func.h"

void Atmega_init()
{
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
      66:	40 d0       	rcall	.+128    	; 0xe8 <USART_Init>
	
#ifdef DEBUG_ON
	SendDebug("Serial OK!");
      68:	82 e6       	ldi	r24, 0x62	; 98
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	75 d0       	rcall	.+234    	; 0x158 <SendDebug>
#endif // DEBUG_ON
	
	Init_Ultrasonic_Sensor();
      6e:	bb d9       	rcall	.-3210   	; 0xfffff3e6 <__eeprom_end+0xff7ef3e6>
	Init_Pir();
      70:	8f d9       	rcall	.-3298   	; 0xfffff390 <__eeprom_end+0xff7ef390>
	Init_Timer1();
      72:	8b da       	rcall	.-2794   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
	Init_Gpio();
      74:	d4 da       	rcall	.-2648   	; 0xfffff61e <__eeprom_end+0xff7ef61e>
	DebugLedInit();
      76:	36 d2       	rcall	.+1132   	; 0x4e4 <DebugLedInit>
	sei();
      78:	78 94       	sei
      7a:	df 91       	pop	r29
      7c:	cf 91       	pop	r28
      7e:	08 95       	ret

00000080 <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Atmega_Uart.h"

ISR(USART_RXC_vect)		// USART interrupt service routine.
{
      80:	1f 92       	push	r1
      82:	0f 92       	push	r0
      84:	00 90 5f 00 	lds	r0, 0x005F
      88:	0f 92       	push	r0
      8a:	11 24       	eor	r1, r1
      8c:	2f 93       	push	r18
      8e:	3f 93       	push	r19
      90:	4f 93       	push	r20
      92:	5f 93       	push	r21
      94:	6f 93       	push	r22
      96:	7f 93       	push	r23
      98:	8f 93       	push	r24
      9a:	9f 93       	push	r25
      9c:	af 93       	push	r26
      9e:	bf 93       	push	r27
      a0:	ef 93       	push	r30
      a2:	ff 93       	push	r31
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	1f 92       	push	r1
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t err;
	err = Ring_Add(UDR);
      ae:	8c e2       	ldi	r24, 0x2C	; 44
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	80 81       	ld	r24, Z
      b6:	a7 d1       	rcall	.+846    	; 0x406 <Ring_Add>
      b8:	89 83       	std	Y+1, r24	; 0x01

	if (err = -1)
      ba:	8f ef       	ldi	r24, 0xFF	; 255
      bc:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Error Handling code here. We may need to think if we need error handling for this */
	}
}
      be:	0f 90       	pop	r0
      c0:	df 91       	pop	r29
      c2:	cf 91       	pop	r28
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	bf 91       	pop	r27
      ca:	af 91       	pop	r26
      cc:	9f 91       	pop	r25
      ce:	8f 91       	pop	r24
      d0:	7f 91       	pop	r23
      d2:	6f 91       	pop	r22
      d4:	5f 91       	pop	r21
      d6:	4f 91       	pop	r20
      d8:	3f 91       	pop	r19
      da:	2f 91       	pop	r18
      dc:	0f 90       	pop	r0
      de:	00 92 5f 00 	sts	0x005F, r0
      e2:	0f 90       	pop	r0
      e4:	1f 90       	pop	r1
      e6:	18 95       	reti

000000e8 <USART_Init>:
 
void USART_Init(void)
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
   UBRRL = BAUD_PRESCALE;// Load lower 8-bits into the low byte of the UBRR register
      f0:	89 e2       	ldi	r24, 0x29	; 41
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2c e0       	ldi	r18, 0x0C	; 12
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
   UBRRH = (BAUD_PRESCALE >> 8); 
      fa:	80 e4       	ldi	r24, 0x40	; 64
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	fc 01       	movw	r30, r24
     100:	10 82       	st	Z, r1
	 /* Load upper 8-bits into the high byte of the UBRR register
    Default frame format is 8 data bits, no parity, 1 stop bit
  to change use UCSRC, see AVR datasheet*/ 
	
	UCSRA |= (1 << U2X);
     102:	8b e2       	ldi	r24, 0x2B	; 43
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2b e2       	ldi	r18, 0x2B	; 43
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	22 60       	ori	r18, 0x02	; 2
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
  // Enable receiver and transmitter and receive complete interrupt 
  UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));
     114:	8a e2       	ldi	r24, 0x2A	; 42
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	28 e9       	ldi	r18, 0x98	; 152
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <USART_SendByte>:


void USART_SendByte(uint8_t u8Data)
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	1f 92       	push	r1
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	89 83       	std	Y+1, r24	; 0x01
  while((UCSRA &(1<<UDRE)) == 0);
     130:	00 00       	nop
     132:	8b e2       	ldi	r24, 0x2B	; 43
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	88 2f       	mov	r24, r24
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	80 72       	andi	r24, 0x20	; 32
     140:	99 27       	eor	r25, r25
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	b1 f3       	breq	.-20     	; 0x132 <USART_SendByte+0xe>
  UDR = u8Data;
     146:	8c e2       	ldi	r24, 0x2C	; 44
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	29 81       	ldd	r18, Y+1	; 0x01
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
}
     150:	0f 90       	pop	r0
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <SendDebug>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void SendDebug(char * StringPtr)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	00 d0       	rcall	.+0      	; 0x15e <SendDebug+0x6>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	9a 83       	std	Y+2, r25	; 0x02
     164:	89 83       	std	Y+1, r24	; 0x01
	while(*StringPtr != 0x00)
     166:	0a c0       	rjmp	.+20     	; 0x17c <SendDebug+0x24>
	{
		USART_SendByte(*StringPtr);
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	d9 df       	rcall	.-78     	; 0x124 <USART_SendByte>
		StringPtr++;
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	9a 83       	std	Y+2, r25	; 0x02
     17a:	89 83       	std	Y+1, r24	; 0x01
* @param none
* @date 29/05/2017
*/
void SendDebug(char * StringPtr)
{
	while(*StringPtr != 0x00)
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
     180:	fc 01       	movw	r30, r24
     182:	80 81       	ld	r24, Z
     184:	88 23       	and	r24, r24
     186:	81 f7       	brne	.-32     	; 0x168 <SendDebug+0x10>
	{
		USART_SendByte(*StringPtr);
		StringPtr++;
	}
	USART_SendByte(0x0D);
     188:	8d e0       	ldi	r24, 0x0D	; 13
     18a:	cc df       	rcall	.-104    	; 0x124 <USART_SendByte>
	USART_SendByte(0x0A);
     18c:	8a e0       	ldi	r24, 0x0A	; 10
     18e:	ca df       	rcall	.-108    	; 0x124 <USART_SendByte>
}
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <USART_Transmit_dec>:
  while(!(UCSRA & (1<<RXC)));
  return UDR;
}

void USART_Transmit_dec(unsigned int int_data)
{
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	28 97       	sbiw	r28, 0x08	; 8
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	98 87       	std	Y+8, r25	; 0x08
     1b0:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int temp1, temp2, dec_adc_value = 0;
     1b2:	1a 82       	std	Y+2, r1	; 0x02
     1b4:	19 82       	std	Y+1, r1	; 0x01
	
	temp1 = int_data % 4096;
     1b6:	8f 81       	ldd	r24, Y+7	; 0x07
     1b8:	98 85       	ldd	r25, Y+8	; 0x08
     1ba:	9f 70       	andi	r25, 0x0F	; 15
     1bc:	9c 83       	std	Y+4, r25	; 0x04
     1be:	8b 83       	std	Y+3, r24	; 0x03
	temp2 = int_data / 4096;
     1c0:	8f 81       	ldd	r24, Y+7	; 0x07
     1c2:	98 85       	ldd	r25, Y+8	; 0x08
     1c4:	89 2f       	mov	r24, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	82 95       	swap	r24
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	9e 83       	std	Y+6, r25	; 0x06
     1ce:	8d 83       	std	Y+5, r24	; 0x05
	dec_adc_value = dec_adc_value + (temp2 * 4096);
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	9e 81       	ldd	r25, Y+6	; 0x06
     1d4:	98 2f       	mov	r25, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	92 95       	swap	r25
     1da:	90 7f       	andi	r25, 0xF0	; 240
     1dc:	29 81       	ldd	r18, Y+1	; 0x01
     1de:	3a 81       	ldd	r19, Y+2	; 0x02
     1e0:	82 0f       	add	r24, r18
     1e2:	93 1f       	adc	r25, r19
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
	temp2 = temp1;
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	9e 83       	std	Y+6, r25	; 0x06
     1ee:	8d 83       	std	Y+5, r24	; 0x05
	temp1 = temp1 % 256;
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	9c 81       	ldd	r25, Y+4	; 0x04
     1f4:	99 27       	eor	r25, r25
     1f6:	9c 83       	std	Y+4, r25	; 0x04
     1f8:	8b 83       	std	Y+3, r24	; 0x03
	temp2 = temp2 / 256;
     1fa:	8d 81       	ldd	r24, Y+5	; 0x05
     1fc:	9e 81       	ldd	r25, Y+6	; 0x06
     1fe:	89 2f       	mov	r24, r25
     200:	99 27       	eor	r25, r25
     202:	9e 83       	std	Y+6, r25	; 0x06
     204:	8d 83       	std	Y+5, r24	; 0x05
	dec_adc_value = dec_adc_value + (temp2 * 256);
     206:	8d 81       	ldd	r24, Y+5	; 0x05
     208:	9e 81       	ldd	r25, Y+6	; 0x06
     20a:	98 2f       	mov	r25, r24
     20c:	88 27       	eor	r24, r24
     20e:	29 81       	ldd	r18, Y+1	; 0x01
     210:	3a 81       	ldd	r19, Y+2	; 0x02
     212:	82 0f       	add	r24, r18
     214:	93 1f       	adc	r25, r19
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	89 83       	std	Y+1, r24	; 0x01
	temp2 = temp1;
     21a:	8b 81       	ldd	r24, Y+3	; 0x03
     21c:	9c 81       	ldd	r25, Y+4	; 0x04
     21e:	9e 83       	std	Y+6, r25	; 0x06
     220:	8d 83       	std	Y+5, r24	; 0x05
	temp1 = temp1 % 16;
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	8f 70       	andi	r24, 0x0F	; 15
     228:	99 27       	eor	r25, r25
     22a:	9c 83       	std	Y+4, r25	; 0x04
     22c:	8b 83       	std	Y+3, r24	; 0x03
	temp2 = temp2 / 16;
     22e:	8d 81       	ldd	r24, Y+5	; 0x05
     230:	9e 81       	ldd	r25, Y+6	; 0x06
     232:	92 95       	swap	r25
     234:	82 95       	swap	r24
     236:	8f 70       	andi	r24, 0x0F	; 15
     238:	89 27       	eor	r24, r25
     23a:	9f 70       	andi	r25, 0x0F	; 15
     23c:	89 27       	eor	r24, r25
     23e:	9e 83       	std	Y+6, r25	; 0x06
     240:	8d 83       	std	Y+5, r24	; 0x05
	dec_adc_value = (dec_adc_value + (temp2 * 16) + temp1);
     242:	8d 81       	ldd	r24, Y+5	; 0x05
     244:	9e 81       	ldd	r25, Y+6	; 0x06
     246:	9c 01       	movw	r18, r24
     248:	22 95       	swap	r18
     24a:	32 95       	swap	r19
     24c:	30 7f       	andi	r19, 0xF0	; 240
     24e:	32 27       	eor	r19, r18
     250:	20 7f       	andi	r18, 0xF0	; 240
     252:	32 27       	eor	r19, r18
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	28 0f       	add	r18, r24
     25a:	39 1f       	adc	r19, r25
     25c:	8b 81       	ldd	r24, Y+3	; 0x03
     25e:	9c 81       	ldd	r25, Y+4	; 0x04
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	89 83       	std	Y+1, r24	; 0x01
	temp1 = dec_adc_value;
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	9a 81       	ldd	r25, Y+2	; 0x02
     26c:	9c 83       	std	Y+4, r25	; 0x04
     26e:	8b 83       	std	Y+3, r24	; 0x03
	USART_SendByte((dec_adc_value / 10000) | 0x30);
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	92 95       	swap	r25
     276:	82 95       	swap	r24
     278:	8f 70       	andi	r24, 0x0F	; 15
     27a:	89 27       	eor	r24, r25
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	89 27       	eor	r24, r25
     280:	9c 01       	movw	r18, r24
     282:	a7 e4       	ldi	r26, 0x47	; 71
     284:	b3 e0       	ldi	r27, 0x03	; 3
     286:	58 db       	rcall	.-2384   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     288:	96 95       	lsr	r25
     28a:	87 95       	ror	r24
     28c:	96 95       	lsr	r25
     28e:	87 95       	ror	r24
     290:	96 95       	lsr	r25
     292:	87 95       	ror	r24
     294:	80 63       	ori	r24, 0x30	; 48
     296:	46 df       	rcall	.-372    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 10000;
     298:	4b 81       	ldd	r20, Y+3	; 0x03
     29a:	5c 81       	ldd	r21, Y+4	; 0x04
     29c:	ca 01       	movw	r24, r20
     29e:	92 95       	swap	r25
     2a0:	82 95       	swap	r24
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	89 27       	eor	r24, r25
     2a6:	9f 70       	andi	r25, 0x0F	; 15
     2a8:	89 27       	eor	r24, r25
     2aa:	9c 01       	movw	r18, r24
     2ac:	a7 e4       	ldi	r26, 0x47	; 71
     2ae:	b3 e0       	ldi	r27, 0x03	; 3
     2b0:	43 db       	rcall	.-2426   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     2b2:	bc 01       	movw	r22, r24
     2b4:	76 95       	lsr	r23
     2b6:	67 95       	ror	r22
     2b8:	76 95       	lsr	r23
     2ba:	67 95       	ror	r22
     2bc:	76 95       	lsr	r23
     2be:	67 95       	ror	r22
     2c0:	20 e1       	ldi	r18, 0x10	; 16
     2c2:	37 e2       	ldi	r19, 0x27	; 39
     2c4:	62 9f       	mul	r22, r18
     2c6:	c0 01       	movw	r24, r0
     2c8:	63 9f       	mul	r22, r19
     2ca:	90 0d       	add	r25, r0
     2cc:	72 9f       	mul	r23, r18
     2ce:	90 0d       	add	r25, r0
     2d0:	11 24       	eor	r1, r1
     2d2:	9a 01       	movw	r18, r20
     2d4:	28 1b       	sub	r18, r24
     2d6:	39 0b       	sbc	r19, r25
     2d8:	c9 01       	movw	r24, r18
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte((dec_adc_value / 1000) | 0x30);
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	96 95       	lsr	r25
     2e4:	87 95       	ror	r24
     2e6:	96 95       	lsr	r25
     2e8:	87 95       	ror	r24
     2ea:	96 95       	lsr	r25
     2ec:	87 95       	ror	r24
     2ee:	9c 01       	movw	r18, r24
     2f0:	a5 ec       	ldi	r26, 0xC5	; 197
     2f2:	b0 e2       	ldi	r27, 0x20	; 32
     2f4:	21 db       	rcall	.-2494   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     2f6:	92 95       	swap	r25
     2f8:	82 95       	swap	r24
     2fa:	8f 70       	andi	r24, 0x0F	; 15
     2fc:	89 27       	eor	r24, r25
     2fe:	9f 70       	andi	r25, 0x0F	; 15
     300:	89 27       	eor	r24, r25
     302:	80 63       	ori	r24, 0x30	; 48
     304:	0f df       	rcall	.-482    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 1000;
     306:	4b 81       	ldd	r20, Y+3	; 0x03
     308:	5c 81       	ldd	r21, Y+4	; 0x04
     30a:	ca 01       	movw	r24, r20
     30c:	96 95       	lsr	r25
     30e:	87 95       	ror	r24
     310:	96 95       	lsr	r25
     312:	87 95       	ror	r24
     314:	96 95       	lsr	r25
     316:	87 95       	ror	r24
     318:	9c 01       	movw	r18, r24
     31a:	a5 ec       	ldi	r26, 0xC5	; 197
     31c:	b0 e2       	ldi	r27, 0x20	; 32
     31e:	0c db       	rcall	.-2536   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     320:	bc 01       	movw	r22, r24
     322:	72 95       	swap	r23
     324:	62 95       	swap	r22
     326:	6f 70       	andi	r22, 0x0F	; 15
     328:	67 27       	eor	r22, r23
     32a:	7f 70       	andi	r23, 0x0F	; 15
     32c:	67 27       	eor	r22, r23
     32e:	28 ee       	ldi	r18, 0xE8	; 232
     330:	33 e0       	ldi	r19, 0x03	; 3
     332:	62 9f       	mul	r22, r18
     334:	c0 01       	movw	r24, r0
     336:	63 9f       	mul	r22, r19
     338:	90 0d       	add	r25, r0
     33a:	72 9f       	mul	r23, r18
     33c:	90 0d       	add	r25, r0
     33e:	11 24       	eor	r1, r1
     340:	9a 01       	movw	r18, r20
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	c9 01       	movw	r24, r18
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte((dec_adc_value /100) | 0x30);
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	96 95       	lsr	r25
     352:	87 95       	ror	r24
     354:	96 95       	lsr	r25
     356:	87 95       	ror	r24
     358:	9c 01       	movw	r18, r24
     35a:	ab e7       	ldi	r26, 0x7B	; 123
     35c:	b4 e1       	ldi	r27, 0x14	; 20
     35e:	ec da       	rcall	.-2600   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     360:	96 95       	lsr	r25
     362:	87 95       	ror	r24
     364:	80 63       	ori	r24, 0x30	; 48
     366:	de de       	rcall	.-580    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 100;
     368:	4b 81       	ldd	r20, Y+3	; 0x03
     36a:	5c 81       	ldd	r21, Y+4	; 0x04
     36c:	ca 01       	movw	r24, r20
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	9c 01       	movw	r18, r24
     378:	ab e7       	ldi	r26, 0x7B	; 123
     37a:	b4 e1       	ldi	r27, 0x14	; 20
     37c:	dd da       	rcall	.-2630   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     37e:	9c 01       	movw	r18, r24
     380:	36 95       	lsr	r19
     382:	27 95       	ror	r18
     384:	64 e6       	ldi	r22, 0x64	; 100
     386:	62 9f       	mul	r22, r18
     388:	c0 01       	movw	r24, r0
     38a:	63 9f       	mul	r22, r19
     38c:	90 0d       	add	r25, r0
     38e:	11 24       	eor	r1, r1
     390:	9a 01       	movw	r18, r20
     392:	28 1b       	sub	r18, r24
     394:	39 0b       	sbc	r19, r25
     396:	c9 01       	movw	r24, r18
     398:	9a 83       	std	Y+2, r25	; 0x02
     39a:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte((dec_adc_value / 10) | 0x30);
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	9a 81       	ldd	r25, Y+2	; 0x02
     3a0:	9c 01       	movw	r18, r24
     3a2:	ad ec       	ldi	r26, 0xCD	; 205
     3a4:	bc ec       	ldi	r27, 0xCC	; 204
     3a6:	c8 da       	rcall	.-2672   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     3a8:	96 95       	lsr	r25
     3aa:	87 95       	ror	r24
     3ac:	96 95       	lsr	r25
     3ae:	87 95       	ror	r24
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	80 63       	ori	r24, 0x30	; 48
     3b6:	b6 de       	rcall	.-660    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 10;
     3b8:	4b 81       	ldd	r20, Y+3	; 0x03
     3ba:	5c 81       	ldd	r21, Y+4	; 0x04
     3bc:	9a 01       	movw	r18, r20
     3be:	ad ec       	ldi	r26, 0xCD	; 205
     3c0:	bc ec       	ldi	r27, 0xCC	; 204
     3c2:	ba da       	rcall	.-2700   	; 0xfffff938 <__eeprom_end+0xff7ef938>
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
     3cc:	96 95       	lsr	r25
     3ce:	87 95       	ror	r24
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	9c 01       	movw	r18, r24
     3d6:	22 0f       	add	r18, r18
     3d8:	33 1f       	adc	r19, r19
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	9a 01       	movw	r18, r20
     3e4:	28 1b       	sub	r18, r24
     3e6:	39 0b       	sbc	r19, r25
     3e8:	c9 01       	movw	r24, r18
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte(dec_adc_value | 0x30);
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	80 63       	ori	r24, 0x30	; 48
     3f2:	98 de       	rcall	.-720    	; 0x124 <USART_SendByte>
}
     3f4:	28 96       	adiw	r28, 0x08	; 8
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <Ring_Add>:

int Ring_Add(char c) {
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <Ring_Add+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	8a 83       	std	Y+2, r24	; 0x02
    ring_pos_t next_head = (ring_head + 1) % RING_SIZE;
     412:	80 91 c9 00 	lds	r24, 0x00C9
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	8f 73       	andi	r24, 0x3F	; 63
     41e:	90 78       	andi	r25, 0x80	; 128
     420:	99 23       	and	r25, r25
     422:	24 f4       	brge	.+8      	; 0x42c <Ring_Add+0x26>
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	80 6c       	ori	r24, 0xC0	; 192
     428:	9f 6f       	ori	r25, 0xFF	; 255
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	89 83       	std	Y+1, r24	; 0x01
    if (next_head != ring_tail) {
     42e:	80 91 ca 00 	lds	r24, 0x00CA
     432:	99 81       	ldd	r25, Y+1	; 0x01
     434:	98 17       	cp	r25, r24
     436:	79 f0       	breq	.+30     	; 0x456 <Ring_Add+0x50>
        /* there is room */
        ring_data[ring_head] = c;
     438:	80 91 c9 00 	lds	r24, 0x00C9
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	85 53       	subi	r24, 0x35	; 53
     442:	9f 4f       	sbci	r25, 0xFF	; 255
     444:	2a 81       	ldd	r18, Y+2	; 0x02
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
        ring_head = next_head;
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	80 93 c9 00 	sts	0x00C9, r24
        return 0;
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <Ring_Add+0x54>
    } else {
        /* no room left in the buffer */
        return -1;
     456:	8f ef       	ldi	r24, 0xFF	; 255
     458:	9f ef       	ldi	r25, 0xFF	; 255
    }
}
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <Ring_Remove>:

int Ring_Remove(void) {
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	00 d0       	rcall	.+0      	; 0x46a <Ring_Remove+0x6>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
    if (ring_head != ring_tail) {
     46e:	90 91 c9 00 	lds	r25, 0x00C9
     472:	80 91 ca 00 	lds	r24, 0x00CA
     476:	98 17       	cp	r25, r24
     478:	f1 f0       	breq	.+60     	; 0x4b6 <Ring_Remove+0x52>
        int c = ring_data[ring_tail];
     47a:	80 91 ca 00 	lds	r24, 0x00CA
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	85 53       	subi	r24, 0x35	; 53
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	89 83       	std	Y+1, r24	; 0x01
        ring_tail = (ring_tail + 1) % RING_SIZE;
     492:	80 91 ca 00 	lds	r24, 0x00CA
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	8f 73       	andi	r24, 0x3F	; 63
     49e:	90 78       	andi	r25, 0x80	; 128
     4a0:	99 23       	and	r25, r25
     4a2:	24 f4       	brge	.+8      	; 0x4ac <Ring_Remove+0x48>
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	80 6c       	ori	r24, 0xC0	; 192
     4a8:	9f 6f       	ori	r25, 0xFF	; 255
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	80 93 ca 00 	sts	0x00CA, r24
        return c;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <Ring_Remove+0x56>
    } else {
        return -1;
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	9f ef       	ldi	r25, 0xFF	; 255
    }
}
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <Is_Buffer_Empty>:

uint8_t Is_Buffer_Empty()
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	if(ring_head == ring_tail)
     4cc:	90 91 c9 00 	lds	r25, 0x00C9
     4d0:	80 91 ca 00 	lds	r24, 0x00CA
     4d4:	98 17       	cp	r25, r24
     4d6:	11 f4       	brne	.+4      	; 0x4dc <Is_Buffer_Empty+0x18>
		return BUFFER_EMPTY;	
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	01 c0       	rjmp	.+2      	; 0x4de <Is_Buffer_Empty+0x1a>
	else return BUFFER_NOT_EMPTY;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <DebugLedInit>:

#include <avr/io.h>
#include "debug_func.h"

void DebugLedInit()
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
	RED_LED_DIR_REG |= (1 << RED_LED);
     4ec:	84 e3       	ldi	r24, 0x34	; 52
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	24 e3       	ldi	r18, 0x34	; 52
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	21 60       	ori	r18, 0x01	; 1
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
	YELLOW_LED_DIR_REG |= (1 << YELLOW_LED);
     4fe:	84 e3       	ldi	r24, 0x34	; 52
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	24 e3       	ldi	r18, 0x34	; 52
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z
     50a:	22 60       	ori	r18, 0x02	; 2
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
	
	RED_LED_PORT &= ~(1 << RED_LED);
     510:	85 e3       	ldi	r24, 0x35	; 53
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	25 e3       	ldi	r18, 0x35	; 53
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	2e 7f       	andi	r18, 0xFE	; 254
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
	YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     522:	85 e3       	ldi	r24, 0x35	; 53
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	25 e3       	ldi	r18, 0x35	; 53
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	2d 7f       	andi	r18, 0xFD	; 253
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <DebugLedTransmit>:
		param led_colour:	LED_RED
							LED_YELLOW
							LED_ORANGE
*/
void DebugLedTransmit(debug_led_state_t led_state, debug_led_colour_t led_colour)
{
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <DebugLedTransmit+0x6>
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	6a 83       	std	Y+2, r22	; 0x02
	if(led_state == LED_ON)
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	a9 f5       	brne	.+106    	; 0x5b8 <DebugLedTransmit+0x7e>
	{
		switch(led_colour)
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	91 05       	cpc	r25, r1
     558:	39 f0       	breq	.+14     	; 0x568 <DebugLedTransmit+0x2e>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	91 05       	cpc	r25, r1
     55e:	c1 f0       	breq	.+48     	; 0x590 <DebugLedTransmit+0x56>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	59 f0       	breq	.+22     	; 0x57c <DebugLedTransmit+0x42>
     566:	5f c0       	rjmp	.+190    	; 0x626 <DebugLedTransmit+0xec>
		{
			case LED_RED:
				RED_LED_PORT |= (1 << RED_LED);
     568:	85 e3       	ldi	r24, 0x35	; 53
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	25 e3       	ldi	r18, 0x35	; 53
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	21 60       	ori	r18, 0x01	; 1
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
				break;
     57a:	1d c0       	rjmp	.+58     	; 0x5b6 <DebugLedTransmit+0x7c>
				
			case LED_YELLOW:
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     57c:	85 e3       	ldi	r24, 0x35	; 53
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	25 e3       	ldi	r18, 0x35	; 53
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	22 60       	ori	r18, 0x02	; 2
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
				break;
     58e:	13 c0       	rjmp	.+38     	; 0x5b6 <DebugLedTransmit+0x7c>
				
			case LED_ORANGE:
				RED_LED_PORT |= (1 << RED_LED);
     590:	85 e3       	ldi	r24, 0x35	; 53
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	25 e3       	ldi	r18, 0x35	; 53
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	21 60       	ori	r18, 0x01	; 1
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     5a2:	85 e3       	ldi	r24, 0x35	; 53
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	25 e3       	ldi	r18, 0x35	; 53
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	f9 01       	movw	r30, r18
     5ac:	20 81       	ld	r18, Z
     5ae:	22 60       	ori	r18, 0x02	; 2
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
				break;
     5b4:	00 00       	nop
     5b6:	37 c0       	rjmp	.+110    	; 0x626 <DebugLedTransmit+0xec>
		} 
	}
	else if(led_state == LED_OFF)
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	88 23       	and	r24, r24
     5bc:	a1 f5       	brne	.+104    	; 0x626 <DebugLedTransmit+0xec>
	{
		switch(led_colour)
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	88 2f       	mov	r24, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	82 30       	cpi	r24, 0x02	; 2
     5c6:	91 05       	cpc	r25, r1
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <DebugLedTransmit+0x9e>
     5ca:	83 30       	cpi	r24, 0x03	; 3
     5cc:	91 05       	cpc	r25, r1
     5ce:	c1 f0       	breq	.+48     	; 0x600 <DebugLedTransmit+0xc6>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 05       	cpc	r25, r1
     5d4:	59 f0       	breq	.+22     	; 0x5ec <DebugLedTransmit+0xb2>
     5d6:	27 c0       	rjmp	.+78     	; 0x626 <DebugLedTransmit+0xec>
		{
			case LED_RED:
			RED_LED_PORT &= ~(1 << RED_LED);
     5d8:	85 e3       	ldi	r24, 0x35	; 53
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	25 e3       	ldi	r18, 0x35	; 53
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	2e 7f       	andi	r18, 0xFE	; 254
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
			break;
     5ea:	1d c0       	rjmp	.+58     	; 0x626 <DebugLedTransmit+0xec>
		
			case LED_YELLOW:
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     5ec:	85 e3       	ldi	r24, 0x35	; 53
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	25 e3       	ldi	r18, 0x35	; 53
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	f9 01       	movw	r30, r18
     5f6:	20 81       	ld	r18, Z
     5f8:	2d 7f       	andi	r18, 0xFD	; 253
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
			break;
     5fe:	13 c0       	rjmp	.+38     	; 0x626 <DebugLedTransmit+0xec>
		
			case LED_ORANGE:
			RED_LED_PORT &= ~(1 << RED_LED);
     600:	85 e3       	ldi	r24, 0x35	; 53
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	25 e3       	ldi	r18, 0x35	; 53
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	f9 01       	movw	r30, r18
     60a:	20 81       	ld	r18, Z
     60c:	2e 7f       	andi	r18, 0xFE	; 254
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     612:	85 e3       	ldi	r24, 0x35	; 53
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	25 e3       	ldi	r18, 0x35	; 53
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	2d 7f       	andi	r18, 0xFD	; 253
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
			break;
     624:	00 00       	nop
		}
	}
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <Dfplayer_Cmd>:
	argument 1: Type of command. Refer Dfplayer.h for command name definitions
	argument 2: Parameter to the command         
	                                                            
************************************************************************/
void Dfplayer_Cmd(uint8_t cmd, uint16_t parameter)
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	63 97       	sbiw	r28, 0x13	; 19
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	89 8b       	std	Y+17, r24	; 0x11
     646:	7b 8b       	std	Y+19, r23	; 0x13
     648:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t cmd_lenght = 0x06;			// Currently all commands that'll be used have a lenght of 6. So this is fixed
     64a:	86 e0       	ldi	r24, 0x06	; 6
     64c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t tempholder = 0;
     64e:	1a 82       	std	Y+2, r1	; 0x02

	/*	Create the CMD string	*/
	command.header = CMD_STRT_BYTE;
     650:	8e e7       	ldi	r24, 0x7E	; 126
     652:	80 93 0b 01 	sts	0x010B, r24
	command.version = CMD_VER;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	80 93 0c 01 	sts	0x010C, r24
	command.lenght = cmd_lenght;
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	80 93 0d 01 	sts	0x010D, r24
	command.type = cmd;
     662:	89 89       	ldd	r24, Y+17	; 0x11
     664:	80 93 0e 01 	sts	0x010E, r24
	command.feedback = CMD_RECV_NFB;
     668:	10 92 0f 01 	sts	0x010F, r1
	command.parah = parameter / 256;
     66c:	8a 89       	ldd	r24, Y+18	; 0x12
     66e:	9b 89       	ldd	r25, Y+19	; 0x13
     670:	89 2f       	mov	r24, r25
     672:	99 27       	eor	r25, r25
     674:	80 93 10 01 	sts	0x0110, r24
	command.paral = parameter % 256;
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	80 93 11 01 	sts	0x0111, r24
	command.tail = CMD_END_BYTE;
     67e:	8f ee       	ldi	r24, 0xEF	; 239
     680:	80 93 12 01 	sts	0x0112, r24
	
	Dfplayer_Send(&command);
     684:	8b e0       	ldi	r24, 0x0B	; 11
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	93 d0       	rcall	.+294    	; 0x7b0 <Dfplayer_Send>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e2       	ldi	r26, 0x20	; 32
     690:	b1 e4       	ldi	r27, 0x41	; 65
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	ad 83       	std	Y+5, r26	; 0x05
     698:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	4a e7       	ldi	r20, 0x7A	; 122
     6a0:	53 e4       	ldi	r21, 0x43	; 67
     6a2:	6b 81       	ldd	r22, Y+3	; 0x03
     6a4:	7c 81       	ldd	r23, Y+4	; 0x04
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	9e 81       	ldd	r25, Y+6	; 0x06
     6aa:	e3 d8       	rcall	.-3642   	; 0xfffff872 <__eeprom_end+0xff7ef872>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	8f 83       	std	Y+7, r24	; 0x07
     6b2:	98 87       	std	Y+8, r25	; 0x08
     6b4:	a9 87       	std	Y+9, r26	; 0x09
     6b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e8       	ldi	r20, 0x80	; 128
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	6f 81       	ldd	r22, Y+7	; 0x07
     6c2:	78 85       	ldd	r23, Y+8	; 0x08
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c8:	c3 d7       	rcall	.+3974   	; 0x1650 <__cmpsf2>
     6ca:	88 23       	and	r24, r24
     6cc:	2c f4       	brge	.+10     	; 0x6d8 <Dfplayer_Cmd+0xa8>
		__ticks = 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9c 87       	std	Y+12, r25	; 0x0c
     6d4:	8b 87       	std	Y+11, r24	; 0x0b
     6d6:	3b c0       	rjmp	.+118    	; 0x74e <Dfplayer_Cmd+0x11e>
	else if (__tmp > 65535)
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	3f ef       	ldi	r19, 0xFF	; 255
     6dc:	4f e7       	ldi	r20, 0x7F	; 127
     6de:	57 e4       	ldi	r21, 0x47	; 71
     6e0:	6f 81       	ldd	r22, Y+7	; 0x07
     6e2:	78 85       	ldd	r23, Y+8	; 0x08
     6e4:	89 85       	ldd	r24, Y+9	; 0x09
     6e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e8:	c0 d8       	rcall	.-3712   	; 0xfffff86a <__eeprom_end+0xff7ef86a>
     6ea:	18 16       	cp	r1, r24
     6ec:	3c f5       	brge	.+78     	; 0x73c <Dfplayer_Cmd+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e2       	ldi	r20, 0x20	; 32
     6f4:	51 e4       	ldi	r21, 0x41	; 65
     6f6:	6b 81       	ldd	r22, Y+3	; 0x03
     6f8:	7c 81       	ldd	r23, Y+4	; 0x04
     6fa:	8d 81       	ldd	r24, Y+5	; 0x05
     6fc:	9e 81       	ldd	r25, Y+6	; 0x06
     6fe:	b9 d8       	rcall	.-3726   	; 0xfffff872 <__eeprom_end+0xff7ef872>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	bc 01       	movw	r22, r24
     706:	cd 01       	movw	r24, r26
     708:	0f d8       	rcall	.-4066   	; 0xfffff728 <__eeprom_end+0xff7ef728>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	9c 87       	std	Y+12, r25	; 0x0c
     710:	8b 87       	std	Y+11, r24	; 0x0b
     712:	0f c0       	rjmp	.+30     	; 0x732 <Dfplayer_Cmd+0x102>
     714:	89 e1       	ldi	r24, 0x19	; 25
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9e 87       	std	Y+14, r25	; 0x0e
     71a:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     71c:	8d 85       	ldd	r24, Y+13	; 0x0d
     71e:	9e 85       	ldd	r25, Y+14	; 0x0e
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <Dfplayer_Cmd+0xf0>
     724:	9e 87       	std	Y+14, r25	; 0x0e
     726:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	9c 87       	std	Y+12, r25	; 0x0c
     730:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     732:	8b 85       	ldd	r24, Y+11	; 0x0b
     734:	9c 85       	ldd	r25, Y+12	; 0x0c
     736:	00 97       	sbiw	r24, 0x00	; 0
     738:	69 f7       	brne	.-38     	; 0x714 <Dfplayer_Cmd+0xe4>
     73a:	13 c0       	rjmp	.+38     	; 0x762 <Dfplayer_Cmd+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     73c:	6f 81       	ldd	r22, Y+7	; 0x07
     73e:	78 85       	ldd	r23, Y+8	; 0x08
     740:	89 85       	ldd	r24, Y+9	; 0x09
     742:	9a 85       	ldd	r25, Y+10	; 0x0a
     744:	f1 d7       	rcall	.+4066   	; 0x1728 <__fixunssfsi>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	9c 87       	std	Y+12, r25	; 0x0c
     74c:	8b 87       	std	Y+11, r24	; 0x0b
     74e:	8b 85       	ldd	r24, Y+11	; 0x0b
     750:	9c 85       	ldd	r25, Y+12	; 0x0c
     752:	98 8b       	std	Y+16, r25	; 0x10
     754:	8f 87       	std	Y+15, r24	; 0x0f
     756:	8f 85       	ldd	r24, Y+15	; 0x0f
     758:	98 89       	ldd	r25, Y+16	; 0x10
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <Dfplayer_Cmd+0x12a>
     75e:	98 8b       	std	Y+16, r25	; 0x10
     760:	8f 87       	std	Y+15, r24	; 0x0f

/*************************************************************************
*  If Commands are query based, a immediate response will be received
*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
     762:	b0 de       	rcall	.-672    	; 0x4c4 <Is_Buffer_Empty>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	91 05       	cpc	r25, r1
     768:	d1 f4       	brne	.+52     	; 0x79e <Dfplayer_Cmd+0x16e>
	{
		do{
			tempholder = Ring_Remove();
     76a:	7c de       	rcall	.-776    	; 0x464 <Ring_Remove>
     76c:	8a 83       	std	Y+2, r24	; 0x02
		}while(tempholder != CMD_STRT_BYTE);
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	8e 37       	cpi	r24, 0x7E	; 126
     772:	d9 f7       	brne	.-10     	; 0x76a <Dfplayer_Cmd+0x13a>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
     774:	77 de       	rcall	.-786    	; 0x464 <Ring_Remove>
     776:	80 93 0c 01 	sts	0x010C, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
     77a:	74 de       	rcall	.-792    	; 0x464 <Ring_Remove>
     77c:	80 93 0d 01 	sts	0x010D, r24
		command.type = Ring_Remove();
     780:	71 de       	rcall	.-798    	; 0x464 <Ring_Remove>
     782:	80 93 0e 01 	sts	0x010E, r24
		command.feedback = Ring_Remove();
     786:	6e de       	rcall	.-804    	; 0x464 <Ring_Remove>
     788:	80 93 0f 01 	sts	0x010F, r24
		command.parah = Ring_Remove();
     78c:	6b de       	rcall	.-810    	; 0x464 <Ring_Remove>
     78e:	80 93 10 01 	sts	0x0110, r24
		command.paral = Ring_Remove();
     792:	68 de       	rcall	.-816    	; 0x464 <Ring_Remove>
     794:	80 93 11 01 	sts	0x0111, r24
		command.tail = Ring_Remove();
     798:	65 de       	rcall	.-822    	; 0x464 <Ring_Remove>
     79a:	80 93 12 01 	sts	0x0112, r24
	}
}
     79e:	63 96       	adiw	r28, 0x13	; 19
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <Dfplayer_Send>:

void Dfplayer_Send(command_t* strct_ptr)
{
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <Dfplayer_Send+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte(strct_ptr->header);
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	9a 81       	ldd	r25, Y+2	; 0x02
     7c2:	fc 01       	movw	r30, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	ae dc       	rcall	.-1700   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->version);
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	fc 01       	movw	r30, r24
     7ce:	81 81       	ldd	r24, Z+1	; 0x01
     7d0:	a9 dc       	rcall	.-1710   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->lenght);
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	fc 01       	movw	r30, r24
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	a4 dc       	rcall	.-1720   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->type);
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	fc 01       	movw	r30, r24
     7e2:	83 81       	ldd	r24, Z+3	; 0x03
     7e4:	9f dc       	rcall	.-1730   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->feedback);
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	fc 01       	movw	r30, r24
     7ec:	84 81       	ldd	r24, Z+4	; 0x04
     7ee:	9a dc       	rcall	.-1740   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->parah);
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	fc 01       	movw	r30, r24
     7f6:	85 81       	ldd	r24, Z+5	; 0x05
     7f8:	95 dc       	rcall	.-1750   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->paral);
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	fc 01       	movw	r30, r24
     800:	86 81       	ldd	r24, Z+6	; 0x06
     802:	90 dc       	rcall	.-1760   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->tail);
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	fc 01       	movw	r30, r24
     80a:	87 81       	ldd	r24, Z+7	; 0x07
     80c:	8b dc       	rcall	.-1770   	; 0x124 <USART_SendByte>
}
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <main>:
#include "debug_func.h"



int main(void)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
	Atmega_init();
     820:	1e dc       	rcall	.-1988   	; 0x5e <Atmega_init>
	SendDebug("initizd");
     822:	8d e6       	ldi	r24, 0x6D	; 109
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	98 dc       	rcall	.-1744   	; 0x158 <SendDebug>
	
    while(1)
    {
		MotasController();
     828:	07 d4       	rcall	.+2062   	; 0x1038 <MotasController>
    }
     82a:	fe cf       	rjmp	.-4      	; 0x828 <main+0x10>

0000082c <Init_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Init_State(void)
{
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
	//TODO: extern this flag. Please do not change the name
	if(True == flag_sd_card_empty_g)
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	81 70       	andi	r24, 0x01	; 1
     83e:	88 23       	and	r24, r24
     840:	21 f0       	breq	.+8      	; 0x84a <Init_State+0x1e>
	{
		#ifdef DEBUG_ON
			//TODO: Add a LED colour for information
		#endif

		motascontroller_state = MOTAS_DEBUGGING_STATE;	
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	80 93 c1 00 	sts	0x00C1, r24
     848:	03 c0       	rjmp	.+6      	; 0x850 <Init_State+0x24>
	}

	//TODO: Check if any additional condition is required for this transition
	/* No debugging required. Start calibration */
	else{	
		motascontroller_state = MOTAS_CALIBRATION_STATE;	
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 c1 00 	sts	0x00C1, r24
	}
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <Calibration_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Calibration_State(void)
{
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	2e 97       	sbiw	r28, 0x0e	; 14
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
	/* Update the value of threshold*/
	threshold_uss_count = Get_Uss_Count();
     86a:	fa d5       	rcall	.+3060   	; 0x1460 <Get_Uss_Count>
     86c:	90 93 c3 00 	sts	0x00C3, r25
     870:	80 93 c2 00 	sts	0x00C2, r24
	
	#if DEBUG_ON
	SendDebug("USS calib");
     874:	85 e7       	ldi	r24, 0x75	; 117
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	6f dc       	rcall	.-1826   	; 0x158 <SendDebug>
	USART_Transmit_dec(threshold_uss_count);
     87a:	80 91 c2 00 	lds	r24, 0x00C2
     87e:	90 91 c3 00 	lds	r25, 0x00C3
     882:	8b dc       	rcall	.-1770   	; 0x19a <USART_Transmit_dec>
	#endif
	/* Reset the PIR count*/
	Reset_Pir_count();
     884:	c1 d6       	rcall	.+3458   	; 0x1608 <Reset_Pir_count>
	
	#if DEBUG_ON
	/* Red led light for 1 second indicating calibration done and Motas entering the standy state */
	DebugLedTransmit(LED_ON ,LED_RED);
     886:	62 e0       	ldi	r22, 0x02	; 2
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	57 de       	rcall	.-850    	; 0x53a <DebugLedTransmit>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	aa e7       	ldi	r26, 0x7A	; 122
     892:	b4 e4       	ldi	r27, 0x44	; 68
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	9a 83       	std	Y+2, r25	; 0x02
     898:	ab 83       	std	Y+3, r26	; 0x03
     89a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	4a e7       	ldi	r20, 0x7A	; 122
     8a2:	53 e4       	ldi	r21, 0x43	; 67
     8a4:	69 81       	ldd	r22, Y+1	; 0x01
     8a6:	7a 81       	ldd	r23, Y+2	; 0x02
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	e2 d7       	rcall	.+4036   	; 0x1872 <__mulsf3>
     8ae:	dc 01       	movw	r26, r24
     8b0:	cb 01       	movw	r24, r22
     8b2:	8d 83       	std	Y+5, r24	; 0x05
     8b4:	9e 83       	std	Y+6, r25	; 0x06
     8b6:	af 83       	std	Y+7, r26	; 0x07
     8b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e8       	ldi	r20, 0x80	; 128
     8c0:	5f e3       	ldi	r21, 0x3F	; 63
     8c2:	6d 81       	ldd	r22, Y+5	; 0x05
     8c4:	7e 81       	ldd	r23, Y+6	; 0x06
     8c6:	8f 81       	ldd	r24, Y+7	; 0x07
     8c8:	98 85       	ldd	r25, Y+8	; 0x08
     8ca:	c2 d6       	rcall	.+3460   	; 0x1650 <__cmpsf2>
     8cc:	88 23       	and	r24, r24
     8ce:	2c f4       	brge	.+10     	; 0x8da <Calibration_State+0x84>
		__ticks = 1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9a 87       	std	Y+10, r25	; 0x0a
     8d6:	89 87       	std	Y+9, r24	; 0x09
     8d8:	3b c0       	rjmp	.+118    	; 0x950 <Calibration_State+0xfa>
	else if (__tmp > 65535)
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	3f ef       	ldi	r19, 0xFF	; 255
     8de:	4f e7       	ldi	r20, 0x7F	; 127
     8e0:	57 e4       	ldi	r21, 0x47	; 71
     8e2:	6d 81       	ldd	r22, Y+5	; 0x05
     8e4:	7e 81       	ldd	r23, Y+6	; 0x06
     8e6:	8f 81       	ldd	r24, Y+7	; 0x07
     8e8:	98 85       	ldd	r25, Y+8	; 0x08
     8ea:	bf d7       	rcall	.+3966   	; 0x186a <__gesf2>
     8ec:	18 16       	cp	r1, r24
     8ee:	3c f5       	brge	.+78     	; 0x93e <Calibration_State+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e2       	ldi	r20, 0x20	; 32
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	69 81       	ldd	r22, Y+1	; 0x01
     8fa:	7a 81       	ldd	r23, Y+2	; 0x02
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	9c 81       	ldd	r25, Y+4	; 0x04
     900:	b8 d7       	rcall	.+3952   	; 0x1872 <__mulsf3>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	bc 01       	movw	r22, r24
     908:	cd 01       	movw	r24, r26
     90a:	0e d7       	rcall	.+3612   	; 0x1728 <__fixunssfsi>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	9a 87       	std	Y+10, r25	; 0x0a
     912:	89 87       	std	Y+9, r24	; 0x09
     914:	0f c0       	rjmp	.+30     	; 0x934 <Calibration_State+0xde>
     916:	89 e1       	ldi	r24, 0x19	; 25
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	9c 87       	std	Y+12, r25	; 0x0c
     91c:	8b 87       	std	Y+11, r24	; 0x0b
     91e:	8b 85       	ldd	r24, Y+11	; 0x0b
     920:	9c 85       	ldd	r25, Y+12	; 0x0c
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	f1 f7       	brne	.-4      	; 0x922 <Calibration_State+0xcc>
     926:	9c 87       	std	Y+12, r25	; 0x0c
     928:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     92a:	89 85       	ldd	r24, Y+9	; 0x09
     92c:	9a 85       	ldd	r25, Y+10	; 0x0a
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	9a 87       	std	Y+10, r25	; 0x0a
     932:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     934:	89 85       	ldd	r24, Y+9	; 0x09
     936:	9a 85       	ldd	r25, Y+10	; 0x0a
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	69 f7       	brne	.-38     	; 0x916 <Calibration_State+0xc0>
     93c:	13 c0       	rjmp	.+38     	; 0x964 <Calibration_State+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93e:	6d 81       	ldd	r22, Y+5	; 0x05
     940:	7e 81       	ldd	r23, Y+6	; 0x06
     942:	8f 81       	ldd	r24, Y+7	; 0x07
     944:	98 85       	ldd	r25, Y+8	; 0x08
     946:	f0 d6       	rcall	.+3552   	; 0x1728 <__fixunssfsi>
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	9a 87       	std	Y+10, r25	; 0x0a
     94e:	89 87       	std	Y+9, r24	; 0x09
     950:	89 85       	ldd	r24, Y+9	; 0x09
     952:	9a 85       	ldd	r25, Y+10	; 0x0a
     954:	9e 87       	std	Y+14, r25	; 0x0e
     956:	8d 87       	std	Y+13, r24	; 0x0d
     958:	8d 85       	ldd	r24, Y+13	; 0x0d
     95a:	9e 85       	ldd	r25, Y+14	; 0x0e
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <Calibration_State+0x106>
     960:	9e 87       	std	Y+14, r25	; 0x0e
     962:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DebugLedTransmit(LED_OFF ,LED_RED);		/* Switch OFF the LED */
     964:	62 e0       	ldi	r22, 0x02	; 2
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	e8 dd       	rcall	.-1072   	; 0x53a <DebugLedTransmit>
	#endif
	
	/* Update state */
	motascontroller_state = MOTAS_STANDBY_STATE;
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	80 93 c1 00 	sts	0x00C1, r24
	
	#if DEBUG_ON
	SendDebug("calib done");
     970:	8f e7       	ldi	r24, 0x7F	; 127
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	f1 db       	rcall	.-2078   	; 0x158 <SendDebug>
	#endif
}
     976:	2e 96       	adiw	r28, 0x0e	; 14
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <Standby_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Standby_State(void)
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	62 97       	sbiw	r28, 0x12	; 18
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
	uint16_t standby_pircount = 0;
     99c:	1a 82       	std	Y+2, r1	; 0x02
     99e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t standby_usscount = 0; 
     9a0:	1c 82       	std	Y+4, r1	; 0x04
     9a2:	1b 82       	std	Y+3, r1	; 0x03

	/* Update the PIR and ultrasonic count */
	standby_pircount = Get_Pir_count();
     9a4:	1e d6       	rcall	.+3132   	; 0x15e2 <Get_Pir_count>
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
	standby_usscount = Get_Uss_Count(); 
     9aa:	5a d5       	rcall	.+2740   	; 0x1460 <Get_Uss_Count>
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	8b 83       	std	Y+3, r24	; 0x03

	/*Check if Ultrasonic or pir has triggered because customer entering the room */
	if((standby_usscount < threshold_uss_count) || (standby_pircount > 1))
     9b0:	80 91 c2 00 	lds	r24, 0x00C2
     9b4:	90 91 c3 00 	lds	r25, 0x00C3
     9b8:	2b 81       	ldd	r18, Y+3	; 0x03
     9ba:	3c 81       	ldd	r19, Y+4	; 0x04
     9bc:	28 17       	cp	r18, r24
     9be:	39 07       	cpc	r19, r25
     9c0:	30 f0       	brcs	.+12     	; 0x9ce <Standby_State+0x46>
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	91 05       	cpc	r25, r1
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <Standby_State+0x46>
     9cc:	82 c0       	rjmp	.+260    	; 0xad2 <Standby_State+0x14a>
	{
		/* Clear the standby pir count */
		standby_pircount = 0;
     9ce:	1a 82       	std	Y+2, r1	; 0x02
     9d0:	19 82       	std	Y+1, r1	; 0x01
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e8       	ldi	r25, 0x80	; 128
     9d6:	ab e3       	ldi	r26, 0x3B	; 59
     9d8:	b5 e4       	ldi	r27, 0x45	; 69
     9da:	8d 83       	std	Y+5, r24	; 0x05
     9dc:	9e 83       	std	Y+6, r25	; 0x06
     9de:	af 83       	std	Y+7, r26	; 0x07
     9e0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	4a e7       	ldi	r20, 0x7A	; 122
     9e8:	53 e4       	ldi	r21, 0x43	; 67
     9ea:	6d 81       	ldd	r22, Y+5	; 0x05
     9ec:	7e 81       	ldd	r23, Y+6	; 0x06
     9ee:	8f 81       	ldd	r24, Y+7	; 0x07
     9f0:	98 85       	ldd	r25, Y+8	; 0x08
     9f2:	3f d7       	rcall	.+3710   	; 0x1872 <__mulsf3>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	89 87       	std	Y+9, r24	; 0x09
     9fa:	9a 87       	std	Y+10, r25	; 0x0a
     9fc:	ab 87       	std	Y+11, r26	; 0x0b
     9fe:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e8       	ldi	r20, 0x80	; 128
     a06:	5f e3       	ldi	r21, 0x3F	; 63
     a08:	69 85       	ldd	r22, Y+9	; 0x09
     a0a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a10:	1f d6       	rcall	.+3134   	; 0x1650 <__cmpsf2>
     a12:	88 23       	and	r24, r24
     a14:	2c f4       	brge	.+10     	; 0xa20 <Standby_State+0x98>
		__ticks = 1;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9e 87       	std	Y+14, r25	; 0x0e
     a1c:	8d 87       	std	Y+13, r24	; 0x0d
     a1e:	3b c0       	rjmp	.+118    	; 0xa96 <Standby_State+0x10e>
	else if (__tmp > 65535)
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	3f ef       	ldi	r19, 0xFF	; 255
     a24:	4f e7       	ldi	r20, 0x7F	; 127
     a26:	57 e4       	ldi	r21, 0x47	; 71
     a28:	69 85       	ldd	r22, Y+9	; 0x09
     a2a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a2c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a2e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a30:	1c d7       	rcall	.+3640   	; 0x186a <__gesf2>
     a32:	18 16       	cp	r1, r24
     a34:	3c f5       	brge	.+78     	; 0xa84 <Standby_State+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e2       	ldi	r20, 0x20	; 32
     a3c:	51 e4       	ldi	r21, 0x41	; 65
     a3e:	6d 81       	ldd	r22, Y+5	; 0x05
     a40:	7e 81       	ldd	r23, Y+6	; 0x06
     a42:	8f 81       	ldd	r24, Y+7	; 0x07
     a44:	98 85       	ldd	r25, Y+8	; 0x08
     a46:	15 d7       	rcall	.+3626   	; 0x1872 <__mulsf3>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	6b d6       	rcall	.+3286   	; 0x1728 <__fixunssfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	9e 87       	std	Y+14, r25	; 0x0e
     a58:	8d 87       	std	Y+13, r24	; 0x0d
     a5a:	0f c0       	rjmp	.+30     	; 0xa7a <Standby_State+0xf2>
     a5c:	89 e1       	ldi	r24, 0x19	; 25
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	98 8b       	std	Y+16, r25	; 0x10
     a62:	8f 87       	std	Y+15, r24	; 0x0f
     a64:	8f 85       	ldd	r24, Y+15	; 0x0f
     a66:	98 89       	ldd	r25, Y+16	; 0x10
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <Standby_State+0xe0>
     a6c:	98 8b       	std	Y+16, r25	; 0x10
     a6e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a70:	8d 85       	ldd	r24, Y+13	; 0x0d
     a72:	9e 85       	ldd	r25, Y+14	; 0x0e
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	9e 87       	std	Y+14, r25	; 0x0e
     a78:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	69 f7       	brne	.-38     	; 0xa5c <Standby_State+0xd4>
     a82:	13 c0       	rjmp	.+38     	; 0xaaa <Standby_State+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a84:	69 85       	ldd	r22, Y+9	; 0x09
     a86:	7a 85       	ldd	r23, Y+10	; 0x0a
     a88:	8b 85       	ldd	r24, Y+11	; 0x0b
     a8a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a8c:	4d d6       	rcall	.+3226   	; 0x1728 <__fixunssfsi>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	9e 87       	std	Y+14, r25	; 0x0e
     a94:	8d 87       	std	Y+13, r24	; 0x0d
     a96:	8d 85       	ldd	r24, Y+13	; 0x0d
     a98:	9e 85       	ldd	r25, Y+14	; 0x0e
     a9a:	9a 8b       	std	Y+18, r25	; 0x12
     a9c:	89 8b       	std	Y+17, r24	; 0x11
     a9e:	89 89       	ldd	r24, Y+17	; 0x11
     aa0:	9a 89       	ldd	r25, Y+18	; 0x12
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <Standby_State+0x11a>
     aa6:	9a 8b       	std	Y+18, r25	; 0x12
     aa8:	89 8b       	std	Y+17, r24	; 0x11
		
		/* Delay of 3 seconds to let the pir count increment */
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();
     aaa:	9b d5       	rcall	.+2870   	; 0x15e2 <Get_Pir_count>
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     ab0:	80 91 60 00 	lds	r24, 0x0060
     ab4:	90 91 61 00 	lds	r25, 0x0061
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	3a 81       	ldd	r19, Y+2	; 0x02
     abc:	82 17       	cp	r24, r18
     abe:	93 07       	cpc	r25, r19
     ac0:	20 f4       	brcc	.+8      	; 0xaca <Standby_State+0x142>
		{
			motascontroller_state = MOTAS_ACTIVE_STATE;
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	80 93 c1 00 	sts	0x00C1, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     ac8:	07 c0       	rjmp	.+14     	; 0xad8 <Standby_State+0x150>
			motascontroller_state = MOTAS_ACTIVE_STATE;
		}
		/* Do nothing and stay in the current state */
		else 
		{
			motascontroller_state = MOTAS_STANDBY_STATE;
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	80 93 c1 00 	sts	0x00C1, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <Standby_State+0x150>
		}
	}
	/* Do nothing and stay in the current state */
	else
	{
		motascontroller_state = MOTAS_STANDBY_STATE;
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	80 93 c1 00 	sts	0x00C1, r24
	}
}
     ad8:	62 96       	adiw	r28, 0x12	; 18
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <Active_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Active_State(void)
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	a0 97       	sbiw	r28, 0x20	; 32
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
	uint16_t active_pir_count = 0;
     afe:	1a 82       	std	Y+2, r1	; 0x02
     b00:	19 82       	std	Y+1, r1	; 0x01
	uint16_t active_usscount = 0; 
     b02:	1c 82       	std	Y+4, r1	; 0x04
     b04:	1b 82       	std	Y+3, r1	; 0x03
	
	/* Play music */
	if(False == flag_player_status_g)
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	82 70       	andi	r24, 0x02	; 2
     b10:	88 23       	and	r24, r24
     b12:	59 f4       	brne	.+22     	; 0xb2a <Active_State+0x40>
	{
		/* Change the status of music player to playing */
		flag_player_status_g = True;
     b14:	80 ec       	ldi	r24, 0xC0	; 192
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	fc 01       	movw	r30, r24
     b1a:	20 81       	ld	r18, Z
     b1c:	22 60       	ori	r18, 0x02	; 2
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
		/* Play the first track */
		Dfplayer_Cmd(CMD_PLY_TRCK, 1);
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	83 dd       	rcall	.-1274   	; 0x630 <Dfplayer_Cmd>
	{
		/* Do nothing */
	}

	/* Orange led light for 1 second indicating in the standy state */
	DebugLedTransmit(LED_ON ,LED_ORANGE);
     b2a:	63 e0       	ldi	r22, 0x03	; 3
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	05 dd       	rcall	.-1526   	; 0x53a <DebugLedTransmit>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	aa e7       	ldi	r26, 0x7A	; 122
     b36:	b4 e4       	ldi	r27, 0x44	; 68
     b38:	8d 83       	std	Y+5, r24	; 0x05
     b3a:	9e 83       	std	Y+6, r25	; 0x06
     b3c:	af 83       	std	Y+7, r26	; 0x07
     b3e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	4a e7       	ldi	r20, 0x7A	; 122
     b46:	53 e4       	ldi	r21, 0x43	; 67
     b48:	6d 81       	ldd	r22, Y+5	; 0x05
     b4a:	7e 81       	ldd	r23, Y+6	; 0x06
     b4c:	8f 81       	ldd	r24, Y+7	; 0x07
     b4e:	98 85       	ldd	r25, Y+8	; 0x08
     b50:	90 d6       	rcall	.+3360   	; 0x1872 <__mulsf3>
     b52:	dc 01       	movw	r26, r24
     b54:	cb 01       	movw	r24, r22
     b56:	89 87       	std	Y+9, r24	; 0x09
     b58:	9a 87       	std	Y+10, r25	; 0x0a
     b5a:	ab 87       	std	Y+11, r26	; 0x0b
     b5c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e8       	ldi	r20, 0x80	; 128
     b64:	5f e3       	ldi	r21, 0x3F	; 63
     b66:	69 85       	ldd	r22, Y+9	; 0x09
     b68:	7a 85       	ldd	r23, Y+10	; 0x0a
     b6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b6e:	70 d5       	rcall	.+2784   	; 0x1650 <__cmpsf2>
     b70:	88 23       	and	r24, r24
     b72:	2c f4       	brge	.+10     	; 0xb7e <Active_State+0x94>
		__ticks = 1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	9e 87       	std	Y+14, r25	; 0x0e
     b7a:	8d 87       	std	Y+13, r24	; 0x0d
     b7c:	3b c0       	rjmp	.+118    	; 0xbf4 <Active_State+0x10a>
	else if (__tmp > 65535)
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	3f ef       	ldi	r19, 0xFF	; 255
     b82:	4f e7       	ldi	r20, 0x7F	; 127
     b84:	57 e4       	ldi	r21, 0x47	; 71
     b86:	69 85       	ldd	r22, Y+9	; 0x09
     b88:	7a 85       	ldd	r23, Y+10	; 0x0a
     b8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b8e:	6d d6       	rcall	.+3290   	; 0x186a <__gesf2>
     b90:	18 16       	cp	r1, r24
     b92:	3c f5       	brge	.+78     	; 0xbe2 <Active_State+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	40 e2       	ldi	r20, 0x20	; 32
     b9a:	51 e4       	ldi	r21, 0x41	; 65
     b9c:	6d 81       	ldd	r22, Y+5	; 0x05
     b9e:	7e 81       	ldd	r23, Y+6	; 0x06
     ba0:	8f 81       	ldd	r24, Y+7	; 0x07
     ba2:	98 85       	ldd	r25, Y+8	; 0x08
     ba4:	66 d6       	rcall	.+3276   	; 0x1872 <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	bc 01       	movw	r22, r24
     bac:	cd 01       	movw	r24, r26
     bae:	bc d5       	rcall	.+2936   	; 0x1728 <__fixunssfsi>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	9e 87       	std	Y+14, r25	; 0x0e
     bb6:	8d 87       	std	Y+13, r24	; 0x0d
     bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <Active_State+0xee>
     bba:	89 e1       	ldi	r24, 0x19	; 25
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	98 8b       	std	Y+16, r25	; 0x10
     bc0:	8f 87       	std	Y+15, r24	; 0x0f
     bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc4:	98 89       	ldd	r25, Y+16	; 0x10
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <Active_State+0xdc>
     bca:	98 8b       	std	Y+16, r25	; 0x10
     bcc:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bce:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	9e 87       	std	Y+14, r25	; 0x0e
     bd6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	69 f7       	brne	.-38     	; 0xbba <Active_State+0xd0>
     be0:	13 c0       	rjmp	.+38     	; 0xc08 <Active_State+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     be2:	69 85       	ldd	r22, Y+9	; 0x09
     be4:	7a 85       	ldd	r23, Y+10	; 0x0a
     be6:	8b 85       	ldd	r24, Y+11	; 0x0b
     be8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bea:	9e d5       	rcall	.+2876   	; 0x1728 <__fixunssfsi>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	9e 87       	std	Y+14, r25	; 0x0e
     bf2:	8d 87       	std	Y+13, r24	; 0x0d
     bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf8:	9a 8b       	std	Y+18, r25	; 0x12
     bfa:	89 8b       	std	Y+17, r24	; 0x11
     bfc:	89 89       	ldd	r24, Y+17	; 0x11
     bfe:	9a 89       	ldd	r25, Y+18	; 0x12
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <Active_State+0x116>
     c04:	9a 8b       	std	Y+18, r25	; 0x12
     c06:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(1000);
	DebugLedTransmit(LED_OFF ,LED_ORANGE);		/* Switch OFF the LED */
     c08:	63 e0       	ldi	r22, 0x03	; 3
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	96 dc       	rcall	.-1748   	; 0x53a <DebugLedTransmit>
	
	Reset_Pir_count();
     c0e:	fc d4       	rcall	.+2552   	; 0x1608 <Reset_Pir_count>

	/* Get ultrasonic count */
	active_usscount = Get_Uss_Count(); 
     c10:	27 d4       	rcall	.+2126   	; 0x1460 <Get_Uss_Count>
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e8       	ldi	r25, 0x80	; 128
     c1a:	ab e3       	ldi	r26, 0x3B	; 59
     c1c:	b5 e4       	ldi	r27, 0x45	; 69
     c1e:	8b 8b       	std	Y+19, r24	; 0x13
     c20:	9c 8b       	std	Y+20, r25	; 0x14
     c22:	ad 8b       	std	Y+21, r26	; 0x15
     c24:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	4a e7       	ldi	r20, 0x7A	; 122
     c2c:	53 e4       	ldi	r21, 0x43	; 67
     c2e:	6b 89       	ldd	r22, Y+19	; 0x13
     c30:	7c 89       	ldd	r23, Y+20	; 0x14
     c32:	8d 89       	ldd	r24, Y+21	; 0x15
     c34:	9e 89       	ldd	r25, Y+22	; 0x16
     c36:	1d d6       	rcall	.+3130   	; 0x1872 <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8f 8b       	std	Y+23, r24	; 0x17
     c3e:	98 8f       	std	Y+24, r25	; 0x18
     c40:	a9 8f       	std	Y+25, r26	; 0x19
     c42:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e8       	ldi	r20, 0x80	; 128
     c4a:	5f e3       	ldi	r21, 0x3F	; 63
     c4c:	6f 89       	ldd	r22, Y+23	; 0x17
     c4e:	78 8d       	ldd	r23, Y+24	; 0x18
     c50:	89 8d       	ldd	r24, Y+25	; 0x19
     c52:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c54:	fd d4       	rcall	.+2554   	; 0x1650 <__cmpsf2>
     c56:	88 23       	and	r24, r24
     c58:	2c f4       	brge	.+10     	; 0xc64 <Active_State+0x17a>
		__ticks = 1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	9c 8f       	std	Y+28, r25	; 0x1c
     c60:	8b 8f       	std	Y+27, r24	; 0x1b
     c62:	3b c0       	rjmp	.+118    	; 0xcda <Active_State+0x1f0>
	else if (__tmp > 65535)
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	4f e7       	ldi	r20, 0x7F	; 127
     c6a:	57 e4       	ldi	r21, 0x47	; 71
     c6c:	6f 89       	ldd	r22, Y+23	; 0x17
     c6e:	78 8d       	ldd	r23, Y+24	; 0x18
     c70:	89 8d       	ldd	r24, Y+25	; 0x19
     c72:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c74:	fa d5       	rcall	.+3060   	; 0x186a <__gesf2>
     c76:	18 16       	cp	r1, r24
     c78:	3c f5       	brge	.+78     	; 0xcc8 <Active_State+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e2       	ldi	r20, 0x20	; 32
     c80:	51 e4       	ldi	r21, 0x41	; 65
     c82:	6b 89       	ldd	r22, Y+19	; 0x13
     c84:	7c 89       	ldd	r23, Y+20	; 0x14
     c86:	8d 89       	ldd	r24, Y+21	; 0x15
     c88:	9e 89       	ldd	r25, Y+22	; 0x16
     c8a:	f3 d5       	rcall	.+3046   	; 0x1872 <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	49 d5       	rcall	.+2706   	; 0x1728 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9c 8f       	std	Y+28, r25	; 0x1c
     c9c:	8b 8f       	std	Y+27, r24	; 0x1b
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <Active_State+0x1d4>
     ca0:	89 e1       	ldi	r24, 0x19	; 25
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9e 8f       	std	Y+30, r25	; 0x1e
     ca6:	8d 8f       	std	Y+29, r24	; 0x1d
     ca8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     caa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <Active_State+0x1c2>
     cb0:	9e 8f       	std	Y+30, r25	; 0x1e
     cb2:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	9c 8f       	std	Y+28, r25	; 0x1c
     cbc:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	69 f7       	brne	.-38     	; 0xca0 <Active_State+0x1b6>
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <Active_State+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	6f 89       	ldd	r22, Y+23	; 0x17
     cca:	78 8d       	ldd	r23, Y+24	; 0x18
     ccc:	89 8d       	ldd	r24, Y+25	; 0x19
     cce:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cd0:	2b d5       	rcall	.+2646   	; 0x1728 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9c 8f       	std	Y+28, r25	; 0x1c
     cd8:	8b 8f       	std	Y+27, r24	; 0x1b
     cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cde:	98 a3       	std	Y+32, r25	; 0x20
     ce0:	8f 8f       	std	Y+31, r24	; 0x1f
     ce2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ce4:	98 a1       	ldd	r25, Y+32	; 0x20
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <Active_State+0x1fc>
     cea:	98 a3       	std	Y+32, r25	; 0x20
     cec:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(3000);
	
	/* Get ultrasonic count */
	active_usscount = Get_Uss_Count(); 
     cee:	b8 d3       	rcall	.+1904   	; 0x1460 <Get_Uss_Count>
     cf0:	9c 83       	std	Y+4, r25	; 0x04
     cf2:	8b 83       	std	Y+3, r24	; 0x03
	/* Get pir count */
	active_pir_count = Get_Pir_count();
     cf4:	76 d4       	rcall	.+2284   	; 0x15e2 <Get_Pir_count>
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check if Customer present in the room */
	if((active_pir_count >= threshold_pir_count) || (active_usscount < threshold_uss_count))
     cfa:	80 91 60 00 	lds	r24, 0x0060
     cfe:	90 91 61 00 	lds	r25, 0x0061
     d02:	29 81       	ldd	r18, Y+1	; 0x01
     d04:	3a 81       	ldd	r19, Y+2	; 0x02
     d06:	28 17       	cp	r18, r24
     d08:	39 07       	cpc	r19, r25
     d0a:	48 f4       	brcc	.+18     	; 0xd1e <Active_State+0x234>
     d0c:	80 91 c2 00 	lds	r24, 0x00C2
     d10:	90 91 c3 00 	lds	r25, 0x00C3
     d14:	2b 81       	ldd	r18, Y+3	; 0x03
     d16:	3c 81       	ldd	r19, Y+4	; 0x04
     d18:	28 17       	cp	r18, r24
     d1a:	39 07       	cpc	r19, r25
     d1c:	20 f4       	brcc	.+8      	; 0xd26 <Active_State+0x23c>
	{
		/* Do not change the state. Keep audio playing*/
		motascontroller_state = MOTAS_ACTIVE_STATE;
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	80 93 c1 00 	sts	0x00C1, r24
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <Active_State+0x25a>
	}
	/*Customer has left the room */
	else
	{
		/* Stop playing music */
		Dfplayer_Cmd(CMD_STOP, 1);
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	86 e1       	ldi	r24, 0x16	; 22
     d2c:	81 dc       	rcall	.-1790   	; 0x630 <Dfplayer_Cmd>
		
		/* Change the status of music player to false(Music not playing) */
		flag_player_status_g = False;
     d2e:	80 ec       	ldi	r24, 0xC0	; 192
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	fc 01       	movw	r30, r24
     d34:	20 81       	ld	r18, Z
     d36:	2d 7f       	andi	r18, 0xFD	; 253
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
		
		/* Change the state to standby state*/
		Reset_Pir_count();
     d3c:	65 d4       	rcall	.+2250   	; 0x1608 <Reset_Pir_count>
		motascontroller_state = MOTAS_STANDBY_STATE;	
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	80 93 c1 00 	sts	0x00C1, r24
	}
}
     d44:	a0 96       	adiw	r28, 0x20	; 32
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <Debugging_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Debugging_State(void)
{
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	ae 97       	sbiw	r28, 0x2e	; 46
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
	uint16_t pir_count = 0;
     d6a:	1a 82       	std	Y+2, r1	; 0x02
     d6c:	19 82       	std	Y+1, r1	; 0x01
	uint16_t uss_count = 0;
     d6e:	1c 82       	std	Y+4, r1	; 0x04
     d70:	1b 82       	std	Y+3, r1	; 0x03

	/* Yellow led light indicating start of Debugging mode */
	DebugLedTransmit(LED_ON ,LED_YELLOW);
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	e1 db       	rcall	.-2110   	; 0x53a <DebugLedTransmit>
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	aa ef       	ldi	r26, 0xFA	; 250
     d7e:	b4 e4       	ldi	r27, 0x44	; 68
     d80:	8d 83       	std	Y+5, r24	; 0x05
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	af 83       	std	Y+7, r26	; 0x07
     d86:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4a e7       	ldi	r20, 0x7A	; 122
     d8e:	53 e4       	ldi	r21, 0x43	; 67
     d90:	6d 81       	ldd	r22, Y+5	; 0x05
     d92:	7e 81       	ldd	r23, Y+6	; 0x06
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	98 85       	ldd	r25, Y+8	; 0x08
     d98:	6c d5       	rcall	.+2776   	; 0x1872 <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	89 87       	std	Y+9, r24	; 0x09
     da0:	9a 87       	std	Y+10, r25	; 0x0a
     da2:	ab 87       	std	Y+11, r26	; 0x0b
     da4:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e8       	ldi	r20, 0x80	; 128
     dac:	5f e3       	ldi	r21, 0x3F	; 63
     dae:	69 85       	ldd	r22, Y+9	; 0x09
     db0:	7a 85       	ldd	r23, Y+10	; 0x0a
     db2:	8b 85       	ldd	r24, Y+11	; 0x0b
     db4:	9c 85       	ldd	r25, Y+12	; 0x0c
     db6:	4c d4       	rcall	.+2200   	; 0x1650 <__cmpsf2>
     db8:	88 23       	and	r24, r24
     dba:	2c f4       	brge	.+10     	; 0xdc6 <Debugging_State+0x70>
		__ticks = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9e 87       	std	Y+14, r25	; 0x0e
     dc2:	8d 87       	std	Y+13, r24	; 0x0d
     dc4:	3b c0       	rjmp	.+118    	; 0xe3c <Debugging_State+0xe6>
	else if (__tmp > 65535)
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	4f e7       	ldi	r20, 0x7F	; 127
     dcc:	57 e4       	ldi	r21, 0x47	; 71
     dce:	69 85       	ldd	r22, Y+9	; 0x09
     dd0:	7a 85       	ldd	r23, Y+10	; 0x0a
     dd2:	8b 85       	ldd	r24, Y+11	; 0x0b
     dd4:	9c 85       	ldd	r25, Y+12	; 0x0c
     dd6:	49 d5       	rcall	.+2706   	; 0x186a <__gesf2>
     dd8:	18 16       	cp	r1, r24
     dda:	3c f5       	brge	.+78     	; 0xe2a <Debugging_State+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e2       	ldi	r20, 0x20	; 32
     de2:	51 e4       	ldi	r21, 0x41	; 65
     de4:	6d 81       	ldd	r22, Y+5	; 0x05
     de6:	7e 81       	ldd	r23, Y+6	; 0x06
     de8:	8f 81       	ldd	r24, Y+7	; 0x07
     dea:	98 85       	ldd	r25, Y+8	; 0x08
     dec:	42 d5       	rcall	.+2692   	; 0x1872 <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	98 d4       	rcall	.+2352   	; 0x1728 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	9e 87       	std	Y+14, r25	; 0x0e
     dfe:	8d 87       	std	Y+13, r24	; 0x0d
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <Debugging_State+0xca>
     e02:	89 e1       	ldi	r24, 0x19	; 25
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	98 8b       	std	Y+16, r25	; 0x10
     e08:	8f 87       	std	Y+15, r24	; 0x0f
     e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0c:	98 89       	ldd	r25, Y+16	; 0x10
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <Debugging_State+0xb8>
     e12:	98 8b       	std	Y+16, r25	; 0x10
     e14:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e16:	8d 85       	ldd	r24, Y+13	; 0x0d
     e18:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	9e 87       	std	Y+14, r25	; 0x0e
     e1e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	69 f7       	brne	.-38     	; 0xe02 <Debugging_State+0xac>
     e28:	13 c0       	rjmp	.+38     	; 0xe50 <Debugging_State+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2a:	69 85       	ldd	r22, Y+9	; 0x09
     e2c:	7a 85       	ldd	r23, Y+10	; 0x0a
     e2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e30:	9c 85       	ldd	r25, Y+12	; 0x0c
     e32:	7a d4       	rcall	.+2292   	; 0x1728 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9e 87       	std	Y+14, r25	; 0x0e
     e3a:	8d 87       	std	Y+13, r24	; 0x0d
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	9a 8b       	std	Y+18, r25	; 0x12
     e42:	89 8b       	std	Y+17, r24	; 0x11
     e44:	89 89       	ldd	r24, Y+17	; 0x11
     e46:	9a 89       	ldd	r25, Y+18	; 0x12
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <Debugging_State+0xf2>
     e4c:	9a 8b       	std	Y+18, r25	; 0x12
     e4e:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(2000);
	
	/* Get the pir count */
	Reset_Pir_count();
     e50:	db d3       	rcall	.+1974   	; 0x1608 <Reset_Pir_count>
	pir_count = Get_Pir_count();
     e52:	c7 d3       	rcall	.+1934   	; 0x15e2 <Get_Pir_count>
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01

	/* Get the USS count */
	uss_count = Get_Uss_Count();
     e58:	03 d3       	rcall	.+1542   	; 0x1460 <Get_Uss_Count>
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03

	/* Check if pir is triggered */
	if(pir_count > 1)
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	91 05       	cpc	r25, r1
     e66:	08 f4       	brcc	.+2      	; 0xe6a <Debugging_State+0x114>
     e68:	6f c0       	rjmp	.+222    	; 0xf48 <Debugging_State+0x1f2>
	{
		/* Red led light indicating pir triggered */
		DebugLedTransmit(LED_ON, LED_RED);
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	65 db       	rcall	.-2358   	; 0x53a <DebugLedTransmit>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	aa ef       	ldi	r26, 0xFA	; 250
     e76:	b4 e4       	ldi	r27, 0x44	; 68
     e78:	8b 8b       	std	Y+19, r24	; 0x13
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	ad 8b       	std	Y+21, r26	; 0x15
     e7e:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	4a e7       	ldi	r20, 0x7A	; 122
     e86:	53 e4       	ldi	r21, 0x43	; 67
     e88:	6b 89       	ldd	r22, Y+19	; 0x13
     e8a:	7c 89       	ldd	r23, Y+20	; 0x14
     e8c:	8d 89       	ldd	r24, Y+21	; 0x15
     e8e:	9e 89       	ldd	r25, Y+22	; 0x16
     e90:	f0 d4       	rcall	.+2528   	; 0x1872 <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	8f 8b       	std	Y+23, r24	; 0x17
     e98:	98 8f       	std	Y+24, r25	; 0x18
     e9a:	a9 8f       	std	Y+25, r26	; 0x19
     e9c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	6f 89       	ldd	r22, Y+23	; 0x17
     ea8:	78 8d       	ldd	r23, Y+24	; 0x18
     eaa:	89 8d       	ldd	r24, Y+25	; 0x19
     eac:	9a 8d       	ldd	r25, Y+26	; 0x1a
     eae:	d0 d3       	rcall	.+1952   	; 0x1650 <__cmpsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <Debugging_State+0x168>
		__ticks = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9c 8f       	std	Y+28, r25	; 0x1c
     eba:	8b 8f       	std	Y+27, r24	; 0x1b
     ebc:	3b c0       	rjmp	.+118    	; 0xf34 <Debugging_State+0x1de>
	else if (__tmp > 65535)
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	3f ef       	ldi	r19, 0xFF	; 255
     ec2:	4f e7       	ldi	r20, 0x7F	; 127
     ec4:	57 e4       	ldi	r21, 0x47	; 71
     ec6:	6f 89       	ldd	r22, Y+23	; 0x17
     ec8:	78 8d       	ldd	r23, Y+24	; 0x18
     eca:	89 8d       	ldd	r24, Y+25	; 0x19
     ecc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ece:	cd d4       	rcall	.+2458   	; 0x186a <__gesf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	3c f5       	brge	.+78     	; 0xf22 <Debugging_State+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e2       	ldi	r20, 0x20	; 32
     eda:	51 e4       	ldi	r21, 0x41	; 65
     edc:	6b 89       	ldd	r22, Y+19	; 0x13
     ede:	7c 89       	ldd	r23, Y+20	; 0x14
     ee0:	8d 89       	ldd	r24, Y+21	; 0x15
     ee2:	9e 89       	ldd	r25, Y+22	; 0x16
     ee4:	c6 d4       	rcall	.+2444   	; 0x1872 <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	1c d4       	rcall	.+2104   	; 0x1728 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9c 8f       	std	Y+28, r25	; 0x1c
     ef6:	8b 8f       	std	Y+27, r24	; 0x1b
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <Debugging_State+0x1c2>
     efa:	89 e1       	ldi	r24, 0x19	; 25
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9e 8f       	std	Y+30, r25	; 0x1e
     f00:	8d 8f       	std	Y+29, r24	; 0x1d
     f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f04:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <Debugging_State+0x1b0>
     f0a:	9e 8f       	std	Y+30, r25	; 0x1e
     f0c:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	9c 8f       	std	Y+28, r25	; 0x1c
     f16:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f18:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	69 f7       	brne	.-38     	; 0xefa <Debugging_State+0x1a4>
     f20:	13 c0       	rjmp	.+38     	; 0xf48 <Debugging_State+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f22:	6f 89       	ldd	r22, Y+23	; 0x17
     f24:	78 8d       	ldd	r23, Y+24	; 0x18
     f26:	89 8d       	ldd	r24, Y+25	; 0x19
     f28:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f2a:	fe d3       	rcall	.+2044   	; 0x1728 <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	9c 8f       	std	Y+28, r25	; 0x1c
     f32:	8b 8f       	std	Y+27, r24	; 0x1b
     f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f38:	98 a3       	std	Y+32, r25	; 0x20
     f3a:	8f 8f       	std	Y+31, r24	; 0x1f
     f3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3e:	98 a1       	ldd	r25, Y+32	; 0x20
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <Debugging_State+0x1ea>
     f44:	98 a3       	std	Y+32, r25	; 0x20
     f46:	8f 8f       	std	Y+31, r24	; 0x1f
	}
	/* Check if USS is triggered */
	else if(uss_count > debug_threshold_uss_count);
	{
		/* Orange led light indicating uss triggered */
		DebugLedTransmit(LED_ON, LED_ORANGE);
     f48:	63 e0       	ldi	r22, 0x03	; 3
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	f6 da       	rcall	.-2580   	; 0x53a <DebugLedTransmit>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	aa ef       	ldi	r26, 0xFA	; 250
     f54:	b4 e4       	ldi	r27, 0x44	; 68
     f56:	89 a3       	std	Y+33, r24	; 0x21
     f58:	9a a3       	std	Y+34, r25	; 0x22
     f5a:	ab a3       	std	Y+35, r26	; 0x23
     f5c:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4a e7       	ldi	r20, 0x7A	; 122
     f64:	53 e4       	ldi	r21, 0x43	; 67
     f66:	69 a1       	ldd	r22, Y+33	; 0x21
     f68:	7a a1       	ldd	r23, Y+34	; 0x22
     f6a:	8b a1       	ldd	r24, Y+35	; 0x23
     f6c:	9c a1       	ldd	r25, Y+36	; 0x24
     f6e:	81 d4       	rcall	.+2306   	; 0x1872 <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8d a3       	std	Y+37, r24	; 0x25
     f76:	9e a3       	std	Y+38, r25	; 0x26
     f78:	af a3       	std	Y+39, r26	; 0x27
     f7a:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	6d a1       	ldd	r22, Y+37	; 0x25
     f86:	7e a1       	ldd	r23, Y+38	; 0x26
     f88:	8f a1       	ldd	r24, Y+39	; 0x27
     f8a:	98 a5       	ldd	r25, Y+40	; 0x28
     f8c:	61 d3       	rcall	.+1730   	; 0x1650 <__cmpsf2>
     f8e:	88 23       	and	r24, r24
     f90:	2c f4       	brge	.+10     	; 0xf9c <Debugging_State+0x246>
		__ticks = 1;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9a a7       	std	Y+42, r25	; 0x2a
     f98:	89 a7       	std	Y+41, r24	; 0x29
     f9a:	3b c0       	rjmp	.+118    	; 0x1012 <Debugging_State+0x2bc>
	else if (__tmp > 65535)
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	6d a1       	ldd	r22, Y+37	; 0x25
     fa6:	7e a1       	ldd	r23, Y+38	; 0x26
     fa8:	8f a1       	ldd	r24, Y+39	; 0x27
     faa:	98 a5       	ldd	r25, Y+40	; 0x28
     fac:	5e d4       	rcall	.+2236   	; 0x186a <__gesf2>
     fae:	18 16       	cp	r1, r24
     fb0:	3c f5       	brge	.+78     	; 0x1000 <Debugging_State+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	69 a1       	ldd	r22, Y+33	; 0x21
     fbc:	7a a1       	ldd	r23, Y+34	; 0x22
     fbe:	8b a1       	ldd	r24, Y+35	; 0x23
     fc0:	9c a1       	ldd	r25, Y+36	; 0x24
     fc2:	57 d4       	rcall	.+2222   	; 0x1872 <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	ad d3       	rcall	.+1882   	; 0x1728 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	9a a7       	std	Y+42, r25	; 0x2a
     fd4:	89 a7       	std	Y+41, r24	; 0x29
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <Debugging_State+0x2a0>
     fd8:	89 e1       	ldi	r24, 0x19	; 25
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9c a7       	std	Y+44, r25	; 0x2c
     fde:	8b a7       	std	Y+43, r24	; 0x2b
     fe0:	8b a5       	ldd	r24, Y+43	; 0x2b
     fe2:	9c a5       	ldd	r25, Y+44	; 0x2c
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <Debugging_State+0x28e>
     fe8:	9c a7       	std	Y+44, r25	; 0x2c
     fea:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fec:	89 a5       	ldd	r24, Y+41	; 0x29
     fee:	9a a5       	ldd	r25, Y+42	; 0x2a
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	9a a7       	std	Y+42, r25	; 0x2a
     ff4:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff6:	89 a5       	ldd	r24, Y+41	; 0x29
     ff8:	9a a5       	ldd	r25, Y+42	; 0x2a
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f7       	brne	.-38     	; 0xfd8 <Debugging_State+0x282>
     ffe:	13 c0       	rjmp	.+38     	; 0x1026 <Debugging_State+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1000:	6d a1       	ldd	r22, Y+37	; 0x25
    1002:	7e a1       	ldd	r23, Y+38	; 0x26
    1004:	8f a1       	ldd	r24, Y+39	; 0x27
    1006:	98 a5       	ldd	r25, Y+40	; 0x28
    1008:	8f d3       	rcall	.+1822   	; 0x1728 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	9a a7       	std	Y+42, r25	; 0x2a
    1010:	89 a7       	std	Y+41, r24	; 0x29
    1012:	89 a5       	ldd	r24, Y+41	; 0x29
    1014:	9a a5       	ldd	r25, Y+42	; 0x2a
    1016:	9e a7       	std	Y+46, r25	; 0x2e
    1018:	8d a7       	std	Y+45, r24	; 0x2d
    101a:	8d a5       	ldd	r24, Y+45	; 0x2d
    101c:	9e a5       	ldd	r25, Y+46	; 0x2e
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <Debugging_State+0x2c8>
    1022:	9e a7       	std	Y+46, r25	; 0x2e
    1024:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(2000);
	}
}
    1026:	ae 96       	adiw	r28, 0x2e	; 46
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <MotasController>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void MotasController(void)
{
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
    1040:	80 91 c1 00 	lds	r24, 0x00C1
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	91 05       	cpc	r25, r1
    104c:	a1 f0       	breq	.+40     	; 0x1076 <MotasController+0x3e>
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	34 f4       	brge	.+12     	; 0x1060 <MotasController+0x28>
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	59 f0       	breq	.+22     	; 0x106e <MotasController+0x36>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 05       	cpc	r25, r1
    105c:	51 f0       	breq	.+20     	; 0x1072 <MotasController+0x3a>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <MotasController+0x4a>
*/
void MotasController(void)
{
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
    1060:	83 30       	cpi	r24, 0x03	; 3
    1062:	91 05       	cpc	r25, r1
    1064:	51 f0       	breq	.+20     	; 0x107a <MotasController+0x42>
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	91 05       	cpc	r25, r1
    106a:	49 f0       	breq	.+18     	; 0x107e <MotasController+0x46>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
    106c:	0a c0       	rjmp	.+20     	; 0x1082 <MotasController+0x4a>
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
	{
		case MOTAS_INIT_STATE:
			Init_State();
    106e:	de db       	rcall	.-2116   	; 0x82c <Init_State>
			break;	
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <MotasController+0x4a>

		case MOTAS_CALIBRATION_STATE:
			Calibration_State();
    1072:	f1 db       	rcall	.-2078   	; 0x856 <Calibration_State>
			break;	
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <MotasController+0x4a>

		case MOTAS_STANDBY_STATE:
			Standby_State();
    1076:	88 dc       	rcall	.-1776   	; 0x988 <Standby_State>
			break;
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <MotasController+0x4a>

		case MOTAS_ACTIVE_STATE:
			Active_State();
    107a:	37 dd       	rcall	.-1426   	; 0xaea <Active_State>
			break;
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <MotasController+0x4a>

		case MOTAS_DEBUGGING_STATE:		
			Debugging_State();	
    107e:	6b de       	rcall	.-810    	; 0xd56 <Debugging_State>
			break;
    1080:	00 00       	nop
		default : 
			/*Do nothing*/
			break;	

	}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <__vector_2>:
#include <avr/interrupt.h>
#include "Peripheral_Drivers.h"
#include "debug_func.h"

ISR(PIR_INTERRUPT_VECT)
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	00 90 5f 00 	lds	r0, 0x005F
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count++;
    10a0:	80 91 c7 00 	lds	r24, 0x00C7
    10a4:	90 91 c8 00 	lds	r25, 0x00C8
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	90 93 c8 00 	sts	0x00C8, r25
    10ae:	80 93 c7 00 	sts	0x00C7, r24
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	0f 90       	pop	r0
    10bc:	00 92 5f 00 	sts	0x005F, r0
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_1>:

ISR(USS_INTERRUPT_VECT)				
{
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	00 90 5f 00 	lds	r0, 0x005F
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	static uint8_t UssEdgeCount = 0;
	if (UssEdgeCount)		
    10f2:	80 91 c4 00 	lds	r24, 0x00C4
    10f6:	88 23       	and	r24, r24
    10f8:	d9 f0       	breq	.+54     	; 0x1130 <__vector_1+0x6a>
	{
		Stop_Timer1();
    10fa:	63 d2       	rcall	.+1222   	; 0x15c2 <Stop_Timer1>
		UssPulseCount = TCNT1;		// Store the time duration of the echo pulse.
    10fc:	8c e4       	ldi	r24, 0x4C	; 76
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	90 93 c6 00 	sts	0x00C6, r25
    110a:	80 93 c5 00 	sts	0x00C5, r24
		TCNT1 = 0;
    110e:	8c e4       	ldi	r24, 0x4C	; 76
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	fc 01       	movw	r30, r24
    1114:	11 82       	std	Z+1, r1	; 0x01
    1116:	10 82       	st	Z, r1
		UssEdgeCount = 0;
    1118:	10 92 c4 00 	sts	0x00C4, r1
		MCUCR |= (1 << ISC01) | (1 << ISC00);												// Rising edge will trigger the next interrupt
    111c:	85 e5       	ldi	r24, 0x55	; 85
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	25 e5       	ldi	r18, 0x55	; 85
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	f9 01       	movw	r30, r18
    1126:	20 81       	ld	r18, Z
    1128:	23 60       	ori	r18, 0x03	; 3
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
    112e:	16 c0       	rjmp	.+44     	; 0x115c <__vector_1+0x96>
	}
	else 
	{
		Start_Timer1();
    1130:	38 d2       	rcall	.+1136   	; 0x15a2 <Start_Timer1>
		UssEdgeCount = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 93 c4 00 	sts	0x00C4, r24
		MCUCR &= ~(1 << ISC00);										// falling edge for INT0 enabled
    1138:	85 e5       	ldi	r24, 0x55	; 85
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	25 e5       	ldi	r18, 0x55	; 85
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	20 81       	ld	r18, Z
    1144:	2e 7f       	andi	r18, 0xFE	; 254
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
		MCUCR |= (1 << ISC01);
    114a:	85 e5       	ldi	r24, 0x55	; 85
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	25 e5       	ldi	r18, 0x55	; 85
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	22 60       	ori	r18, 0x02	; 2
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
	}
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	00 92 5f 00 	sts	0x005F, r0
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <Trigger_Ultrasonic_Sensor>:

void Trigger_Ultrasonic_Sensor()									// Function tested for 10us trigger 
{
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	a0 97       	sbiw	r28, 0x20	; 32
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
	SETBIT(USS_TRIGGER_PORT, USS_TRIGGER_PIN);
    1198:	88 e3       	ldi	r24, 0x38	; 56
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	28 e3       	ldi	r18, 0x38	; 56
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	f9 01       	movw	r30, r18
    11a2:	20 81       	ld	r18, Z
    11a4:	22 60       	ori	r18, 0x02	; 2
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 e2       	ldi	r26, 0x20	; 32
    11b0:	b1 e4       	ldi	r27, 0x41	; 65
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	ab 83       	std	Y+3, r26	; 0x03
    11b8:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    11ba:	2b ea       	ldi	r18, 0xAB	; 171
    11bc:	3a ea       	ldi	r19, 0xAA	; 170
    11be:	4a ea       	ldi	r20, 0xAA	; 170
    11c0:	5e e3       	ldi	r21, 0x3E	; 62
    11c2:	69 81       	ldd	r22, Y+1	; 0x01
    11c4:	7a 81       	ldd	r23, Y+2	; 0x02
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	53 d3       	rcall	.+1702   	; 0x1872 <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	af 83       	std	Y+7, r26	; 0x07
    11d6:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e8       	ldi	r20, 0x80	; 128
    11de:	5e e3       	ldi	r21, 0x3E	; 62
    11e0:	69 81       	ldd	r22, Y+1	; 0x01
    11e2:	7a 81       	ldd	r23, Y+2	; 0x02
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	44 d3       	rcall	.+1672   	; 0x1872 <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	89 87       	std	Y+9, r24	; 0x09
    11f0:	9a 87       	std	Y+10, r25	; 0x0a
    11f2:	ab 87       	std	Y+11, r26	; 0x0b
    11f4:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e8       	ldi	r20, 0x80	; 128
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1200:	7e 81       	ldd	r23, Y+6	; 0x06
    1202:	8f 81       	ldd	r24, Y+7	; 0x07
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	24 d2       	rcall	.+1096   	; 0x1650 <__cmpsf2>
    1208:	88 23       	and	r24, r24
    120a:	1c f4       	brge	.+6      	; 0x1212 <Trigger_Ultrasonic_Sensor+0x8e>
		__ticks = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	8d 87       	std	Y+13, r24	; 0x0d
    1210:	a7 c0       	rjmp	.+334    	; 0x1360 <Trigger_Ultrasonic_Sensor+0x1dc>
	else if (__tmp2 > 65535)
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	69 85       	ldd	r22, Y+9	; 0x09
    121c:	7a 85       	ldd	r23, Y+10	; 0x0a
    121e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1220:	9c 85       	ldd	r25, Y+12	; 0x0c
    1222:	23 d3       	rcall	.+1606   	; 0x186a <__gesf2>
    1224:	18 16       	cp	r1, r24
    1226:	0c f0       	brlt	.+2      	; 0x122a <Trigger_Ultrasonic_Sensor+0xa6>
    1228:	74 c0       	rjmp	.+232    	; 0x1312 <Trigger_Ultrasonic_Sensor+0x18e>
	{
		_delay_ms(__us / 1000.0);
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	4a e7       	ldi	r20, 0x7A	; 122
    1230:	54 e4       	ldi	r21, 0x44	; 68
    1232:	69 81       	ldd	r22, Y+1	; 0x01
    1234:	7a 81       	ldd	r23, Y+2	; 0x02
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	0e d2       	rcall	.+1052   	; 0x1658 <__divsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8e 87       	std	Y+14, r24	; 0x0e
    1242:	9f 87       	std	Y+15, r25	; 0x0f
    1244:	a8 8b       	std	Y+16, r26	; 0x10
    1246:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4a e7       	ldi	r20, 0x7A	; 122
    124e:	53 e4       	ldi	r21, 0x43	; 67
    1250:	6e 85       	ldd	r22, Y+14	; 0x0e
    1252:	7f 85       	ldd	r23, Y+15	; 0x0f
    1254:	88 89       	ldd	r24, Y+16	; 0x10
    1256:	99 89       	ldd	r25, Y+17	; 0x11
    1258:	0c d3       	rcall	.+1560   	; 0x1872 <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	8a 8b       	std	Y+18, r24	; 0x12
    1260:	9b 8b       	std	Y+19, r25	; 0x13
    1262:	ac 8b       	std	Y+20, r26	; 0x14
    1264:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	40 e8       	ldi	r20, 0x80	; 128
    126c:	5f e3       	ldi	r21, 0x3F	; 63
    126e:	6a 89       	ldd	r22, Y+18	; 0x12
    1270:	7b 89       	ldd	r23, Y+19	; 0x13
    1272:	8c 89       	ldd	r24, Y+20	; 0x14
    1274:	9d 89       	ldd	r25, Y+21	; 0x15
    1276:	ec d1       	rcall	.+984    	; 0x1650 <__cmpsf2>
    1278:	88 23       	and	r24, r24
    127a:	2c f4       	brge	.+10     	; 0x1286 <Trigger_Ultrasonic_Sensor+0x102>
		__ticks = 1;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9f 8b       	std	Y+23, r25	; 0x17
    1282:	8e 8b       	std	Y+22, r24	; 0x16
    1284:	3b c0       	rjmp	.+118    	; 0x12fc <Trigger_Ultrasonic_Sensor+0x178>
	else if (__tmp > 65535)
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	6a 89       	ldd	r22, Y+18	; 0x12
    1290:	7b 89       	ldd	r23, Y+19	; 0x13
    1292:	8c 89       	ldd	r24, Y+20	; 0x14
    1294:	9d 89       	ldd	r25, Y+21	; 0x15
    1296:	e9 d2       	rcall	.+1490   	; 0x186a <__gesf2>
    1298:	18 16       	cp	r1, r24
    129a:	3c f5       	brge	.+78     	; 0x12ea <Trigger_Ultrasonic_Sensor+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e2       	ldi	r20, 0x20	; 32
    12a2:	51 e4       	ldi	r21, 0x41	; 65
    12a4:	6e 85       	ldd	r22, Y+14	; 0x0e
    12a6:	7f 85       	ldd	r23, Y+15	; 0x0f
    12a8:	88 89       	ldd	r24, Y+16	; 0x10
    12aa:	99 89       	ldd	r25, Y+17	; 0x11
    12ac:	e2 d2       	rcall	.+1476   	; 0x1872 <__mulsf3>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	38 d2       	rcall	.+1136   	; 0x1728 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	9f 8b       	std	Y+23, r25	; 0x17
    12be:	8e 8b       	std	Y+22, r24	; 0x16
    12c0:	0f c0       	rjmp	.+30     	; 0x12e0 <Trigger_Ultrasonic_Sensor+0x15c>
    12c2:	89 e1       	ldi	r24, 0x19	; 25
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	99 8f       	std	Y+25, r25	; 0x19
    12c8:	88 8f       	std	Y+24, r24	; 0x18
    12ca:	88 8d       	ldd	r24, Y+24	; 0x18
    12cc:	99 8d       	ldd	r25, Y+25	; 0x19
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <Trigger_Ultrasonic_Sensor+0x14a>
    12d2:	99 8f       	std	Y+25, r25	; 0x19
    12d4:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d6:	8e 89       	ldd	r24, Y+22	; 0x16
    12d8:	9f 89       	ldd	r25, Y+23	; 0x17
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	9f 8b       	std	Y+23, r25	; 0x17
    12de:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e0:	8e 89       	ldd	r24, Y+22	; 0x16
    12e2:	9f 89       	ldd	r25, Y+23	; 0x17
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	69 f7       	brne	.-38     	; 0x12c2 <Trigger_Ultrasonic_Sensor+0x13e>
    12e8:	3b c0       	rjmp	.+118    	; 0x1360 <Trigger_Ultrasonic_Sensor+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ea:	6a 89       	ldd	r22, Y+18	; 0x12
    12ec:	7b 89       	ldd	r23, Y+19	; 0x13
    12ee:	8c 89       	ldd	r24, Y+20	; 0x14
    12f0:	9d 89       	ldd	r25, Y+21	; 0x15
    12f2:	1a d2       	rcall	.+1076   	; 0x1728 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9f 8b       	std	Y+23, r25	; 0x17
    12fa:	8e 8b       	std	Y+22, r24	; 0x16
    12fc:	8e 89       	ldd	r24, Y+22	; 0x16
    12fe:	9f 89       	ldd	r25, Y+23	; 0x17
    1300:	9b 8f       	std	Y+27, r25	; 0x1b
    1302:	8a 8f       	std	Y+26, r24	; 0x1a
    1304:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1306:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <Trigger_Ultrasonic_Sensor+0x184>
    130c:	9b 8f       	std	Y+27, r25	; 0x1b
    130e:	8a 8f       	std	Y+26, r24	; 0x1a
    1310:	27 c0       	rjmp	.+78     	; 0x1360 <Trigger_Ultrasonic_Sensor+0x1dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	4f e7       	ldi	r20, 0x7F	; 127
    1318:	53 e4       	ldi	r21, 0x43	; 67
    131a:	6d 81       	ldd	r22, Y+5	; 0x05
    131c:	7e 81       	ldd	r23, Y+6	; 0x06
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	a3 d2       	rcall	.+1350   	; 0x186a <__gesf2>
    1324:	18 16       	cp	r1, r24
    1326:	a4 f4       	brge	.+40     	; 0x1350 <Trigger_Ultrasonic_Sensor+0x1cc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1328:	69 85       	ldd	r22, Y+9	; 0x09
    132a:	7a 85       	ldd	r23, Y+10	; 0x0a
    132c:	8b 85       	ldd	r24, Y+11	; 0x0b
    132e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1330:	fb d1       	rcall	.+1014   	; 0x1728 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9d 8f       	std	Y+29, r25	; 0x1d
    1338:	8c 8f       	std	Y+28, r24	; 0x1c
    133a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    133c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    133e:	9f 8f       	std	Y+31, r25	; 0x1f
    1340:	8e 8f       	std	Y+30, r24	; 0x1e
    1342:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1344:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <Trigger_Ultrasonic_Sensor+0x1c2>
    134a:	9f 8f       	std	Y+31, r25	; 0x1f
    134c:	8e 8f       	std	Y+30, r24	; 0x1e
    134e:	0e c0       	rjmp	.+28     	; 0x136c <Trigger_Ultrasonic_Sensor+0x1e8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1350:	6d 81       	ldd	r22, Y+5	; 0x05
    1352:	7e 81       	ldd	r23, Y+6	; 0x06
    1354:	8f 81       	ldd	r24, Y+7	; 0x07
    1356:	98 85       	ldd	r25, Y+8	; 0x08
    1358:	e7 d1       	rcall	.+974    	; 0x1728 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	8d 87       	std	Y+13, r24	; 0x0d
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
    1362:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1364:	88 a1       	ldd	r24, Y+32	; 0x20
    1366:	8a 95       	dec	r24
    1368:	f1 f7       	brne	.-4      	; 0x1366 <Trigger_Ultrasonic_Sensor+0x1e2>
    136a:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(10);													// 10us Pulse as per datasheet of HC-SR04 Ultrasonic Sensor
	CLEARBIT(USS_TRIGGER_PORT, USS_TRIGGER_PIN);
    136c:	88 e3       	ldi	r24, 0x38	; 56
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	28 e3       	ldi	r18, 0x38	; 56
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	f9 01       	movw	r30, r18
    1376:	20 81       	ld	r18, Z
    1378:	2d 7f       	andi	r18, 0xFD	; 253
    137a:	fc 01       	movw	r30, r24
    137c:	20 83       	st	Z, r18
}
    137e:	a0 96       	adiw	r28, 0x20	; 32
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <Init_Pir>:

void Init_Pir()
{
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PIR_INPUT_DIR_REG, PIR_INPUT_PIN);						// Set the pin direction as input
    1398:	81 e3       	ldi	r24, 0x31	; 49
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	21 e3       	ldi	r18, 0x31	; 49
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	f9 01       	movw	r30, r18
    13a2:	20 81       	ld	r18, Z
    13a4:	27 7f       	andi	r18, 0xF7	; 247
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
	SETBIT(PIR_INPUT_PORT, PIR_INPUT_PIN);							// Setup the controllers internal Pull up resistor
    13aa:	82 e3       	ldi	r24, 0x32	; 50
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	22 e3       	ldi	r18, 0x32	; 50
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	f9 01       	movw	r30, r18
    13b4:	20 81       	ld	r18, Z
    13b6:	28 60       	ori	r18, 0x08	; 8
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18

	MCUCR |= (1 << ISC11) | (1 << ISC10);
    13bc:	85 e5       	ldi	r24, 0x55	; 85
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	25 e5       	ldi	r18, 0x55	; 85
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	f9 01       	movw	r30, r18
    13c6:	20 81       	ld	r18, Z
    13c8:	2c 60       	ori	r18, 0x0C	; 12
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
	GICR |= (1 << INT1);
    13ce:	8b e5       	ldi	r24, 0x5B	; 91
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	2b e5       	ldi	r18, 0x5B	; 91
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	f9 01       	movw	r30, r18
    13d8:	20 81       	ld	r18, Z
    13da:	20 68       	ori	r18, 0x80	; 128
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <Init_Ultrasonic_Sensor>:

void Init_Ultrasonic_Sensor()
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	USS_TRIGGER_DIR_REG |= (1 << USS_TRIGGER_PIN);					// Set the pin direction as output
    13ee:	87 e3       	ldi	r24, 0x37	; 55
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	27 e3       	ldi	r18, 0x37	; 55
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	f9 01       	movw	r30, r18
    13f8:	20 81       	ld	r18, Z
    13fa:	22 60       	ori	r18, 0x02	; 2
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
	USS_TRIGGER_PORT &= ~(1 << USS_TRIGGER_PIN);					// Initial state of trigger is LOW
    1400:	88 e3       	ldi	r24, 0x38	; 56
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	28 e3       	ldi	r18, 0x38	; 56
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	f9 01       	movw	r30, r18
    140a:	20 81       	ld	r18, Z
    140c:	2d 7f       	andi	r18, 0xFD	; 253
    140e:	fc 01       	movw	r30, r24
    1410:	20 83       	st	Z, r18
	
	USS_ECHO_DIR_REG &= ~(1 << USS_ECHO_PIN);						// ECHO pin is set a s input
    1412:	81 e3       	ldi	r24, 0x31	; 49
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	21 e3       	ldi	r18, 0x31	; 49
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	f9 01       	movw	r30, r18
    141c:	20 81       	ld	r18, Z
    141e:	2b 7f       	andi	r18, 0xFB	; 251
    1420:	fc 01       	movw	r30, r24
    1422:	20 83       	st	Z, r18
	USS_ECHO_PORT |= (1 << USS_ECHO_PIN);							// Keep ECHO pin pulled up
    1424:	82 e3       	ldi	r24, 0x32	; 50
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	22 e3       	ldi	r18, 0x32	; 50
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	f9 01       	movw	r30, r18
    142e:	20 81       	ld	r18, Z
    1430:	24 60       	ori	r18, 0x04	; 4
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18
	
	/* Setup rising edge interrupt on the echo pin	*/	
	MCUCR |= (1 << ISC01) | (1 << ISC00);							// Set the interrupt to trigger at the rising edge.
    1436:	85 e5       	ldi	r24, 0x55	; 85
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	25 e5       	ldi	r18, 0x55	; 85
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	f9 01       	movw	r30, r18
    1440:	20 81       	ld	r18, Z
    1442:	23 60       	ori	r18, 0x03	; 3
    1444:	fc 01       	movw	r30, r24
    1446:	20 83       	st	Z, r18
	GICR |= (1 << INT0);
    1448:	8b e5       	ldi	r24, 0x5B	; 91
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	2b e5       	ldi	r18, 0x5B	; 91
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	f9 01       	movw	r30, r18
    1452:	20 81       	ld	r18, Z
    1454:	20 64       	ori	r18, 0x40	; 64
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <Get_Uss_Count>:
{
	CLEARBIT(PORTC, led_color);
}

uint16_t Get_Uss_Count()
{
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	2e 97       	sbiw	r28, 0x0e	; 14
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
	Trigger_Ultrasonic_Sensor();
    1474:	87 de       	rcall	.-754    	; 0x1184 <Trigger_Ultrasonic_Sensor>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	aa e7       	ldi	r26, 0x7A	; 122
    147c:	b4 e4       	ldi	r27, 0x44	; 68
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	ab 83       	std	Y+3, r26	; 0x03
    1484:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4a e7       	ldi	r20, 0x7A	; 122
    148c:	53 e4       	ldi	r21, 0x43	; 67
    148e:	69 81       	ldd	r22, Y+1	; 0x01
    1490:	7a 81       	ldd	r23, Y+2	; 0x02
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	ed d1       	rcall	.+986    	; 0x1872 <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	af 83       	std	Y+7, r26	; 0x07
    14a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	6d 81       	ldd	r22, Y+5	; 0x05
    14ae:	7e 81       	ldd	r23, Y+6	; 0x06
    14b0:	8f 81       	ldd	r24, Y+7	; 0x07
    14b2:	98 85       	ldd	r25, Y+8	; 0x08
    14b4:	cd d0       	rcall	.+410    	; 0x1650 <__cmpsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <Get_Uss_Count+0x64>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9a 87       	std	Y+10, r25	; 0x0a
    14c0:	89 87       	std	Y+9, r24	; 0x09
    14c2:	3b c0       	rjmp	.+118    	; 0x153a <Get_Uss_Count+0xda>
	else if (__tmp > 65535)
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	4f e7       	ldi	r20, 0x7F	; 127
    14ca:	57 e4       	ldi	r21, 0x47	; 71
    14cc:	6d 81       	ldd	r22, Y+5	; 0x05
    14ce:	7e 81       	ldd	r23, Y+6	; 0x06
    14d0:	8f 81       	ldd	r24, Y+7	; 0x07
    14d2:	98 85       	ldd	r25, Y+8	; 0x08
    14d4:	ca d1       	rcall	.+916    	; 0x186a <__gesf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	3c f5       	brge	.+78     	; 0x1528 <Get_Uss_Count+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e2       	ldi	r20, 0x20	; 32
    14e0:	51 e4       	ldi	r21, 0x41	; 65
    14e2:	69 81       	ldd	r22, Y+1	; 0x01
    14e4:	7a 81       	ldd	r23, Y+2	; 0x02
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	c3 d1       	rcall	.+902    	; 0x1872 <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	19 d1       	rcall	.+562    	; 0x1728 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9a 87       	std	Y+10, r25	; 0x0a
    14fc:	89 87       	std	Y+9, r24	; 0x09
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <Get_Uss_Count+0xbe>
    1500:	89 e1       	ldi	r24, 0x19	; 25
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9c 87       	std	Y+12, r25	; 0x0c
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1508:	8b 85       	ldd	r24, Y+11	; 0x0b
    150a:	9c 85       	ldd	r25, Y+12	; 0x0c
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <Get_Uss_Count+0xac>
    1510:	9c 87       	std	Y+12, r25	; 0x0c
    1512:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9a 87       	std	Y+10, r25	; 0x0a
    151c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151e:	89 85       	ldd	r24, Y+9	; 0x09
    1520:	9a 85       	ldd	r25, Y+10	; 0x0a
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f7       	brne	.-38     	; 0x1500 <Get_Uss_Count+0xa0>
    1526:	13 c0       	rjmp	.+38     	; 0x154e <Get_Uss_Count+0xee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	6d 81       	ldd	r22, Y+5	; 0x05
    152a:	7e 81       	ldd	r23, Y+6	; 0x06
    152c:	8f 81       	ldd	r24, Y+7	; 0x07
    152e:	98 85       	ldd	r25, Y+8	; 0x08
    1530:	fb d0       	rcall	.+502    	; 0x1728 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9a 87       	std	Y+10, r25	; 0x0a
    1538:	89 87       	std	Y+9, r24	; 0x09
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	9e 87       	std	Y+14, r25	; 0x0e
    1540:	8d 87       	std	Y+13, r24	; 0x0d
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <Get_Uss_Count+0xe6>
    154a:	9e 87       	std	Y+14, r25	; 0x0e
    154c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	#ifdef DEBUG_ON
	SendDebug("USS Triggered");
    154e:	8a e8       	ldi	r24, 0x8A	; 138
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 d6       	rcall	.+3076   	; 0x2158 <__data_load_end+0x7a4>
	SendDebug("USS count:");
    1554:	88 e9       	ldi	r24, 0x98	; 152
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	ff d5       	rcall	.+3070   	; 0x2158 <__data_load_end+0x7a4>
	USART_Transmit_dec(UssPulseCount);
    155a:	80 91 c5 00 	lds	r24, 0x00C5
    155e:	90 91 c6 00 	lds	r25, 0x00C6
    1562:	1b d6       	rcall	.+3126   	; 0x219a <__data_load_end+0x7e6>
	USART_SendByte(0x0D);
    1564:	8d e0       	ldi	r24, 0x0D	; 13
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	dd d5       	rcall	.+3002   	; 0x2124 <__data_load_end+0x770>
	USART_SendByte(0x0A);
    156a:	8a e0       	ldi	r24, 0x0A	; 10
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	da d5       	rcall	.+2996   	; 0x2124 <__data_load_end+0x770>
	#endif
	return UssPulseCount;
    1570:	80 91 c5 00 	lds	r24, 0x00C5
    1574:	90 91 c6 00 	lds	r25, 0x00C6
}
    1578:	2e 96       	adiw	r28, 0x0e	; 14
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <Init_Timer1>:

void Init_Timer1()
{
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1592:	8c e4       	ldi	r24, 0x4C	; 76
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	fc 01       	movw	r30, r24
    1598:	11 82       	std	Z+1, r1	; 0x01
    159a:	10 82       	st	Z, r1
}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <Start_Timer1>:

void Start_Timer1()
{
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS10);		// No pre-scalar
    15aa:	8e e4       	ldi	r24, 0x4E	; 78
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	2e e4       	ldi	r18, 0x4E	; 78
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	f9 01       	movw	r30, r18
    15b4:	20 81       	ld	r18, Z
    15b6:	21 60       	ori	r18, 0x01	; 1
    15b8:	fc 01       	movw	r30, r24
    15ba:	20 83       	st	Z, r18
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <Stop_Timer1>:

void Stop_Timer1()
{
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS10);
    15ca:	8e e4       	ldi	r24, 0x4E	; 78
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	2e e4       	ldi	r18, 0x4E	; 78
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	f9 01       	movw	r30, r18
    15d4:	20 81       	ld	r18, Z
    15d6:	2e 7f       	andi	r18, 0xFE	; 254
    15d8:	fc 01       	movw	r30, r24
    15da:	20 83       	st	Z, r18
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	08 95       	ret

000015e2 <Get_Pir_count>:

uint16_t Get_Pir_count()
{
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	#if DEBUG_ON
	SendDebug("PIR@");
    15ea:	83 ea       	ldi	r24, 0xA3	; 163
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	b4 d5       	rcall	.+2920   	; 0x2158 <__data_load_end+0x7a4>
	USART_Transmit_dec(pir_trigger_count);
    15f0:	80 91 c7 00 	lds	r24, 0x00C7
    15f4:	90 91 c8 00 	lds	r25, 0x00C8
    15f8:	d0 d5       	rcall	.+2976   	; 0x219a <__data_load_end+0x7e6>
	#endif
	return pir_trigger_count;
    15fa:	80 91 c7 00 	lds	r24, 0x00C7
    15fe:	90 91 c8 00 	lds	r25, 0x00C8
}
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <Reset_Pir_count>:

void Reset_Pir_count()
{
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count = 0;
    1610:	10 92 c8 00 	sts	0x00C8, r1
    1614:	10 92 c7 00 	sts	0x00C7, r1
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <Init_Gpio>:
	
	return 0;
}

void Init_Gpio()
{
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	RELAY_PORT_DIR_REG |= (1 << RELAY_PIN);		// Set the relay pin as a output pin
    1626:	87 e3       	ldi	r24, 0x37	; 55
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	27 e3       	ldi	r18, 0x37	; 55
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	f9 01       	movw	r30, r18
    1630:	20 81       	ld	r18, Z
    1632:	21 60       	ori	r18, 0x01	; 1
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
	RELAY_PORT &= ~(1 << RELAY_PIN);			// Initialise relay in OFF state.
    1638:	88 e3       	ldi	r24, 0x38	; 56
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	28 e3       	ldi	r18, 0x38	; 56
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	f9 01       	movw	r30, r18
    1642:	20 81       	ld	r18, Z
    1644:	2e 7f       	andi	r18, 0xFE	; 254
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18
}
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <__cmpsf2>:
    1650:	97 d0       	rcall	.+302    	; 0x1780 <__fp_cmp>
    1652:	08 f4       	brcc	.+2      	; 0x1656 <__cmpsf2+0x6>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	08 95       	ret

00001658 <__divsf3>:
    1658:	0c d0       	rcall	.+24     	; 0x1672 <__divsf3x>
    165a:	cd c0       	rjmp	.+410    	; 0x17f6 <__fp_round>
    165c:	c5 d0       	rcall	.+394    	; 0x17e8 <__fp_pscB>
    165e:	40 f0       	brcs	.+16     	; 0x1670 <__divsf3+0x18>
    1660:	bc d0       	rcall	.+376    	; 0x17da <__fp_pscA>
    1662:	30 f0       	brcs	.+12     	; 0x1670 <__divsf3+0x18>
    1664:	21 f4       	brne	.+8      	; 0x166e <__divsf3+0x16>
    1666:	5f 3f       	cpi	r21, 0xFF	; 255
    1668:	19 f0       	breq	.+6      	; 0x1670 <__divsf3+0x18>
    166a:	ae c0       	rjmp	.+348    	; 0x17c8 <__fp_inf>
    166c:	51 11       	cpse	r21, r1
    166e:	f7 c0       	rjmp	.+494    	; 0x185e <__fp_szero>
    1670:	b1 c0       	rjmp	.+354    	; 0x17d4 <__fp_nan>

00001672 <__divsf3x>:
    1672:	d2 d0       	rcall	.+420    	; 0x1818 <__fp_split3>
    1674:	98 f3       	brcs	.-26     	; 0x165c <__divsf3+0x4>

00001676 <__divsf3_pse>:
    1676:	99 23       	and	r25, r25
    1678:	c9 f3       	breq	.-14     	; 0x166c <__divsf3+0x14>
    167a:	55 23       	and	r21, r21
    167c:	b1 f3       	breq	.-20     	; 0x166a <__divsf3+0x12>
    167e:	95 1b       	sub	r25, r21
    1680:	55 0b       	sbc	r21, r21
    1682:	bb 27       	eor	r27, r27
    1684:	aa 27       	eor	r26, r26
    1686:	62 17       	cp	r22, r18
    1688:	73 07       	cpc	r23, r19
    168a:	84 07       	cpc	r24, r20
    168c:	38 f0       	brcs	.+14     	; 0x169c <__divsf3_pse+0x26>
    168e:	9f 5f       	subi	r25, 0xFF	; 255
    1690:	5f 4f       	sbci	r21, 0xFF	; 255
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	44 1f       	adc	r20, r20
    1698:	aa 1f       	adc	r26, r26
    169a:	a9 f3       	breq	.-22     	; 0x1686 <__divsf3_pse+0x10>
    169c:	33 d0       	rcall	.+102    	; 0x1704 <__divsf3_pse+0x8e>
    169e:	0e 2e       	mov	r0, r30
    16a0:	3a f0       	brmi	.+14     	; 0x16b0 <__divsf3_pse+0x3a>
    16a2:	e0 e8       	ldi	r30, 0x80	; 128
    16a4:	30 d0       	rcall	.+96     	; 0x1706 <__divsf3_pse+0x90>
    16a6:	91 50       	subi	r25, 0x01	; 1
    16a8:	50 40       	sbci	r21, 0x00	; 0
    16aa:	e6 95       	lsr	r30
    16ac:	00 1c       	adc	r0, r0
    16ae:	ca f7       	brpl	.-14     	; 0x16a2 <__divsf3_pse+0x2c>
    16b0:	29 d0       	rcall	.+82     	; 0x1704 <__divsf3_pse+0x8e>
    16b2:	fe 2f       	mov	r31, r30
    16b4:	27 d0       	rcall	.+78     	; 0x1704 <__divsf3_pse+0x8e>
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	bb 1f       	adc	r27, r27
    16be:	26 17       	cp	r18, r22
    16c0:	37 07       	cpc	r19, r23
    16c2:	48 07       	cpc	r20, r24
    16c4:	ab 07       	cpc	r26, r27
    16c6:	b0 e8       	ldi	r27, 0x80	; 128
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__divsf3_pse+0x56>
    16ca:	bb 0b       	sbc	r27, r27
    16cc:	80 2d       	mov	r24, r0
    16ce:	bf 01       	movw	r22, r30
    16d0:	ff 27       	eor	r31, r31
    16d2:	93 58       	subi	r25, 0x83	; 131
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	2a f0       	brmi	.+10     	; 0x16e2 <__divsf3_pse+0x6c>
    16d8:	9e 3f       	cpi	r25, 0xFE	; 254
    16da:	51 05       	cpc	r21, r1
    16dc:	68 f0       	brcs	.+26     	; 0x16f8 <__divsf3_pse+0x82>
    16de:	74 c0       	rjmp	.+232    	; 0x17c8 <__fp_inf>
    16e0:	be c0       	rjmp	.+380    	; 0x185e <__fp_szero>
    16e2:	5f 3f       	cpi	r21, 0xFF	; 255
    16e4:	ec f3       	brlt	.-6      	; 0x16e0 <__divsf3_pse+0x6a>
    16e6:	98 3e       	cpi	r25, 0xE8	; 232
    16e8:	dc f3       	brlt	.-10     	; 0x16e0 <__divsf3_pse+0x6a>
    16ea:	86 95       	lsr	r24
    16ec:	77 95       	ror	r23
    16ee:	67 95       	ror	r22
    16f0:	b7 95       	ror	r27
    16f2:	f7 95       	ror	r31
    16f4:	9f 5f       	subi	r25, 0xFF	; 255
    16f6:	c9 f7       	brne	.-14     	; 0x16ea <__divsf3_pse+0x74>
    16f8:	88 0f       	add	r24, r24
    16fa:	91 1d       	adc	r25, r1
    16fc:	96 95       	lsr	r25
    16fe:	87 95       	ror	r24
    1700:	97 f9       	bld	r25, 7
    1702:	08 95       	ret
    1704:	e1 e0       	ldi	r30, 0x01	; 1
    1706:	66 0f       	add	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	bb 1f       	adc	r27, r27
    170e:	62 17       	cp	r22, r18
    1710:	73 07       	cpc	r23, r19
    1712:	84 07       	cpc	r24, r20
    1714:	ba 07       	cpc	r27, r26
    1716:	20 f0       	brcs	.+8      	; 0x1720 <__divsf3_pse+0xaa>
    1718:	62 1b       	sub	r22, r18
    171a:	73 0b       	sbc	r23, r19
    171c:	84 0b       	sbc	r24, r20
    171e:	ba 0b       	sbc	r27, r26
    1720:	ee 1f       	adc	r30, r30
    1722:	88 f7       	brcc	.-30     	; 0x1706 <__divsf3_pse+0x90>
    1724:	e0 95       	com	r30
    1726:	08 95       	ret

00001728 <__fixunssfsi>:
    1728:	7f d0       	rcall	.+254    	; 0x1828 <__fp_splitA>
    172a:	88 f0       	brcs	.+34     	; 0x174e <__fixunssfsi+0x26>
    172c:	9f 57       	subi	r25, 0x7F	; 127
    172e:	90 f0       	brcs	.+36     	; 0x1754 <__fixunssfsi+0x2c>
    1730:	b9 2f       	mov	r27, r25
    1732:	99 27       	eor	r25, r25
    1734:	b7 51       	subi	r27, 0x17	; 23
    1736:	a0 f0       	brcs	.+40     	; 0x1760 <__fixunssfsi+0x38>
    1738:	d1 f0       	breq	.+52     	; 0x176e <__fixunssfsi+0x46>
    173a:	66 0f       	add	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	88 1f       	adc	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	1a f0       	brmi	.+6      	; 0x174a <__fixunssfsi+0x22>
    1744:	ba 95       	dec	r27
    1746:	c9 f7       	brne	.-14     	; 0x173a <__fixunssfsi+0x12>
    1748:	12 c0       	rjmp	.+36     	; 0x176e <__fixunssfsi+0x46>
    174a:	b1 30       	cpi	r27, 0x01	; 1
    174c:	81 f0       	breq	.+32     	; 0x176e <__fixunssfsi+0x46>
    174e:	86 d0       	rcall	.+268    	; 0x185c <__fp_zero>
    1750:	b1 e0       	ldi	r27, 0x01	; 1
    1752:	08 95       	ret
    1754:	83 c0       	rjmp	.+262    	; 0x185c <__fp_zero>
    1756:	67 2f       	mov	r22, r23
    1758:	78 2f       	mov	r23, r24
    175a:	88 27       	eor	r24, r24
    175c:	b8 5f       	subi	r27, 0xF8	; 248
    175e:	39 f0       	breq	.+14     	; 0x176e <__fixunssfsi+0x46>
    1760:	b9 3f       	cpi	r27, 0xF9	; 249
    1762:	cc f3       	brlt	.-14     	; 0x1756 <__fixunssfsi+0x2e>
    1764:	86 95       	lsr	r24
    1766:	77 95       	ror	r23
    1768:	67 95       	ror	r22
    176a:	b3 95       	inc	r27
    176c:	d9 f7       	brne	.-10     	; 0x1764 <__fixunssfsi+0x3c>
    176e:	3e f4       	brtc	.+14     	; 0x177e <__fixunssfsi+0x56>
    1770:	90 95       	com	r25
    1772:	80 95       	com	r24
    1774:	70 95       	com	r23
    1776:	61 95       	neg	r22
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	8f 4f       	sbci	r24, 0xFF	; 255
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	08 95       	ret

00001780 <__fp_cmp>:
    1780:	99 0f       	add	r25, r25
    1782:	00 08       	sbc	r0, r0
    1784:	55 0f       	add	r21, r21
    1786:	aa 0b       	sbc	r26, r26
    1788:	e0 e8       	ldi	r30, 0x80	; 128
    178a:	fe ef       	ldi	r31, 0xFE	; 254
    178c:	16 16       	cp	r1, r22
    178e:	17 06       	cpc	r1, r23
    1790:	e8 07       	cpc	r30, r24
    1792:	f9 07       	cpc	r31, r25
    1794:	c0 f0       	brcs	.+48     	; 0x17c6 <__fp_cmp+0x46>
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	e4 07       	cpc	r30, r20
    179c:	f5 07       	cpc	r31, r21
    179e:	98 f0       	brcs	.+38     	; 0x17c6 <__fp_cmp+0x46>
    17a0:	62 1b       	sub	r22, r18
    17a2:	73 0b       	sbc	r23, r19
    17a4:	84 0b       	sbc	r24, r20
    17a6:	95 0b       	sbc	r25, r21
    17a8:	39 f4       	brne	.+14     	; 0x17b8 <__fp_cmp+0x38>
    17aa:	0a 26       	eor	r0, r26
    17ac:	61 f0       	breq	.+24     	; 0x17c6 <__fp_cmp+0x46>
    17ae:	23 2b       	or	r18, r19
    17b0:	24 2b       	or	r18, r20
    17b2:	25 2b       	or	r18, r21
    17b4:	21 f4       	brne	.+8      	; 0x17be <__fp_cmp+0x3e>
    17b6:	08 95       	ret
    17b8:	0a 26       	eor	r0, r26
    17ba:	09 f4       	brne	.+2      	; 0x17be <__fp_cmp+0x3e>
    17bc:	a1 40       	sbci	r26, 0x01	; 1
    17be:	a6 95       	lsr	r26
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	81 1d       	adc	r24, r1
    17c4:	81 1d       	adc	r24, r1
    17c6:	08 95       	ret

000017c8 <__fp_inf>:
    17c8:	97 f9       	bld	r25, 7
    17ca:	9f 67       	ori	r25, 0x7F	; 127
    17cc:	80 e8       	ldi	r24, 0x80	; 128
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	08 95       	ret

000017d4 <__fp_nan>:
    17d4:	9f ef       	ldi	r25, 0xFF	; 255
    17d6:	80 ec       	ldi	r24, 0xC0	; 192
    17d8:	08 95       	ret

000017da <__fp_pscA>:
    17da:	00 24       	eor	r0, r0
    17dc:	0a 94       	dec	r0
    17de:	16 16       	cp	r1, r22
    17e0:	17 06       	cpc	r1, r23
    17e2:	18 06       	cpc	r1, r24
    17e4:	09 06       	cpc	r0, r25
    17e6:	08 95       	ret

000017e8 <__fp_pscB>:
    17e8:	00 24       	eor	r0, r0
    17ea:	0a 94       	dec	r0
    17ec:	12 16       	cp	r1, r18
    17ee:	13 06       	cpc	r1, r19
    17f0:	14 06       	cpc	r1, r20
    17f2:	05 06       	cpc	r0, r21
    17f4:	08 95       	ret

000017f6 <__fp_round>:
    17f6:	09 2e       	mov	r0, r25
    17f8:	03 94       	inc	r0
    17fa:	00 0c       	add	r0, r0
    17fc:	11 f4       	brne	.+4      	; 0x1802 <__fp_round+0xc>
    17fe:	88 23       	and	r24, r24
    1800:	52 f0       	brmi	.+20     	; 0x1816 <__fp_round+0x20>
    1802:	bb 0f       	add	r27, r27
    1804:	40 f4       	brcc	.+16     	; 0x1816 <__fp_round+0x20>
    1806:	bf 2b       	or	r27, r31
    1808:	11 f4       	brne	.+4      	; 0x180e <__fp_round+0x18>
    180a:	60 ff       	sbrs	r22, 0
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <__fp_round+0x20>
    180e:	6f 5f       	subi	r22, 0xFF	; 255
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	8f 4f       	sbci	r24, 0xFF	; 255
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	08 95       	ret

00001818 <__fp_split3>:
    1818:	57 fd       	sbrc	r21, 7
    181a:	90 58       	subi	r25, 0x80	; 128
    181c:	44 0f       	add	r20, r20
    181e:	55 1f       	adc	r21, r21
    1820:	59 f0       	breq	.+22     	; 0x1838 <__fp_splitA+0x10>
    1822:	5f 3f       	cpi	r21, 0xFF	; 255
    1824:	71 f0       	breq	.+28     	; 0x1842 <__fp_splitA+0x1a>
    1826:	47 95       	ror	r20

00001828 <__fp_splitA>:
    1828:	88 0f       	add	r24, r24
    182a:	97 fb       	bst	r25, 7
    182c:	99 1f       	adc	r25, r25
    182e:	61 f0       	breq	.+24     	; 0x1848 <__fp_splitA+0x20>
    1830:	9f 3f       	cpi	r25, 0xFF	; 255
    1832:	79 f0       	breq	.+30     	; 0x1852 <__fp_splitA+0x2a>
    1834:	87 95       	ror	r24
    1836:	08 95       	ret
    1838:	12 16       	cp	r1, r18
    183a:	13 06       	cpc	r1, r19
    183c:	14 06       	cpc	r1, r20
    183e:	55 1f       	adc	r21, r21
    1840:	f2 cf       	rjmp	.-28     	; 0x1826 <__fp_split3+0xe>
    1842:	46 95       	lsr	r20
    1844:	f1 df       	rcall	.-30     	; 0x1828 <__fp_splitA>
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <__fp_splitA+0x30>
    1848:	16 16       	cp	r1, r22
    184a:	17 06       	cpc	r1, r23
    184c:	18 06       	cpc	r1, r24
    184e:	99 1f       	adc	r25, r25
    1850:	f1 cf       	rjmp	.-30     	; 0x1834 <__fp_splitA+0xc>
    1852:	86 95       	lsr	r24
    1854:	71 05       	cpc	r23, r1
    1856:	61 05       	cpc	r22, r1
    1858:	08 94       	sec
    185a:	08 95       	ret

0000185c <__fp_zero>:
    185c:	e8 94       	clt

0000185e <__fp_szero>:
    185e:	bb 27       	eor	r27, r27
    1860:	66 27       	eor	r22, r22
    1862:	77 27       	eor	r23, r23
    1864:	cb 01       	movw	r24, r22
    1866:	97 f9       	bld	r25, 7
    1868:	08 95       	ret

0000186a <__gesf2>:
    186a:	8a df       	rcall	.-236    	; 0x1780 <__fp_cmp>
    186c:	08 f4       	brcc	.+2      	; 0x1870 <__gesf2+0x6>
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	08 95       	ret

00001872 <__mulsf3>:
    1872:	0b d0       	rcall	.+22     	; 0x188a <__mulsf3x>
    1874:	c0 cf       	rjmp	.-128    	; 0x17f6 <__fp_round>
    1876:	b1 df       	rcall	.-158    	; 0x17da <__fp_pscA>
    1878:	28 f0       	brcs	.+10     	; 0x1884 <__mulsf3+0x12>
    187a:	b6 df       	rcall	.-148    	; 0x17e8 <__fp_pscB>
    187c:	18 f0       	brcs	.+6      	; 0x1884 <__mulsf3+0x12>
    187e:	95 23       	and	r25, r21
    1880:	09 f0       	breq	.+2      	; 0x1884 <__mulsf3+0x12>
    1882:	a2 cf       	rjmp	.-188    	; 0x17c8 <__fp_inf>
    1884:	a7 cf       	rjmp	.-178    	; 0x17d4 <__fp_nan>
    1886:	11 24       	eor	r1, r1
    1888:	ea cf       	rjmp	.-44     	; 0x185e <__fp_szero>

0000188a <__mulsf3x>:
    188a:	c6 df       	rcall	.-116    	; 0x1818 <__fp_split3>
    188c:	a0 f3       	brcs	.-24     	; 0x1876 <__mulsf3+0x4>

0000188e <__mulsf3_pse>:
    188e:	95 9f       	mul	r25, r21
    1890:	d1 f3       	breq	.-12     	; 0x1886 <__mulsf3+0x14>
    1892:	95 0f       	add	r25, r21
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	55 1f       	adc	r21, r21
    1898:	62 9f       	mul	r22, r18
    189a:	f0 01       	movw	r30, r0
    189c:	72 9f       	mul	r23, r18
    189e:	bb 27       	eor	r27, r27
    18a0:	f0 0d       	add	r31, r0
    18a2:	b1 1d       	adc	r27, r1
    18a4:	63 9f       	mul	r22, r19
    18a6:	aa 27       	eor	r26, r26
    18a8:	f0 0d       	add	r31, r0
    18aa:	b1 1d       	adc	r27, r1
    18ac:	aa 1f       	adc	r26, r26
    18ae:	64 9f       	mul	r22, r20
    18b0:	66 27       	eor	r22, r22
    18b2:	b0 0d       	add	r27, r0
    18b4:	a1 1d       	adc	r26, r1
    18b6:	66 1f       	adc	r22, r22
    18b8:	82 9f       	mul	r24, r18
    18ba:	22 27       	eor	r18, r18
    18bc:	b0 0d       	add	r27, r0
    18be:	a1 1d       	adc	r26, r1
    18c0:	62 1f       	adc	r22, r18
    18c2:	73 9f       	mul	r23, r19
    18c4:	b0 0d       	add	r27, r0
    18c6:	a1 1d       	adc	r26, r1
    18c8:	62 1f       	adc	r22, r18
    18ca:	83 9f       	mul	r24, r19
    18cc:	a0 0d       	add	r26, r0
    18ce:	61 1d       	adc	r22, r1
    18d0:	22 1f       	adc	r18, r18
    18d2:	74 9f       	mul	r23, r20
    18d4:	33 27       	eor	r19, r19
    18d6:	a0 0d       	add	r26, r0
    18d8:	61 1d       	adc	r22, r1
    18da:	23 1f       	adc	r18, r19
    18dc:	84 9f       	mul	r24, r20
    18de:	60 0d       	add	r22, r0
    18e0:	21 1d       	adc	r18, r1
    18e2:	82 2f       	mov	r24, r18
    18e4:	76 2f       	mov	r23, r22
    18e6:	6a 2f       	mov	r22, r26
    18e8:	11 24       	eor	r1, r1
    18ea:	9f 57       	subi	r25, 0x7F	; 127
    18ec:	50 40       	sbci	r21, 0x00	; 0
    18ee:	8a f0       	brmi	.+34     	; 0x1912 <__mulsf3_pse+0x84>
    18f0:	e1 f0       	breq	.+56     	; 0x192a <__mulsf3_pse+0x9c>
    18f2:	88 23       	and	r24, r24
    18f4:	4a f0       	brmi	.+18     	; 0x1908 <__mulsf3_pse+0x7a>
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	bb 1f       	adc	r27, r27
    18fc:	66 1f       	adc	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	91 50       	subi	r25, 0x01	; 1
    1904:	50 40       	sbci	r21, 0x00	; 0
    1906:	a9 f7       	brne	.-22     	; 0x18f2 <__mulsf3_pse+0x64>
    1908:	9e 3f       	cpi	r25, 0xFE	; 254
    190a:	51 05       	cpc	r21, r1
    190c:	70 f0       	brcs	.+28     	; 0x192a <__mulsf3_pse+0x9c>
    190e:	5c cf       	rjmp	.-328    	; 0x17c8 <__fp_inf>
    1910:	a6 cf       	rjmp	.-180    	; 0x185e <__fp_szero>
    1912:	5f 3f       	cpi	r21, 0xFF	; 255
    1914:	ec f3       	brlt	.-6      	; 0x1910 <__mulsf3_pse+0x82>
    1916:	98 3e       	cpi	r25, 0xE8	; 232
    1918:	dc f3       	brlt	.-10     	; 0x1910 <__mulsf3_pse+0x82>
    191a:	86 95       	lsr	r24
    191c:	77 95       	ror	r23
    191e:	67 95       	ror	r22
    1920:	b7 95       	ror	r27
    1922:	f7 95       	ror	r31
    1924:	e7 95       	ror	r30
    1926:	9f 5f       	subi	r25, 0xFF	; 255
    1928:	c1 f7       	brne	.-16     	; 0x191a <__mulsf3_pse+0x8c>
    192a:	fe 2b       	or	r31, r30
    192c:	88 0f       	add	r24, r24
    192e:	91 1d       	adc	r25, r1
    1930:	96 95       	lsr	r25
    1932:	87 95       	ror	r24
    1934:	97 f9       	bld	r25, 7
    1936:	08 95       	ret

00001938 <__umulhisi3>:
    1938:	a2 9f       	mul	r26, r18
    193a:	b0 01       	movw	r22, r0
    193c:	b3 9f       	mul	r27, r19
    193e:	c0 01       	movw	r24, r0
    1940:	a3 9f       	mul	r26, r19
    1942:	01 d0       	rcall	.+2      	; 0x1946 <__umulhisi3+0xe>
    1944:	b2 9f       	mul	r27, r18
    1946:	70 0d       	add	r23, r0
    1948:	81 1d       	adc	r24, r1
    194a:	11 24       	eor	r1, r1
    194c:	91 1d       	adc	r25, r1
    194e:	08 95       	ret

00001950 <_exit>:
    1950:	f8 94       	cli

00001952 <__stop_program>:
    1952:	ff cf       	rjmp	.-2      	; 0x1952 <__stop_program>
