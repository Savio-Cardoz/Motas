
Motas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00001bb6  00001c4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  0080009e  0080009e  00001c88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015c3  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d16  00000000  00000000  00003c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005cc  00000000  00000000  00004970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000689  00000000  00000000  00004f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b08  00000000  00000000  000055c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000060cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	87 c9       	rjmp	.-3314   	; 0xfffff312 <__eeprom_end+0xff7ef312>
       4:	a5 c9       	rjmp	.-3254   	; 0xfffff350 <__eeprom_end+0xff7ef350>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	34 c0       	rjmp	.+104    	; 0x80 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e6 eb       	ldi	r30, 0xB6	; 182
      3a:	fb e1       	ldi	r31, 0x1B	; 27
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	ae 39       	cpi	r26, 0x9E	; 158
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	ae e9       	ldi	r26, 0x9E	; 158
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a1 3f       	cpi	r26, 0xF1	; 241
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	df d3       	rcall	.+1982   	; 0x818 <main>
      5a:	ab cd       	rjmp	.-1194   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Atmega_init>:
#include "Atmega_Config.h"
#include "Peripheral_Drivers.h"
#include "debug_func.h"

void Atmega_init()
{
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
	USART_Init();
      66:	40 d0       	rcall	.+128    	; 0xe8 <USART_Init>
	
#ifdef DEBUG_ON
	SendDebug("Serial OK!");
      68:	82 e6       	ldi	r24, 0x62	; 98
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	75 d0       	rcall	.+234    	; 0x158 <SendDebug>
#endif // DEBUG_ON
	
	Init_Ultrasonic_Sensor();
      6e:	fd da       	rcall	.-2566   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
	Init_Pir();
      70:	d1 da       	rcall	.-2654   	; 0xfffff614 <__eeprom_end+0xff7ef614>
	Init_Timer1();
      72:	c4 db       	rcall	.-2168   	; 0xfffff7fc <__eeprom_end+0xff7ef7fc>
	Init_Gpio();
      74:	05 dc       	rcall	.-2038   	; 0xfffff880 <__eeprom_end+0xff7ef880>
	DebugLedInit();
      76:	36 d2       	rcall	.+1132   	; 0x4e4 <DebugLedInit>
	sei();
      78:	78 94       	sei
      7a:	df 91       	pop	r29
      7c:	cf 91       	pop	r28
      7e:	08 95       	ret

00000080 <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Atmega_Uart.h"

ISR(USART_RXC_vect)		// USART interrupt service routine.
{
      80:	1f 92       	push	r1
      82:	0f 92       	push	r0
      84:	00 90 5f 00 	lds	r0, 0x005F
      88:	0f 92       	push	r0
      8a:	11 24       	eor	r1, r1
      8c:	2f 93       	push	r18
      8e:	3f 93       	push	r19
      90:	4f 93       	push	r20
      92:	5f 93       	push	r21
      94:	6f 93       	push	r22
      96:	7f 93       	push	r23
      98:	8f 93       	push	r24
      9a:	9f 93       	push	r25
      9c:	af 93       	push	r26
      9e:	bf 93       	push	r27
      a0:	ef 93       	push	r30
      a2:	ff 93       	push	r31
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	1f 92       	push	r1
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t err;
	err = Ring_Add(UDR);
      ae:	8c e2       	ldi	r24, 0x2C	; 44
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	80 81       	ld	r24, Z
      b6:	a7 d1       	rcall	.+846    	; 0x406 <Ring_Add>
      b8:	89 83       	std	Y+1, r24	; 0x01

	if (err = -1)
      ba:	8f ef       	ldi	r24, 0xFF	; 255
      bc:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Error Handling code here. We may need to think if we need error handling for this */
	}
}
      be:	0f 90       	pop	r0
      c0:	df 91       	pop	r29
      c2:	cf 91       	pop	r28
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	bf 91       	pop	r27
      ca:	af 91       	pop	r26
      cc:	9f 91       	pop	r25
      ce:	8f 91       	pop	r24
      d0:	7f 91       	pop	r23
      d2:	6f 91       	pop	r22
      d4:	5f 91       	pop	r21
      d6:	4f 91       	pop	r20
      d8:	3f 91       	pop	r19
      da:	2f 91       	pop	r18
      dc:	0f 90       	pop	r0
      de:	00 92 5f 00 	sts	0x005F, r0
      e2:	0f 90       	pop	r0
      e4:	1f 90       	pop	r1
      e6:	18 95       	reti

000000e8 <USART_Init>:
 
void USART_Init(void)
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
   UBRRL = BAUD_PRESCALE;// Load lower 8-bits into the low byte of the UBRR register
      f0:	89 e2       	ldi	r24, 0x29	; 41
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2c e0       	ldi	r18, 0x0C	; 12
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
   UBRRH = (BAUD_PRESCALE >> 8); 
      fa:	80 e4       	ldi	r24, 0x40	; 64
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	fc 01       	movw	r30, r24
     100:	10 82       	st	Z, r1
	 /* Load upper 8-bits into the high byte of the UBRR register
    Default frame format is 8 data bits, no parity, 1 stop bit
  to change use UCSRC, see AVR datasheet*/ 
	
	UCSRA |= (1 << U2X);
     102:	8b e2       	ldi	r24, 0x2B	; 43
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2b e2       	ldi	r18, 0x2B	; 43
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	22 60       	ori	r18, 0x02	; 2
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
  // Enable receiver and transmitter and receive complete interrupt 
  UCSRB = ((1<<TXEN)|(1<<RXEN) | (1<<RXCIE));
     114:	8a e2       	ldi	r24, 0x2A	; 42
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	28 e9       	ldi	r18, 0x98	; 152
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <USART_SendByte>:


void USART_SendByte(uint8_t u8Data)
{
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	1f 92       	push	r1
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	89 83       	std	Y+1, r24	; 0x01
  while((UCSRA &(1<<UDRE)) == 0);
     130:	00 00       	nop
     132:	8b e2       	ldi	r24, 0x2B	; 43
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	88 2f       	mov	r24, r24
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	80 72       	andi	r24, 0x20	; 32
     140:	99 27       	eor	r25, r25
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	b1 f3       	breq	.-20     	; 0x132 <USART_SendByte+0xe>
  UDR = u8Data;
     146:	8c e2       	ldi	r24, 0x2C	; 44
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	29 81       	ldd	r18, Y+1	; 0x01
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
}
     150:	0f 90       	pop	r0
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <SendDebug>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void SendDebug(char * StringPtr)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	00 d0       	rcall	.+0      	; 0x15e <SendDebug+0x6>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	9a 83       	std	Y+2, r25	; 0x02
     164:	89 83       	std	Y+1, r24	; 0x01
	while(*StringPtr != 0x00)
     166:	0a c0       	rjmp	.+20     	; 0x17c <SendDebug+0x24>
	{
		USART_SendByte(*StringPtr);
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	fc 01       	movw	r30, r24
     16e:	80 81       	ld	r24, Z
     170:	d9 df       	rcall	.-78     	; 0x124 <USART_SendByte>
		StringPtr++;
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	01 96       	adiw	r24, 0x01	; 1
     178:	9a 83       	std	Y+2, r25	; 0x02
     17a:	89 83       	std	Y+1, r24	; 0x01
* @param none
* @date 29/05/2017
*/
void SendDebug(char * StringPtr)
{
	while(*StringPtr != 0x00)
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
     180:	fc 01       	movw	r30, r24
     182:	80 81       	ld	r24, Z
     184:	88 23       	and	r24, r24
     186:	81 f7       	brne	.-32     	; 0x168 <SendDebug+0x10>
	{
		USART_SendByte(*StringPtr);
		StringPtr++;
	}
	USART_SendByte(0x0D);
     188:	8d e0       	ldi	r24, 0x0D	; 13
     18a:	cc df       	rcall	.-104    	; 0x124 <USART_SendByte>
	USART_SendByte(0x0A);
     18c:	8a e0       	ldi	r24, 0x0A	; 10
     18e:	ca df       	rcall	.-108    	; 0x124 <USART_SendByte>
}
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	08 95       	ret

0000019a <USART_Transmit_dec>:
  while(!(UCSRA & (1<<RXC)));
  return UDR;
}

void USART_Transmit_dec(unsigned int int_data)
{
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	28 97       	sbiw	r28, 0x08	; 8
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	98 87       	std	Y+8, r25	; 0x08
     1b0:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int temp1, temp2, dec_adc_value = 0;
     1b2:	1a 82       	std	Y+2, r1	; 0x02
     1b4:	19 82       	std	Y+1, r1	; 0x01
	
	temp1 = int_data % 4096;
     1b6:	8f 81       	ldd	r24, Y+7	; 0x07
     1b8:	98 85       	ldd	r25, Y+8	; 0x08
     1ba:	9f 70       	andi	r25, 0x0F	; 15
     1bc:	9c 83       	std	Y+4, r25	; 0x04
     1be:	8b 83       	std	Y+3, r24	; 0x03
	temp2 = int_data / 4096;
     1c0:	8f 81       	ldd	r24, Y+7	; 0x07
     1c2:	98 85       	ldd	r25, Y+8	; 0x08
     1c4:	89 2f       	mov	r24, r25
     1c6:	99 27       	eor	r25, r25
     1c8:	82 95       	swap	r24
     1ca:	8f 70       	andi	r24, 0x0F	; 15
     1cc:	9e 83       	std	Y+6, r25	; 0x06
     1ce:	8d 83       	std	Y+5, r24	; 0x05
	dec_adc_value = dec_adc_value + (temp2 * 4096);
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	9e 81       	ldd	r25, Y+6	; 0x06
     1d4:	98 2f       	mov	r25, r24
     1d6:	88 27       	eor	r24, r24
     1d8:	92 95       	swap	r25
     1da:	90 7f       	andi	r25, 0xF0	; 240
     1dc:	29 81       	ldd	r18, Y+1	; 0x01
     1de:	3a 81       	ldd	r19, Y+2	; 0x02
     1e0:	82 0f       	add	r24, r18
     1e2:	93 1f       	adc	r25, r19
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
	temp2 = temp1;
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	9e 83       	std	Y+6, r25	; 0x06
     1ee:	8d 83       	std	Y+5, r24	; 0x05
	temp1 = temp1 % 256;
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	9c 81       	ldd	r25, Y+4	; 0x04
     1f4:	99 27       	eor	r25, r25
     1f6:	9c 83       	std	Y+4, r25	; 0x04
     1f8:	8b 83       	std	Y+3, r24	; 0x03
	temp2 = temp2 / 256;
     1fa:	8d 81       	ldd	r24, Y+5	; 0x05
     1fc:	9e 81       	ldd	r25, Y+6	; 0x06
     1fe:	89 2f       	mov	r24, r25
     200:	99 27       	eor	r25, r25
     202:	9e 83       	std	Y+6, r25	; 0x06
     204:	8d 83       	std	Y+5, r24	; 0x05
	dec_adc_value = dec_adc_value + (temp2 * 256);
     206:	8d 81       	ldd	r24, Y+5	; 0x05
     208:	9e 81       	ldd	r25, Y+6	; 0x06
     20a:	98 2f       	mov	r25, r24
     20c:	88 27       	eor	r24, r24
     20e:	29 81       	ldd	r18, Y+1	; 0x01
     210:	3a 81       	ldd	r19, Y+2	; 0x02
     212:	82 0f       	add	r24, r18
     214:	93 1f       	adc	r25, r19
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	89 83       	std	Y+1, r24	; 0x01
	temp2 = temp1;
     21a:	8b 81       	ldd	r24, Y+3	; 0x03
     21c:	9c 81       	ldd	r25, Y+4	; 0x04
     21e:	9e 83       	std	Y+6, r25	; 0x06
     220:	8d 83       	std	Y+5, r24	; 0x05
	temp1 = temp1 % 16;
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	8f 70       	andi	r24, 0x0F	; 15
     228:	99 27       	eor	r25, r25
     22a:	9c 83       	std	Y+4, r25	; 0x04
     22c:	8b 83       	std	Y+3, r24	; 0x03
	temp2 = temp2 / 16;
     22e:	8d 81       	ldd	r24, Y+5	; 0x05
     230:	9e 81       	ldd	r25, Y+6	; 0x06
     232:	92 95       	swap	r25
     234:	82 95       	swap	r24
     236:	8f 70       	andi	r24, 0x0F	; 15
     238:	89 27       	eor	r24, r25
     23a:	9f 70       	andi	r25, 0x0F	; 15
     23c:	89 27       	eor	r24, r25
     23e:	9e 83       	std	Y+6, r25	; 0x06
     240:	8d 83       	std	Y+5, r24	; 0x05
	dec_adc_value = (dec_adc_value + (temp2 * 16) + temp1);
     242:	8d 81       	ldd	r24, Y+5	; 0x05
     244:	9e 81       	ldd	r25, Y+6	; 0x06
     246:	9c 01       	movw	r18, r24
     248:	22 95       	swap	r18
     24a:	32 95       	swap	r19
     24c:	30 7f       	andi	r19, 0xF0	; 240
     24e:	32 27       	eor	r19, r18
     250:	20 7f       	andi	r18, 0xF0	; 240
     252:	32 27       	eor	r19, r18
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	28 0f       	add	r18, r24
     25a:	39 1f       	adc	r19, r25
     25c:	8b 81       	ldd	r24, Y+3	; 0x03
     25e:	9c 81       	ldd	r25, Y+4	; 0x04
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	89 83       	std	Y+1, r24	; 0x01
	temp1 = dec_adc_value;
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	9a 81       	ldd	r25, Y+2	; 0x02
     26c:	9c 83       	std	Y+4, r25	; 0x04
     26e:	8b 83       	std	Y+3, r24	; 0x03
	USART_SendByte((dec_adc_value / 10000) | 0x30);
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	92 95       	swap	r25
     276:	82 95       	swap	r24
     278:	8f 70       	andi	r24, 0x0F	; 15
     27a:	89 27       	eor	r24, r25
     27c:	9f 70       	andi	r25, 0x0F	; 15
     27e:	89 27       	eor	r24, r25
     280:	9c 01       	movw	r18, r24
     282:	a7 e4       	ldi	r26, 0x47	; 71
     284:	b3 e0       	ldi	r27, 0x03	; 3
     286:	89 dc       	rcall	.-1774   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     288:	96 95       	lsr	r25
     28a:	87 95       	ror	r24
     28c:	96 95       	lsr	r25
     28e:	87 95       	ror	r24
     290:	96 95       	lsr	r25
     292:	87 95       	ror	r24
     294:	80 63       	ori	r24, 0x30	; 48
     296:	46 df       	rcall	.-372    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 10000;
     298:	4b 81       	ldd	r20, Y+3	; 0x03
     29a:	5c 81       	ldd	r21, Y+4	; 0x04
     29c:	ca 01       	movw	r24, r20
     29e:	92 95       	swap	r25
     2a0:	82 95       	swap	r24
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	89 27       	eor	r24, r25
     2a6:	9f 70       	andi	r25, 0x0F	; 15
     2a8:	89 27       	eor	r24, r25
     2aa:	9c 01       	movw	r18, r24
     2ac:	a7 e4       	ldi	r26, 0x47	; 71
     2ae:	b3 e0       	ldi	r27, 0x03	; 3
     2b0:	74 dc       	rcall	.-1816   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     2b2:	bc 01       	movw	r22, r24
     2b4:	76 95       	lsr	r23
     2b6:	67 95       	ror	r22
     2b8:	76 95       	lsr	r23
     2ba:	67 95       	ror	r22
     2bc:	76 95       	lsr	r23
     2be:	67 95       	ror	r22
     2c0:	20 e1       	ldi	r18, 0x10	; 16
     2c2:	37 e2       	ldi	r19, 0x27	; 39
     2c4:	62 9f       	mul	r22, r18
     2c6:	c0 01       	movw	r24, r0
     2c8:	63 9f       	mul	r22, r19
     2ca:	90 0d       	add	r25, r0
     2cc:	72 9f       	mul	r23, r18
     2ce:	90 0d       	add	r25, r0
     2d0:	11 24       	eor	r1, r1
     2d2:	9a 01       	movw	r18, r20
     2d4:	28 1b       	sub	r18, r24
     2d6:	39 0b       	sbc	r19, r25
     2d8:	c9 01       	movw	r24, r18
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte((dec_adc_value / 1000) | 0x30);
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	96 95       	lsr	r25
     2e4:	87 95       	ror	r24
     2e6:	96 95       	lsr	r25
     2e8:	87 95       	ror	r24
     2ea:	96 95       	lsr	r25
     2ec:	87 95       	ror	r24
     2ee:	9c 01       	movw	r18, r24
     2f0:	a5 ec       	ldi	r26, 0xC5	; 197
     2f2:	b0 e2       	ldi	r27, 0x20	; 32
     2f4:	52 dc       	rcall	.-1884   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     2f6:	92 95       	swap	r25
     2f8:	82 95       	swap	r24
     2fa:	8f 70       	andi	r24, 0x0F	; 15
     2fc:	89 27       	eor	r24, r25
     2fe:	9f 70       	andi	r25, 0x0F	; 15
     300:	89 27       	eor	r24, r25
     302:	80 63       	ori	r24, 0x30	; 48
     304:	0f df       	rcall	.-482    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 1000;
     306:	4b 81       	ldd	r20, Y+3	; 0x03
     308:	5c 81       	ldd	r21, Y+4	; 0x04
     30a:	ca 01       	movw	r24, r20
     30c:	96 95       	lsr	r25
     30e:	87 95       	ror	r24
     310:	96 95       	lsr	r25
     312:	87 95       	ror	r24
     314:	96 95       	lsr	r25
     316:	87 95       	ror	r24
     318:	9c 01       	movw	r18, r24
     31a:	a5 ec       	ldi	r26, 0xC5	; 197
     31c:	b0 e2       	ldi	r27, 0x20	; 32
     31e:	3d dc       	rcall	.-1926   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     320:	bc 01       	movw	r22, r24
     322:	72 95       	swap	r23
     324:	62 95       	swap	r22
     326:	6f 70       	andi	r22, 0x0F	; 15
     328:	67 27       	eor	r22, r23
     32a:	7f 70       	andi	r23, 0x0F	; 15
     32c:	67 27       	eor	r22, r23
     32e:	28 ee       	ldi	r18, 0xE8	; 232
     330:	33 e0       	ldi	r19, 0x03	; 3
     332:	62 9f       	mul	r22, r18
     334:	c0 01       	movw	r24, r0
     336:	63 9f       	mul	r22, r19
     338:	90 0d       	add	r25, r0
     33a:	72 9f       	mul	r23, r18
     33c:	90 0d       	add	r25, r0
     33e:	11 24       	eor	r1, r1
     340:	9a 01       	movw	r18, r20
     342:	28 1b       	sub	r18, r24
     344:	39 0b       	sbc	r19, r25
     346:	c9 01       	movw	r24, r18
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte((dec_adc_value /100) | 0x30);
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	96 95       	lsr	r25
     352:	87 95       	ror	r24
     354:	96 95       	lsr	r25
     356:	87 95       	ror	r24
     358:	9c 01       	movw	r18, r24
     35a:	ab e7       	ldi	r26, 0x7B	; 123
     35c:	b4 e1       	ldi	r27, 0x14	; 20
     35e:	1d dc       	rcall	.-1990   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     360:	96 95       	lsr	r25
     362:	87 95       	ror	r24
     364:	80 63       	ori	r24, 0x30	; 48
     366:	de de       	rcall	.-580    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 100;
     368:	4b 81       	ldd	r20, Y+3	; 0x03
     36a:	5c 81       	ldd	r21, Y+4	; 0x04
     36c:	ca 01       	movw	r24, r20
     36e:	96 95       	lsr	r25
     370:	87 95       	ror	r24
     372:	96 95       	lsr	r25
     374:	87 95       	ror	r24
     376:	9c 01       	movw	r18, r24
     378:	ab e7       	ldi	r26, 0x7B	; 123
     37a:	b4 e1       	ldi	r27, 0x14	; 20
     37c:	0e dc       	rcall	.-2020   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     37e:	9c 01       	movw	r18, r24
     380:	36 95       	lsr	r19
     382:	27 95       	ror	r18
     384:	64 e6       	ldi	r22, 0x64	; 100
     386:	62 9f       	mul	r22, r18
     388:	c0 01       	movw	r24, r0
     38a:	63 9f       	mul	r22, r19
     38c:	90 0d       	add	r25, r0
     38e:	11 24       	eor	r1, r1
     390:	9a 01       	movw	r18, r20
     392:	28 1b       	sub	r18, r24
     394:	39 0b       	sbc	r19, r25
     396:	c9 01       	movw	r24, r18
     398:	9a 83       	std	Y+2, r25	; 0x02
     39a:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte((dec_adc_value / 10) | 0x30);
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	9a 81       	ldd	r25, Y+2	; 0x02
     3a0:	9c 01       	movw	r18, r24
     3a2:	ad ec       	ldi	r26, 0xCD	; 205
     3a4:	bc ec       	ldi	r27, 0xCC	; 204
     3a6:	f9 db       	rcall	.-2062   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     3a8:	96 95       	lsr	r25
     3aa:	87 95       	ror	r24
     3ac:	96 95       	lsr	r25
     3ae:	87 95       	ror	r24
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	80 63       	ori	r24, 0x30	; 48
     3b6:	b6 de       	rcall	.-660    	; 0x124 <USART_SendByte>
	dec_adc_value = temp1 % 10;
     3b8:	4b 81       	ldd	r20, Y+3	; 0x03
     3ba:	5c 81       	ldd	r21, Y+4	; 0x04
     3bc:	9a 01       	movw	r18, r20
     3be:	ad ec       	ldi	r26, 0xCD	; 205
     3c0:	bc ec       	ldi	r27, 0xCC	; 204
     3c2:	eb db       	rcall	.-2090   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
     3cc:	96 95       	lsr	r25
     3ce:	87 95       	ror	r24
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	9c 01       	movw	r18, r24
     3d6:	22 0f       	add	r18, r18
     3d8:	33 1f       	adc	r19, r19
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	9a 01       	movw	r18, r20
     3e4:	28 1b       	sub	r18, r24
     3e6:	39 0b       	sbc	r19, r25
     3e8:	c9 01       	movw	r24, r18
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte(dec_adc_value | 0x30);
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	80 63       	ori	r24, 0x30	; 48
     3f2:	98 de       	rcall	.-720    	; 0x124 <USART_SendByte>
}
     3f4:	28 96       	adiw	r28, 0x08	; 8
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <Ring_Add>:

int Ring_Add(char c) {
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <Ring_Add+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	8a 83       	std	Y+2, r24	; 0x02
    ring_pos_t next_head = (ring_head + 1) % RING_SIZE;
     412:	80 91 a7 00 	lds	r24, 0x00A7
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	8f 73       	andi	r24, 0x3F	; 63
     41e:	90 78       	andi	r25, 0x80	; 128
     420:	99 23       	and	r25, r25
     422:	24 f4       	brge	.+8      	; 0x42c <Ring_Add+0x26>
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	80 6c       	ori	r24, 0xC0	; 192
     428:	9f 6f       	ori	r25, 0xFF	; 255
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	89 83       	std	Y+1, r24	; 0x01
    if (next_head != ring_tail) {
     42e:	80 91 a8 00 	lds	r24, 0x00A8
     432:	99 81       	ldd	r25, Y+1	; 0x01
     434:	98 17       	cp	r25, r24
     436:	79 f0       	breq	.+30     	; 0x456 <Ring_Add+0x50>
        /* there is room */
        ring_data[ring_head] = c;
     438:	80 91 a7 00 	lds	r24, 0x00A7
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	87 55       	subi	r24, 0x57	; 87
     442:	9f 4f       	sbci	r25, 0xFF	; 255
     444:	2a 81       	ldd	r18, Y+2	; 0x02
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
        ring_head = next_head;
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	80 93 a7 00 	sts	0x00A7, r24
        return 0;
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <Ring_Add+0x54>
    } else {
        /* no room left in the buffer */
        return -1;
     456:	8f ef       	ldi	r24, 0xFF	; 255
     458:	9f ef       	ldi	r25, 0xFF	; 255
    }
}
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <Ring_Remove>:

int Ring_Remove(void) {
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	00 d0       	rcall	.+0      	; 0x46a <Ring_Remove+0x6>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
    if (ring_head != ring_tail) {
     46e:	90 91 a7 00 	lds	r25, 0x00A7
     472:	80 91 a8 00 	lds	r24, 0x00A8
     476:	98 17       	cp	r25, r24
     478:	f1 f0       	breq	.+60     	; 0x4b6 <Ring_Remove+0x52>
        int c = ring_data[ring_tail];
     47a:	80 91 a8 00 	lds	r24, 0x00A8
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	87 55       	subi	r24, 0x57	; 87
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	89 83       	std	Y+1, r24	; 0x01
        ring_tail = (ring_tail + 1) % RING_SIZE;
     492:	80 91 a8 00 	lds	r24, 0x00A8
     496:	88 2f       	mov	r24, r24
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	8f 73       	andi	r24, 0x3F	; 63
     49e:	90 78       	andi	r25, 0x80	; 128
     4a0:	99 23       	and	r25, r25
     4a2:	24 f4       	brge	.+8      	; 0x4ac <Ring_Remove+0x48>
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	80 6c       	ori	r24, 0xC0	; 192
     4a8:	9f 6f       	ori	r25, 0xFF	; 255
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	80 93 a8 00 	sts	0x00A8, r24
        return c;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <Ring_Remove+0x56>
    } else {
        return -1;
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	9f ef       	ldi	r25, 0xFF	; 255
    }
}
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <Is_Buffer_Empty>:

uint8_t Is_Buffer_Empty()
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	if(ring_head == ring_tail)
     4cc:	90 91 a7 00 	lds	r25, 0x00A7
     4d0:	80 91 a8 00 	lds	r24, 0x00A8
     4d4:	98 17       	cp	r25, r24
     4d6:	11 f4       	brne	.+4      	; 0x4dc <Is_Buffer_Empty+0x18>
		return BUFFER_EMPTY;	
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	01 c0       	rjmp	.+2      	; 0x4de <Is_Buffer_Empty+0x1a>
	else return BUFFER_NOT_EMPTY;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <DebugLedInit>:

#include <avr/io.h>
#include "debug_func.h"

void DebugLedInit()
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
	RED_LED_DIR_REG |= (1 << RED_LED);
     4ec:	84 e3       	ldi	r24, 0x34	; 52
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	24 e3       	ldi	r18, 0x34	; 52
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	f9 01       	movw	r30, r18
     4f6:	20 81       	ld	r18, Z
     4f8:	21 60       	ori	r18, 0x01	; 1
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
	YELLOW_LED_DIR_REG |= (1 << YELLOW_LED);
     4fe:	84 e3       	ldi	r24, 0x34	; 52
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	24 e3       	ldi	r18, 0x34	; 52
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z
     50a:	22 60       	ori	r18, 0x02	; 2
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
	
	RED_LED_PORT &= ~(1 << RED_LED);
     510:	85 e3       	ldi	r24, 0x35	; 53
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	25 e3       	ldi	r18, 0x35	; 53
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	2e 7f       	andi	r18, 0xFE	; 254
     51e:	fc 01       	movw	r30, r24
     520:	20 83       	st	Z, r18
	YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     522:	85 e3       	ldi	r24, 0x35	; 53
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	25 e3       	ldi	r18, 0x35	; 53
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	2d 7f       	andi	r18, 0xFD	; 253
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <DebugLedTransmit>:
		param led_colour:	LED_RED
							LED_YELLOW
							LED_ORANGE
*/
void DebugLedTransmit(debug_led_state_t led_state, debug_led_colour_t led_colour)
{
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <DebugLedTransmit+0x6>
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	6a 83       	std	Y+2, r22	; 0x02
	if(led_state == LED_ON)
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	a9 f5       	brne	.+106    	; 0x5b8 <DebugLedTransmit+0x7e>
	{
		switch(led_colour)
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	91 05       	cpc	r25, r1
     558:	39 f0       	breq	.+14     	; 0x568 <DebugLedTransmit+0x2e>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	91 05       	cpc	r25, r1
     55e:	c1 f0       	breq	.+48     	; 0x590 <DebugLedTransmit+0x56>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	59 f0       	breq	.+22     	; 0x57c <DebugLedTransmit+0x42>
     566:	5f c0       	rjmp	.+190    	; 0x626 <DebugLedTransmit+0xec>
		{
			case LED_RED:
				RED_LED_PORT |= (1 << RED_LED);
     568:	85 e3       	ldi	r24, 0x35	; 53
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	25 e3       	ldi	r18, 0x35	; 53
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	21 60       	ori	r18, 0x01	; 1
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
				break;
     57a:	1d c0       	rjmp	.+58     	; 0x5b6 <DebugLedTransmit+0x7c>
				
			case LED_YELLOW:
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     57c:	85 e3       	ldi	r24, 0x35	; 53
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	25 e3       	ldi	r18, 0x35	; 53
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	22 60       	ori	r18, 0x02	; 2
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
				break;
     58e:	13 c0       	rjmp	.+38     	; 0x5b6 <DebugLedTransmit+0x7c>
				
			case LED_ORANGE:
				RED_LED_PORT |= (1 << RED_LED);
     590:	85 e3       	ldi	r24, 0x35	; 53
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	25 e3       	ldi	r18, 0x35	; 53
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	21 60       	ori	r18, 0x01	; 1
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
				YELLOW_LED_PORT |= (1 << YELLOW_LED);
     5a2:	85 e3       	ldi	r24, 0x35	; 53
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	25 e3       	ldi	r18, 0x35	; 53
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	f9 01       	movw	r30, r18
     5ac:	20 81       	ld	r18, Z
     5ae:	22 60       	ori	r18, 0x02	; 2
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
				break;
     5b4:	00 00       	nop
     5b6:	37 c0       	rjmp	.+110    	; 0x626 <DebugLedTransmit+0xec>
		} 
	}
	else if(led_state == LED_OFF)
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	88 23       	and	r24, r24
     5bc:	a1 f5       	brne	.+104    	; 0x626 <DebugLedTransmit+0xec>
	{
		switch(led_colour)
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	88 2f       	mov	r24, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	82 30       	cpi	r24, 0x02	; 2
     5c6:	91 05       	cpc	r25, r1
     5c8:	39 f0       	breq	.+14     	; 0x5d8 <DebugLedTransmit+0x9e>
     5ca:	83 30       	cpi	r24, 0x03	; 3
     5cc:	91 05       	cpc	r25, r1
     5ce:	c1 f0       	breq	.+48     	; 0x600 <DebugLedTransmit+0xc6>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 05       	cpc	r25, r1
     5d4:	59 f0       	breq	.+22     	; 0x5ec <DebugLedTransmit+0xb2>
     5d6:	27 c0       	rjmp	.+78     	; 0x626 <DebugLedTransmit+0xec>
		{
			case LED_RED:
			RED_LED_PORT &= ~(1 << RED_LED);
     5d8:	85 e3       	ldi	r24, 0x35	; 53
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	25 e3       	ldi	r18, 0x35	; 53
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	2e 7f       	andi	r18, 0xFE	; 254
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
			break;
     5ea:	1d c0       	rjmp	.+58     	; 0x626 <DebugLedTransmit+0xec>
		
			case LED_YELLOW:
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     5ec:	85 e3       	ldi	r24, 0x35	; 53
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	25 e3       	ldi	r18, 0x35	; 53
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	f9 01       	movw	r30, r18
     5f6:	20 81       	ld	r18, Z
     5f8:	2d 7f       	andi	r18, 0xFD	; 253
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
			break;
     5fe:	13 c0       	rjmp	.+38     	; 0x626 <DebugLedTransmit+0xec>
		
			case LED_ORANGE:
			RED_LED_PORT &= ~(1 << RED_LED);
     600:	85 e3       	ldi	r24, 0x35	; 53
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	25 e3       	ldi	r18, 0x35	; 53
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	f9 01       	movw	r30, r18
     60a:	20 81       	ld	r18, Z
     60c:	2e 7f       	andi	r18, 0xFE	; 254
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
			YELLOW_LED_PORT &= ~(1 << YELLOW_LED);
     612:	85 e3       	ldi	r24, 0x35	; 53
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	25 e3       	ldi	r18, 0x35	; 53
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	2d 7f       	andi	r18, 0xFD	; 253
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
			break;
     624:	00 00       	nop
		}
	}
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <Dfplayer_Cmd>:
	argument 1: Type of command. Refer Dfplayer.h for command name definitions
	argument 2: Parameter to the command         
	                                                            
************************************************************************/
void Dfplayer_Cmd(uint8_t cmd, uint16_t parameter)
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	63 97       	sbiw	r28, 0x13	; 19
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	89 8b       	std	Y+17, r24	; 0x11
     646:	7b 8b       	std	Y+19, r23	; 0x13
     648:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t cmd_lenght = 0x06;			// Currently all commands that'll be used have a lenght of 6. So this is fixed
     64a:	86 e0       	ldi	r24, 0x06	; 6
     64c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t tempholder = 0;
     64e:	1a 82       	std	Y+2, r1	; 0x02

	/*	Create the CMD string	*/
	command.header = CMD_STRT_BYTE;
     650:	8e e7       	ldi	r24, 0x7E	; 126
     652:	80 93 e9 00 	sts	0x00E9, r24
	command.version = CMD_VER;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	80 93 ea 00 	sts	0x00EA, r24
	command.lenght = cmd_lenght;
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	80 93 eb 00 	sts	0x00EB, r24
	command.type = cmd;
     662:	89 89       	ldd	r24, Y+17	; 0x11
     664:	80 93 ec 00 	sts	0x00EC, r24
	command.feedback = CMD_RECV_NFB;
     668:	10 92 ed 00 	sts	0x00ED, r1
	command.parah = parameter / 256;
     66c:	8a 89       	ldd	r24, Y+18	; 0x12
     66e:	9b 89       	ldd	r25, Y+19	; 0x13
     670:	89 2f       	mov	r24, r25
     672:	99 27       	eor	r25, r25
     674:	80 93 ee 00 	sts	0x00EE, r24
	command.paral = parameter % 256;
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	80 93 ef 00 	sts	0x00EF, r24
	command.tail = CMD_END_BYTE;
     67e:	8f ee       	ldi	r24, 0xEF	; 239
     680:	80 93 f0 00 	sts	0x00F0, r24
	
	Dfplayer_Send(&command);
     684:	89 ee       	ldi	r24, 0xE9	; 233
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	93 d0       	rcall	.+294    	; 0x7b0 <Dfplayer_Send>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e2       	ldi	r26, 0x20	; 32
     690:	b1 e4       	ldi	r27, 0x41	; 65
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	ad 83       	std	Y+5, r26	; 0x05
     698:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	4a e7       	ldi	r20, 0x7A	; 122
     6a0:	53 e4       	ldi	r21, 0x43	; 67
     6a2:	6b 81       	ldd	r22, Y+3	; 0x03
     6a4:	7c 81       	ldd	r23, Y+4	; 0x04
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	9e 81       	ldd	r25, Y+6	; 0x06
     6aa:	14 da       	rcall	.-3032   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	8f 83       	std	Y+7, r24	; 0x07
     6b2:	98 87       	std	Y+8, r25	; 0x08
     6b4:	a9 87       	std	Y+9, r26	; 0x09
     6b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e8       	ldi	r20, 0x80	; 128
     6be:	5f e3       	ldi	r21, 0x3F	; 63
     6c0:	6f 81       	ldd	r22, Y+7	; 0x07
     6c2:	78 85       	ldd	r23, Y+8	; 0x08
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c8:	f4 d8       	rcall	.-3608   	; 0xfffff8b2 <__eeprom_end+0xff7ef8b2>
     6ca:	88 23       	and	r24, r24
     6cc:	2c f4       	brge	.+10     	; 0x6d8 <Dfplayer_Cmd+0xa8>
		__ticks = 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9c 87       	std	Y+12, r25	; 0x0c
     6d4:	8b 87       	std	Y+11, r24	; 0x0b
     6d6:	3b c0       	rjmp	.+118    	; 0x74e <Dfplayer_Cmd+0x11e>
	else if (__tmp > 65535)
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	3f ef       	ldi	r19, 0xFF	; 255
     6dc:	4f e7       	ldi	r20, 0x7F	; 127
     6de:	57 e4       	ldi	r21, 0x47	; 71
     6e0:	6f 81       	ldd	r22, Y+7	; 0x07
     6e2:	78 85       	ldd	r23, Y+8	; 0x08
     6e4:	89 85       	ldd	r24, Y+9	; 0x09
     6e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e8:	f1 d9       	rcall	.-3102   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     6ea:	18 16       	cp	r1, r24
     6ec:	3c f5       	brge	.+78     	; 0x73c <Dfplayer_Cmd+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e2       	ldi	r20, 0x20	; 32
     6f4:	51 e4       	ldi	r21, 0x41	; 65
     6f6:	6b 81       	ldd	r22, Y+3	; 0x03
     6f8:	7c 81       	ldd	r23, Y+4	; 0x04
     6fa:	8d 81       	ldd	r24, Y+5	; 0x05
     6fc:	9e 81       	ldd	r25, Y+6	; 0x06
     6fe:	ea d9       	rcall	.-3116   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	bc 01       	movw	r22, r24
     706:	cd 01       	movw	r24, r26
     708:	40 d9       	rcall	.-3456   	; 0xfffff98a <__eeprom_end+0xff7ef98a>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	9c 87       	std	Y+12, r25	; 0x0c
     710:	8b 87       	std	Y+11, r24	; 0x0b
     712:	0f c0       	rjmp	.+30     	; 0x732 <Dfplayer_Cmd+0x102>
     714:	89 e1       	ldi	r24, 0x19	; 25
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9e 87       	std	Y+14, r25	; 0x0e
     71a:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     71c:	8d 85       	ldd	r24, Y+13	; 0x0d
     71e:	9e 85       	ldd	r25, Y+14	; 0x0e
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <Dfplayer_Cmd+0xf0>
     724:	9e 87       	std	Y+14, r25	; 0x0e
     726:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	9c 87       	std	Y+12, r25	; 0x0c
     730:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     732:	8b 85       	ldd	r24, Y+11	; 0x0b
     734:	9c 85       	ldd	r25, Y+12	; 0x0c
     736:	00 97       	sbiw	r24, 0x00	; 0
     738:	69 f7       	brne	.-38     	; 0x714 <Dfplayer_Cmd+0xe4>
     73a:	13 c0       	rjmp	.+38     	; 0x762 <Dfplayer_Cmd+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     73c:	6f 81       	ldd	r22, Y+7	; 0x07
     73e:	78 85       	ldd	r23, Y+8	; 0x08
     740:	89 85       	ldd	r24, Y+9	; 0x09
     742:	9a 85       	ldd	r25, Y+10	; 0x0a
     744:	22 d9       	rcall	.-3516   	; 0xfffff98a <__eeprom_end+0xff7ef98a>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	9c 87       	std	Y+12, r25	; 0x0c
     74c:	8b 87       	std	Y+11, r24	; 0x0b
     74e:	8b 85       	ldd	r24, Y+11	; 0x0b
     750:	9c 85       	ldd	r25, Y+12	; 0x0c
     752:	98 8b       	std	Y+16, r25	; 0x10
     754:	8f 87       	std	Y+15, r24	; 0x0f
     756:	8f 85       	ldd	r24, Y+15	; 0x0f
     758:	98 89       	ldd	r25, Y+16	; 0x10
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <Dfplayer_Cmd+0x12a>
     75e:	98 8b       	std	Y+16, r25	; 0x10
     760:	8f 87       	std	Y+15, r24	; 0x0f

/*************************************************************************
*  If Commands are query based, a immediate response will be received
*************************************************************************/
	_delay_ms(10);
	if(Is_Buffer_Empty() == BUFFER_NOT_EMPTY)
     762:	b0 de       	rcall	.-672    	; 0x4c4 <Is_Buffer_Empty>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	91 05       	cpc	r25, r1
     768:	d1 f4       	brne	.+52     	; 0x79e <Dfplayer_Cmd+0x16e>
	{
		do{
			tempholder = Ring_Remove();
     76a:	7c de       	rcall	.-776    	; 0x464 <Ring_Remove>
     76c:	8a 83       	std	Y+2, r24	; 0x02
		}while(tempholder != CMD_STRT_BYTE);
     76e:	8a 81       	ldd	r24, Y+2	; 0x02
     770:	8e 37       	cpi	r24, 0x7E	; 126
     772:	d9 f7       	brne	.-10     	; 0x76a <Dfplayer_Cmd+0x13a>
		command.version = Ring_Remove();				// Remove the VER byte from the buffer
     774:	77 de       	rcall	.-786    	; 0x464 <Ring_Remove>
     776:	80 93 ea 00 	sts	0x00EA, r24
		command.lenght = Ring_Remove();				// Remove the CMD byte from the buffer
     77a:	74 de       	rcall	.-792    	; 0x464 <Ring_Remove>
     77c:	80 93 eb 00 	sts	0x00EB, r24
		command.type = Ring_Remove();
     780:	71 de       	rcall	.-798    	; 0x464 <Ring_Remove>
     782:	80 93 ec 00 	sts	0x00EC, r24
		command.feedback = Ring_Remove();
     786:	6e de       	rcall	.-804    	; 0x464 <Ring_Remove>
     788:	80 93 ed 00 	sts	0x00ED, r24
		command.parah = Ring_Remove();
     78c:	6b de       	rcall	.-810    	; 0x464 <Ring_Remove>
     78e:	80 93 ee 00 	sts	0x00EE, r24
		command.paral = Ring_Remove();
     792:	68 de       	rcall	.-816    	; 0x464 <Ring_Remove>
     794:	80 93 ef 00 	sts	0x00EF, r24
		command.tail = Ring_Remove();
     798:	65 de       	rcall	.-822    	; 0x464 <Ring_Remove>
     79a:	80 93 f0 00 	sts	0x00F0, r24
	}
}
     79e:	63 96       	adiw	r28, 0x13	; 19
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <Dfplayer_Send>:

void Dfplayer_Send(command_t* strct_ptr)
{
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <Dfplayer_Send+0x6>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
	USART_SendByte(strct_ptr->header);
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	9a 81       	ldd	r25, Y+2	; 0x02
     7c2:	fc 01       	movw	r30, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	ae dc       	rcall	.-1700   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->version);
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	fc 01       	movw	r30, r24
     7ce:	81 81       	ldd	r24, Z+1	; 0x01
     7d0:	a9 dc       	rcall	.-1710   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->lenght);
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	fc 01       	movw	r30, r24
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	a4 dc       	rcall	.-1720   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->type);
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	fc 01       	movw	r30, r24
     7e2:	83 81       	ldd	r24, Z+3	; 0x03
     7e4:	9f dc       	rcall	.-1730   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->feedback);
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	fc 01       	movw	r30, r24
     7ec:	84 81       	ldd	r24, Z+4	; 0x04
     7ee:	9a dc       	rcall	.-1740   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->parah);
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	fc 01       	movw	r30, r24
     7f6:	85 81       	ldd	r24, Z+5	; 0x05
     7f8:	95 dc       	rcall	.-1750   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->paral);
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	fc 01       	movw	r30, r24
     800:	86 81       	ldd	r24, Z+6	; 0x06
     802:	90 dc       	rcall	.-1760   	; 0x124 <USART_SendByte>
	USART_SendByte(strct_ptr->tail);
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	fc 01       	movw	r30, r24
     80a:	87 81       	ldd	r24, Z+7	; 0x07
     80c:	8b dc       	rcall	.-1770   	; 0x124 <USART_SendByte>
}
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <main>:
#include "debug_func.h"



int main(void)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	aa 97       	sbiw	r28, 0x2a	; 42
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
	Atmega_init();
     82c:	18 dc       	rcall	.-2000   	; 0x5e <Atmega_init>
	
	
	DebugLedTransmit(LED_ON, LED_RED);
     82e:	62 e0       	ldi	r22, 0x02	; 2
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	83 de       	rcall	.-762    	; 0x53a <DebugLedTransmit>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	aa e7       	ldi	r26, 0x7A	; 122
     83a:	b4 e4       	ldi	r27, 0x44	; 68
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	9a 83       	std	Y+2, r25	; 0x02
     840:	ab 83       	std	Y+3, r26	; 0x03
     842:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	4a e7       	ldi	r20, 0x7A	; 122
     84a:	53 e4       	ldi	r21, 0x43	; 67
     84c:	69 81       	ldd	r22, Y+1	; 0x01
     84e:	7a 81       	ldd	r23, Y+2	; 0x02
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	3f d9       	rcall	.-3458   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	8d 83       	std	Y+5, r24	; 0x05
     85c:	9e 83       	std	Y+6, r25	; 0x06
     85e:	af 83       	std	Y+7, r26	; 0x07
     860:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e8       	ldi	r20, 0x80	; 128
     868:	5f e3       	ldi	r21, 0x3F	; 63
     86a:	6d 81       	ldd	r22, Y+5	; 0x05
     86c:	7e 81       	ldd	r23, Y+6	; 0x06
     86e:	8f 81       	ldd	r24, Y+7	; 0x07
     870:	98 85       	ldd	r25, Y+8	; 0x08
     872:	1f d8       	rcall	.-4034   	; 0xfffff8b2 <__eeprom_end+0xff7ef8b2>
     874:	88 23       	and	r24, r24
     876:	2c f4       	brge	.+10     	; 0x882 <main+0x6a>
		__ticks = 1;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	9a 87       	std	Y+10, r25	; 0x0a
     87e:	89 87       	std	Y+9, r24	; 0x09
     880:	3b c0       	rjmp	.+118    	; 0x8f8 <main+0xe0>
	else if (__tmp > 65535)
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	3f ef       	ldi	r19, 0xFF	; 255
     886:	4f e7       	ldi	r20, 0x7F	; 127
     888:	57 e4       	ldi	r21, 0x47	; 71
     88a:	6d 81       	ldd	r22, Y+5	; 0x05
     88c:	7e 81       	ldd	r23, Y+6	; 0x06
     88e:	8f 81       	ldd	r24, Y+7	; 0x07
     890:	98 85       	ldd	r25, Y+8	; 0x08
     892:	1c d9       	rcall	.-3528   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     894:	18 16       	cp	r1, r24
     896:	3c f5       	brge	.+78     	; 0x8e6 <main+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e2       	ldi	r20, 0x20	; 32
     89e:	51 e4       	ldi	r21, 0x41	; 65
     8a0:	69 81       	ldd	r22, Y+1	; 0x01
     8a2:	7a 81       	ldd	r23, Y+2	; 0x02
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	9c 81       	ldd	r25, Y+4	; 0x04
     8a8:	15 d9       	rcall	.-3542   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     8aa:	dc 01       	movw	r26, r24
     8ac:	cb 01       	movw	r24, r22
     8ae:	bc 01       	movw	r22, r24
     8b0:	cd 01       	movw	r24, r26
     8b2:	6b d8       	rcall	.-3882   	; 0xfffff98a <__eeprom_end+0xff7ef98a>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	9a 87       	std	Y+10, r25	; 0x0a
     8ba:	89 87       	std	Y+9, r24	; 0x09
     8bc:	0f c0       	rjmp	.+30     	; 0x8dc <main+0xc4>
     8be:	89 e1       	ldi	r24, 0x19	; 25
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9c 87       	std	Y+12, r25	; 0x0c
     8c4:	8b 87       	std	Y+11, r24	; 0x0b
     8c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <main+0xb2>
     8ce:	9c 87       	std	Y+12, r25	; 0x0c
     8d0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	89 85       	ldd	r24, Y+9	; 0x09
     8d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	9a 87       	std	Y+10, r25	; 0x0a
     8da:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8dc:	89 85       	ldd	r24, Y+9	; 0x09
     8de:	9a 85       	ldd	r25, Y+10	; 0x0a
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	69 f7       	brne	.-38     	; 0x8be <main+0xa6>
     8e4:	13 c0       	rjmp	.+38     	; 0x90c <main+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e6:	6d 81       	ldd	r22, Y+5	; 0x05
     8e8:	7e 81       	ldd	r23, Y+6	; 0x06
     8ea:	8f 81       	ldd	r24, Y+7	; 0x07
     8ec:	98 85       	ldd	r25, Y+8	; 0x08
     8ee:	4d d8       	rcall	.-3942   	; 0xfffff98a <__eeprom_end+0xff7ef98a>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	9a 87       	std	Y+10, r25	; 0x0a
     8f6:	89 87       	std	Y+9, r24	; 0x09
     8f8:	89 85       	ldd	r24, Y+9	; 0x09
     8fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     8fc:	9e 87       	std	Y+14, r25	; 0x0e
     8fe:	8d 87       	std	Y+13, r24	; 0x0d
     900:	8d 85       	ldd	r24, Y+13	; 0x0d
     902:	9e 85       	ldd	r25, Y+14	; 0x0e
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <main+0xec>
     908:	9e 87       	std	Y+14, r25	; 0x0e
     90a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DebugLedTransmit(LED_ON, LED_YELLOW);
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	14 de       	rcall	.-984    	; 0x53a <DebugLedTransmit>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	aa e7       	ldi	r26, 0x7A	; 122
     918:	b4 e4       	ldi	r27, 0x44	; 68
     91a:	8f 87       	std	Y+15, r24	; 0x0f
     91c:	98 8b       	std	Y+16, r25	; 0x10
     91e:	a9 8b       	std	Y+17, r26	; 0x11
     920:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	4a e7       	ldi	r20, 0x7A	; 122
     928:	53 e4       	ldi	r21, 0x43	; 67
     92a:	6f 85       	ldd	r22, Y+15	; 0x0f
     92c:	78 89       	ldd	r23, Y+16	; 0x10
     92e:	89 89       	ldd	r24, Y+17	; 0x11
     930:	9a 89       	ldd	r25, Y+18	; 0x12
     932:	d0 d8       	rcall	.-3680   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     934:	dc 01       	movw	r26, r24
     936:	cb 01       	movw	r24, r22
     938:	8b 8b       	std	Y+19, r24	; 0x13
     93a:	9c 8b       	std	Y+20, r25	; 0x14
     93c:	ad 8b       	std	Y+21, r26	; 0x15
     93e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	6b 89       	ldd	r22, Y+19	; 0x13
     94a:	7c 89       	ldd	r23, Y+20	; 0x14
     94c:	8d 89       	ldd	r24, Y+21	; 0x15
     94e:	9e 89       	ldd	r25, Y+22	; 0x16
     950:	b0 d7       	rcall	.+3936   	; 0x18b2 <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	2c f4       	brge	.+10     	; 0x960 <main+0x148>
		__ticks = 1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	98 8f       	std	Y+24, r25	; 0x18
     95c:	8f 8b       	std	Y+23, r24	; 0x17
     95e:	3b c0       	rjmp	.+118    	; 0x9d6 <main+0x1be>
	else if (__tmp > 65535)
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	3f ef       	ldi	r19, 0xFF	; 255
     964:	4f e7       	ldi	r20, 0x7F	; 127
     966:	57 e4       	ldi	r21, 0x47	; 71
     968:	6b 89       	ldd	r22, Y+19	; 0x13
     96a:	7c 89       	ldd	r23, Y+20	; 0x14
     96c:	8d 89       	ldd	r24, Y+21	; 0x15
     96e:	9e 89       	ldd	r25, Y+22	; 0x16
     970:	ad d8       	rcall	.-3750   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     972:	18 16       	cp	r1, r24
     974:	3c f5       	brge	.+78     	; 0x9c4 <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e2       	ldi	r20, 0x20	; 32
     97c:	51 e4       	ldi	r21, 0x41	; 65
     97e:	6f 85       	ldd	r22, Y+15	; 0x0f
     980:	78 89       	ldd	r23, Y+16	; 0x10
     982:	89 89       	ldd	r24, Y+17	; 0x11
     984:	9a 89       	ldd	r25, Y+18	; 0x12
     986:	a6 d8       	rcall	.-3764   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	bc 01       	movw	r22, r24
     98e:	cd 01       	movw	r24, r26
     990:	fc d7       	rcall	.+4088   	; 0x198a <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	98 8f       	std	Y+24, r25	; 0x18
     998:	8f 8b       	std	Y+23, r24	; 0x17
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <main+0x1a2>
     99c:	89 e1       	ldi	r24, 0x19	; 25
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9a 8f       	std	Y+26, r25	; 0x1a
     9a2:	89 8f       	std	Y+25, r24	; 0x19
     9a4:	89 8d       	ldd	r24, Y+25	; 0x19
     9a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <main+0x190>
     9ac:	9a 8f       	std	Y+26, r25	; 0x1a
     9ae:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8f 89       	ldd	r24, Y+23	; 0x17
     9b2:	98 8d       	ldd	r25, Y+24	; 0x18
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	98 8f       	std	Y+24, r25	; 0x18
     9b8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8f 89       	ldd	r24, Y+23	; 0x17
     9bc:	98 8d       	ldd	r25, Y+24	; 0x18
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <main+0x184>
     9c2:	13 c0       	rjmp	.+38     	; 0x9ea <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6b 89       	ldd	r22, Y+19	; 0x13
     9c6:	7c 89       	ldd	r23, Y+20	; 0x14
     9c8:	8d 89       	ldd	r24, Y+21	; 0x15
     9ca:	9e 89       	ldd	r25, Y+22	; 0x16
     9cc:	de d7       	rcall	.+4028   	; 0x198a <__fixunssfsi>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	98 8f       	std	Y+24, r25	; 0x18
     9d4:	8f 8b       	std	Y+23, r24	; 0x17
     9d6:	8f 89       	ldd	r24, Y+23	; 0x17
     9d8:	98 8d       	ldd	r25, Y+24	; 0x18
     9da:	9c 8f       	std	Y+28, r25	; 0x1c
     9dc:	8b 8f       	std	Y+27, r24	; 0x1b
     9de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <main+0x1ca>
     9e6:	9c 8f       	std	Y+28, r25	; 0x1c
     9e8:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
	DebugLedTransmit(LED_OFF, LED_ORANGE);
     9ea:	63 e0       	ldi	r22, 0x03	; 3
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	a5 dd       	rcall	.-1206   	; 0x53a <DebugLedTransmit>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	aa ef       	ldi	r26, 0xFA	; 250
     9f6:	b4 e4       	ldi	r27, 0x44	; 68
     9f8:	8d 8f       	std	Y+29, r24	; 0x1d
     9fa:	9e 8f       	std	Y+30, r25	; 0x1e
     9fc:	af 8f       	std	Y+31, r26	; 0x1f
     9fe:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	4a e7       	ldi	r20, 0x7A	; 122
     a06:	53 e4       	ldi	r21, 0x43	; 67
     a08:	6d 8d       	ldd	r22, Y+29	; 0x1d
     a0a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a0e:	98 a1       	ldd	r25, Y+32	; 0x20
     a10:	61 d8       	rcall	.-3902   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     a12:	dc 01       	movw	r26, r24
     a14:	cb 01       	movw	r24, r22
     a16:	89 a3       	std	Y+33, r24	; 0x21
     a18:	9a a3       	std	Y+34, r25	; 0x22
     a1a:	ab a3       	std	Y+35, r26	; 0x23
     a1c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	5f e3       	ldi	r21, 0x3F	; 63
     a26:	69 a1       	ldd	r22, Y+33	; 0x21
     a28:	7a a1       	ldd	r23, Y+34	; 0x22
     a2a:	8b a1       	ldd	r24, Y+35	; 0x23
     a2c:	9c a1       	ldd	r25, Y+36	; 0x24
     a2e:	41 d7       	rcall	.+3714   	; 0x18b2 <__cmpsf2>
     a30:	88 23       	and	r24, r24
     a32:	2c f4       	brge	.+10     	; 0xa3e <main+0x226>
		__ticks = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	9e a3       	std	Y+38, r25	; 0x26
     a3a:	8d a3       	std	Y+37, r24	; 0x25
     a3c:	3b c0       	rjmp	.+118    	; 0xab4 <main+0x29c>
	else if (__tmp > 65535)
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	3f ef       	ldi	r19, 0xFF	; 255
     a42:	4f e7       	ldi	r20, 0x7F	; 127
     a44:	57 e4       	ldi	r21, 0x47	; 71
     a46:	69 a1       	ldd	r22, Y+33	; 0x21
     a48:	7a a1       	ldd	r23, Y+34	; 0x22
     a4a:	8b a1       	ldd	r24, Y+35	; 0x23
     a4c:	9c a1       	ldd	r25, Y+36	; 0x24
     a4e:	3e d8       	rcall	.-3972   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     a50:	18 16       	cp	r1, r24
     a52:	3c f5       	brge	.+78     	; 0xaa2 <main+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e2       	ldi	r20, 0x20	; 32
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     a5e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     a60:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a62:	98 a1       	ldd	r25, Y+32	; 0x20
     a64:	37 d8       	rcall	.-3986   	; 0xfffffad4 <__eeprom_end+0xff7efad4>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	8d d7       	rcall	.+3866   	; 0x198a <__fixunssfsi>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	9e a3       	std	Y+38, r25	; 0x26
     a76:	8d a3       	std	Y+37, r24	; 0x25
     a78:	0f c0       	rjmp	.+30     	; 0xa98 <main+0x280>
     a7a:	89 e1       	ldi	r24, 0x19	; 25
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	98 a7       	std	Y+40, r25	; 0x28
     a80:	8f a3       	std	Y+39, r24	; 0x27
     a82:	8f a1       	ldd	r24, Y+39	; 0x27
     a84:	98 a5       	ldd	r25, Y+40	; 0x28
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	f1 f7       	brne	.-4      	; 0xa86 <main+0x26e>
     a8a:	98 a7       	std	Y+40, r25	; 0x28
     a8c:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a8e:	8d a1       	ldd	r24, Y+37	; 0x25
     a90:	9e a1       	ldd	r25, Y+38	; 0x26
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	9e a3       	std	Y+38, r25	; 0x26
     a96:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	8d a1       	ldd	r24, Y+37	; 0x25
     a9a:	9e a1       	ldd	r25, Y+38	; 0x26
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	69 f7       	brne	.-38     	; 0xa7a <main+0x262>
     aa0:	13 c0       	rjmp	.+38     	; 0xac8 <main+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa2:	69 a1       	ldd	r22, Y+33	; 0x21
     aa4:	7a a1       	ldd	r23, Y+34	; 0x22
     aa6:	8b a1       	ldd	r24, Y+35	; 0x23
     aa8:	9c a1       	ldd	r25, Y+36	; 0x24
     aaa:	6f d7       	rcall	.+3806   	; 0x198a <__fixunssfsi>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	9e a3       	std	Y+38, r25	; 0x26
     ab2:	8d a3       	std	Y+37, r24	; 0x25
     ab4:	8d a1       	ldd	r24, Y+37	; 0x25
     ab6:	9e a1       	ldd	r25, Y+38	; 0x26
     ab8:	9a a7       	std	Y+42, r25	; 0x2a
     aba:	89 a7       	std	Y+41, r24	; 0x29
     abc:	89 a5       	ldd	r24, Y+41	; 0x29
     abe:	9a a5       	ldd	r25, Y+42	; 0x2a
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <main+0x2a8>
     ac4:	9a a7       	std	Y+42, r25	; 0x2a
     ac6:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(2000);
	
    while(1)
    {
		MotasController();
     ac8:	fc d3       	rcall	.+2040   	; 0x12c2 <MotasController>
    }
     aca:	fe cf       	rjmp	.-4      	; 0xac8 <main+0x2b0>

00000acc <Init_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Init_State(void)
{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
	//TODO: extern this flag. Please do not change the name
	if(True == flag_sd_card_empty_g)
     ad4:	8e e9       	ldi	r24, 0x9E	; 158
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	81 70       	andi	r24, 0x01	; 1
     ade:	88 23       	and	r24, r24
     ae0:	21 f0       	breq	.+8      	; 0xaea <Init_State+0x1e>
	{
		#ifdef DEBUG_ON
			//TODO: Add a LED colour for information
		#endif

		motascontroller_state = MOTAS_DEBUGGING_STATE;	
     ae2:	84 e0       	ldi	r24, 0x04	; 4
     ae4:	80 93 9f 00 	sts	0x009F, r24
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <Init_State+0x24>
	}

	//TODO: Check if any additional condition is required for this transition
	/* No debugging required. Start calibration */
	else{	
		motascontroller_state = MOTAS_CALIBRATION_STATE;	
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 9f 00 	sts	0x009F, r24
	}
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <Calibration_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Calibration_State(void)
{
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	2e 97       	sbiw	r28, 0x0e	; 14
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
	/* Update the value of threshold*/
	threshold_uss_count = Get_Uss_Count();
     b0a:	e3 d5       	rcall	.+3014   	; 0x16d2 <Get_Uss_Count>
     b0c:	90 93 a1 00 	sts	0x00A1, r25
     b10:	80 93 a0 00 	sts	0x00A0, r24
	/* Reset the PIR count*/
	Reset_Pir_count();
     b14:	aa d6       	rcall	.+3412   	; 0x186a <Reset_Pir_count>
	
	/* Red led light for 1 second indicating calibration done and Motas entering the standy state */
	DebugLedTransmit(LED_ON ,LED_RED);
     b16:	62 e0       	ldi	r22, 0x02	; 2
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0f dd       	rcall	.-1506   	; 0x53a <DebugLedTransmit>
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	aa e7       	ldi	r26, 0x7A	; 122
     b22:	b4 e4       	ldi	r27, 0x44	; 68
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	ab 83       	std	Y+3, r26	; 0x03
     b2a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	4a e7       	ldi	r20, 0x7A	; 122
     b32:	53 e4       	ldi	r21, 0x43	; 67
     b34:	69 81       	ldd	r22, Y+1	; 0x01
     b36:	7a 81       	ldd	r23, Y+2	; 0x02
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	cb d7       	rcall	.+3990   	; 0x1ad4 <__mulsf3>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	8d 83       	std	Y+5, r24	; 0x05
     b44:	9e 83       	std	Y+6, r25	; 0x06
     b46:	af 83       	std	Y+7, r26	; 0x07
     b48:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e8       	ldi	r20, 0x80	; 128
     b50:	5f e3       	ldi	r21, 0x3F	; 63
     b52:	6d 81       	ldd	r22, Y+5	; 0x05
     b54:	7e 81       	ldd	r23, Y+6	; 0x06
     b56:	8f 81       	ldd	r24, Y+7	; 0x07
     b58:	98 85       	ldd	r25, Y+8	; 0x08
     b5a:	ab d6       	rcall	.+3414   	; 0x18b2 <__cmpsf2>
     b5c:	88 23       	and	r24, r24
     b5e:	2c f4       	brge	.+10     	; 0xb6a <Calibration_State+0x74>
		__ticks = 1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9a 87       	std	Y+10, r25	; 0x0a
     b66:	89 87       	std	Y+9, r24	; 0x09
     b68:	3b c0       	rjmp	.+118    	; 0xbe0 <Calibration_State+0xea>
	else if (__tmp > 65535)
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	4f e7       	ldi	r20, 0x7F	; 127
     b70:	57 e4       	ldi	r21, 0x47	; 71
     b72:	6d 81       	ldd	r22, Y+5	; 0x05
     b74:	7e 81       	ldd	r23, Y+6	; 0x06
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
     b78:	98 85       	ldd	r25, Y+8	; 0x08
     b7a:	a8 d7       	rcall	.+3920   	; 0x1acc <__gesf2>
     b7c:	18 16       	cp	r1, r24
     b7e:	3c f5       	brge	.+78     	; 0xbce <Calibration_State+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e2       	ldi	r20, 0x20	; 32
     b86:	51 e4       	ldi	r21, 0x41	; 65
     b88:	69 81       	ldd	r22, Y+1	; 0x01
     b8a:	7a 81       	ldd	r23, Y+2	; 0x02
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	a1 d7       	rcall	.+3906   	; 0x1ad4 <__mulsf3>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	f7 d6       	rcall	.+3566   	; 0x198a <__fixunssfsi>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	9a 87       	std	Y+10, r25	; 0x0a
     ba2:	89 87       	std	Y+9, r24	; 0x09
     ba4:	0f c0       	rjmp	.+30     	; 0xbc4 <Calibration_State+0xce>
     ba6:	89 e1       	ldi	r24, 0x19	; 25
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9c 87       	std	Y+12, r25	; 0x0c
     bac:	8b 87       	std	Y+11, r24	; 0x0b
     bae:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <Calibration_State+0xbc>
     bb6:	9c 87       	std	Y+12, r25	; 0x0c
     bb8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	9a 87       	std	Y+10, r25	; 0x0a
     bc2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc4:	89 85       	ldd	r24, Y+9	; 0x09
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	69 f7       	brne	.-38     	; 0xba6 <Calibration_State+0xb0>
     bcc:	13 c0       	rjmp	.+38     	; 0xbf4 <Calibration_State+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bce:	6d 81       	ldd	r22, Y+5	; 0x05
     bd0:	7e 81       	ldd	r23, Y+6	; 0x06
     bd2:	8f 81       	ldd	r24, Y+7	; 0x07
     bd4:	98 85       	ldd	r25, Y+8	; 0x08
     bd6:	d9 d6       	rcall	.+3506   	; 0x198a <__fixunssfsi>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	9a 87       	std	Y+10, r25	; 0x0a
     bde:	89 87       	std	Y+9, r24	; 0x09
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	9a 85       	ldd	r25, Y+10	; 0x0a
     be4:	9e 87       	std	Y+14, r25	; 0x0e
     be6:	8d 87       	std	Y+13, r24	; 0x0d
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	f1 f7       	brne	.-4      	; 0xbec <Calibration_State+0xf6>
     bf0:	9e 87       	std	Y+14, r25	; 0x0e
     bf2:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	DebugLedTransmit(LED_OFF ,LED_RED);		/* Switch OFF the LED */
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	a0 dc       	rcall	.-1728   	; 0x53a <DebugLedTransmit>
	
	/* Update state */
	motascontroller_state = MOTAS_STANDBY_STATE;
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	80 93 9f 00 	sts	0x009F, r24
}
     c00:	2e 96       	adiw	r28, 0x0e	; 14
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <Standby_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Standby_State(void)
{
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	62 97       	sbiw	r28, 0x12	; 18
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
	uint16_t standby_pircount = 0;
     c26:	1a 82       	std	Y+2, r1	; 0x02
     c28:	19 82       	std	Y+1, r1	; 0x01
	uint16_t standby_usscount = 0; 
     c2a:	1c 82       	std	Y+4, r1	; 0x04
     c2c:	1b 82       	std	Y+3, r1	; 0x03

	/* Update the PIR and ultrasonic count */
	standby_pircount = Get_Pir_count();
     c2e:	12 d6       	rcall	.+3108   	; 0x1854 <Get_Pir_count>
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
	standby_usscount = Get_Uss_Count(); 
     c34:	4e d5       	rcall	.+2716   	; 0x16d2 <Get_Uss_Count>
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03

	/*Check if Ultrasonic or pir has triggered because customer entering the room */
	if((standby_usscount < threshold_uss_count) || (standby_pircount > 1))
     c3a:	80 91 a0 00 	lds	r24, 0x00A0
     c3e:	90 91 a1 00 	lds	r25, 0x00A1
     c42:	2b 81       	ldd	r18, Y+3	; 0x03
     c44:	3c 81       	ldd	r19, Y+4	; 0x04
     c46:	28 17       	cp	r18, r24
     c48:	39 07       	cpc	r19, r25
     c4a:	30 f0       	brcs	.+12     	; 0xc58 <Standby_State+0x46>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	91 05       	cpc	r25, r1
     c54:	08 f4       	brcc	.+2      	; 0xc58 <Standby_State+0x46>
     c56:	82 c0       	rjmp	.+260    	; 0xd5c <Standby_State+0x14a>
	{
		/* Clear the standby pir count */
		standby_pircount = 0;
     c58:	1a 82       	std	Y+2, r1	; 0x02
     c5a:	19 82       	std	Y+1, r1	; 0x01
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e8       	ldi	r25, 0x80	; 128
     c60:	ab e3       	ldi	r26, 0x3B	; 59
     c62:	b5 e4       	ldi	r27, 0x45	; 69
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	9e 83       	std	Y+6, r25	; 0x06
     c68:	af 83       	std	Y+7, r26	; 0x07
     c6a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a e7       	ldi	r20, 0x7A	; 122
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	6d 81       	ldd	r22, Y+5	; 0x05
     c76:	7e 81       	ldd	r23, Y+6	; 0x06
     c78:	8f 81       	ldd	r24, Y+7	; 0x07
     c7a:	98 85       	ldd	r25, Y+8	; 0x08
     c7c:	2b d7       	rcall	.+3670   	; 0x1ad4 <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	89 87       	std	Y+9, r24	; 0x09
     c84:	9a 87       	std	Y+10, r25	; 0x0a
     c86:	ab 87       	std	Y+11, r26	; 0x0b
     c88:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e8       	ldi	r20, 0x80	; 128
     c90:	5f e3       	ldi	r21, 0x3F	; 63
     c92:	69 85       	ldd	r22, Y+9	; 0x09
     c94:	7a 85       	ldd	r23, Y+10	; 0x0a
     c96:	8b 85       	ldd	r24, Y+11	; 0x0b
     c98:	9c 85       	ldd	r25, Y+12	; 0x0c
     c9a:	0b d6       	rcall	.+3094   	; 0x18b2 <__cmpsf2>
     c9c:	88 23       	and	r24, r24
     c9e:	2c f4       	brge	.+10     	; 0xcaa <Standby_State+0x98>
		__ticks = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	9e 87       	std	Y+14, r25	; 0x0e
     ca6:	8d 87       	std	Y+13, r24	; 0x0d
     ca8:	3b c0       	rjmp	.+118    	; 0xd20 <Standby_State+0x10e>
	else if (__tmp > 65535)
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	3f ef       	ldi	r19, 0xFF	; 255
     cae:	4f e7       	ldi	r20, 0x7F	; 127
     cb0:	57 e4       	ldi	r21, 0x47	; 71
     cb2:	69 85       	ldd	r22, Y+9	; 0x09
     cb4:	7a 85       	ldd	r23, Y+10	; 0x0a
     cb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cba:	08 d7       	rcall	.+3600   	; 0x1acc <__gesf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	3c f5       	brge	.+78     	; 0xd0e <Standby_State+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	6d 81       	ldd	r22, Y+5	; 0x05
     cca:	7e 81       	ldd	r23, Y+6	; 0x06
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	01 d7       	rcall	.+3586   	; 0x1ad4 <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	57 d6       	rcall	.+3246   	; 0x198a <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	9e 87       	std	Y+14, r25	; 0x0e
     ce2:	8d 87       	std	Y+13, r24	; 0x0d
     ce4:	0f c0       	rjmp	.+30     	; 0xd04 <Standby_State+0xf2>
     ce6:	89 e1       	ldi	r24, 0x19	; 25
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	98 8b       	std	Y+16, r25	; 0x10
     cec:	8f 87       	std	Y+15, r24	; 0x0f
     cee:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf0:	98 89       	ldd	r25, Y+16	; 0x10
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <Standby_State+0xe0>
     cf6:	98 8b       	std	Y+16, r25	; 0x10
     cf8:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	9e 87       	std	Y+14, r25	; 0x0e
     d02:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d04:	8d 85       	ldd	r24, Y+13	; 0x0d
     d06:	9e 85       	ldd	r25, Y+14	; 0x0e
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	69 f7       	brne	.-38     	; 0xce6 <Standby_State+0xd4>
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <Standby_State+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0e:	69 85       	ldd	r22, Y+9	; 0x09
     d10:	7a 85       	ldd	r23, Y+10	; 0x0a
     d12:	8b 85       	ldd	r24, Y+11	; 0x0b
     d14:	9c 85       	ldd	r25, Y+12	; 0x0c
     d16:	39 d6       	rcall	.+3186   	; 0x198a <__fixunssfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	9e 87       	std	Y+14, r25	; 0x0e
     d1e:	8d 87       	std	Y+13, r24	; 0x0d
     d20:	8d 85       	ldd	r24, Y+13	; 0x0d
     d22:	9e 85       	ldd	r25, Y+14	; 0x0e
     d24:	9a 8b       	std	Y+18, r25	; 0x12
     d26:	89 8b       	std	Y+17, r24	; 0x11
     d28:	89 89       	ldd	r24, Y+17	; 0x11
     d2a:	9a 89       	ldd	r25, Y+18	; 0x12
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <Standby_State+0x11a>
     d30:	9a 8b       	std	Y+18, r25	; 0x12
     d32:	89 8b       	std	Y+17, r24	; 0x11
		
		/* Delay of 3 seconds to let the pir count increment */
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();
     d34:	8f d5       	rcall	.+2846   	; 0x1854 <Get_Pir_count>
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     d3a:	80 91 60 00 	lds	r24, 0x0060
     d3e:	90 91 61 00 	lds	r25, 0x0061
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	3a 81       	ldd	r19, Y+2	; 0x02
     d46:	82 17       	cp	r24, r18
     d48:	93 07       	cpc	r25, r19
     d4a:	20 f4       	brcc	.+8      	; 0xd54 <Standby_State+0x142>
		{
			motascontroller_state = MOTAS_ACTIVE_STATE;
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	80 93 9f 00 	sts	0x009F, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     d52:	07 c0       	rjmp	.+14     	; 0xd62 <Standby_State+0x150>
			motascontroller_state = MOTAS_ACTIVE_STATE;
		}
		/* Do nothing and stay in the current state */
		else 
		{
			motascontroller_state = MOTAS_STANDBY_STATE;
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	80 93 9f 00 	sts	0x009F, r24
		_delay_ms(3000);
		/* Read pir count*/
		standby_pircount = Get_Pir_count();

		/* Ignore uss count */
		if(standby_pircount > threshold_pir_count)
     d5a:	03 c0       	rjmp	.+6      	; 0xd62 <Standby_State+0x150>
		}
	}
	/* Do nothing and stay in the current state */
	else
	{
		motascontroller_state = MOTAS_STANDBY_STATE;
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	80 93 9f 00 	sts	0x009F, r24
	}
}
     d62:	62 96       	adiw	r28, 0x12	; 18
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <Active_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Active_State(void)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	a0 97       	sbiw	r28, 0x20	; 32
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
	uint16_t active_pir_count = 0;
     d88:	1a 82       	std	Y+2, r1	; 0x02
     d8a:	19 82       	std	Y+1, r1	; 0x01
	uint16_t active_usscount = 0; 
     d8c:	1c 82       	std	Y+4, r1	; 0x04
     d8e:	1b 82       	std	Y+3, r1	; 0x03
	
	/* Play music */
	if(False == flag_player_status_g)
     d90:	8e e9       	ldi	r24, 0x9E	; 158
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	82 70       	andi	r24, 0x02	; 2
     d9a:	88 23       	and	r24, r24
     d9c:	59 f4       	brne	.+22     	; 0xdb4 <Active_State+0x40>
	{
		/* Change the status of music player to playing */
		flag_player_status_g = True;
     d9e:	8e e9       	ldi	r24, 0x9E	; 158
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	fc 01       	movw	r30, r24
     da4:	20 81       	ld	r18, Z
     da6:	22 60       	ori	r18, 0x02	; 2
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
		/* Play the first track */
		Dfplayer_Cmd(CMD_PLY_TRCK, 1);
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	3e dc       	rcall	.-1924   	; 0x630 <Dfplayer_Cmd>
	{
		/* Do nothing */
	}

	/* Orange led light for 1 second indicating in the standy state */
	DebugLedTransmit(LED_ON ,LED_ORANGE);
     db4:	63 e0       	ldi	r22, 0x03	; 3
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	c0 db       	rcall	.-2176   	; 0x53a <DebugLedTransmit>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	aa e7       	ldi	r26, 0x7A	; 122
     dc0:	b4 e4       	ldi	r27, 0x44	; 68
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	af 83       	std	Y+7, r26	; 0x07
     dc8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	4a e7       	ldi	r20, 0x7A	; 122
     dd0:	53 e4       	ldi	r21, 0x43	; 67
     dd2:	6d 81       	ldd	r22, Y+5	; 0x05
     dd4:	7e 81       	ldd	r23, Y+6	; 0x06
     dd6:	8f 81       	ldd	r24, Y+7	; 0x07
     dd8:	98 85       	ldd	r25, Y+8	; 0x08
     dda:	7c d6       	rcall	.+3320   	; 0x1ad4 <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	89 87       	std	Y+9, r24	; 0x09
     de2:	9a 87       	std	Y+10, r25	; 0x0a
     de4:	ab 87       	std	Y+11, r26	; 0x0b
     de6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e8       	ldi	r20, 0x80	; 128
     dee:	5f e3       	ldi	r21, 0x3F	; 63
     df0:	69 85       	ldd	r22, Y+9	; 0x09
     df2:	7a 85       	ldd	r23, Y+10	; 0x0a
     df4:	8b 85       	ldd	r24, Y+11	; 0x0b
     df6:	9c 85       	ldd	r25, Y+12	; 0x0c
     df8:	5c d5       	rcall	.+2744   	; 0x18b2 <__cmpsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	2c f4       	brge	.+10     	; 0xe08 <Active_State+0x94>
		__ticks = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9e 87       	std	Y+14, r25	; 0x0e
     e04:	8d 87       	std	Y+13, r24	; 0x0d
     e06:	3b c0       	rjmp	.+118    	; 0xe7e <Active_State+0x10a>
	else if (__tmp > 65535)
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	69 85       	ldd	r22, Y+9	; 0x09
     e12:	7a 85       	ldd	r23, Y+10	; 0x0a
     e14:	8b 85       	ldd	r24, Y+11	; 0x0b
     e16:	9c 85       	ldd	r25, Y+12	; 0x0c
     e18:	59 d6       	rcall	.+3250   	; 0x1acc <__gesf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	3c f5       	brge	.+78     	; 0xe6c <Active_State+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e2       	ldi	r20, 0x20	; 32
     e24:	51 e4       	ldi	r21, 0x41	; 65
     e26:	6d 81       	ldd	r22, Y+5	; 0x05
     e28:	7e 81       	ldd	r23, Y+6	; 0x06
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	98 85       	ldd	r25, Y+8	; 0x08
     e2e:	52 d6       	rcall	.+3236   	; 0x1ad4 <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	bc 01       	movw	r22, r24
     e36:	cd 01       	movw	r24, r26
     e38:	a8 d5       	rcall	.+2896   	; 0x198a <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9e 87       	std	Y+14, r25	; 0x0e
     e40:	8d 87       	std	Y+13, r24	; 0x0d
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <Active_State+0xee>
     e44:	89 e1       	ldi	r24, 0x19	; 25
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	8f 87       	std	Y+15, r24	; 0x0f
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	98 89       	ldd	r25, Y+16	; 0x10
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <Active_State+0xdc>
     e54:	98 8b       	std	Y+16, r25	; 0x10
     e56:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9e 87       	std	Y+14, r25	; 0x0e
     e60:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	8d 85       	ldd	r24, Y+13	; 0x0d
     e64:	9e 85       	ldd	r25, Y+14	; 0x0e
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f7       	brne	.-38     	; 0xe44 <Active_State+0xd0>
     e6a:	13 c0       	rjmp	.+38     	; 0xe92 <Active_State+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	69 85       	ldd	r22, Y+9	; 0x09
     e6e:	7a 85       	ldd	r23, Y+10	; 0x0a
     e70:	8b 85       	ldd	r24, Y+11	; 0x0b
     e72:	9c 85       	ldd	r25, Y+12	; 0x0c
     e74:	8a d5       	rcall	.+2836   	; 0x198a <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9e 87       	std	Y+14, r25	; 0x0e
     e7c:	8d 87       	std	Y+13, r24	; 0x0d
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	9a 8b       	std	Y+18, r25	; 0x12
     e84:	89 8b       	std	Y+17, r24	; 0x11
     e86:	89 89       	ldd	r24, Y+17	; 0x11
     e88:	9a 89       	ldd	r25, Y+18	; 0x12
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <Active_State+0x116>
     e8e:	9a 8b       	std	Y+18, r25	; 0x12
     e90:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(1000);
	DebugLedTransmit(LED_OFF ,LED_ORANGE);		/* Switch OFF the LED */
     e92:	63 e0       	ldi	r22, 0x03	; 3
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	51 db       	rcall	.-2398   	; 0x53a <DebugLedTransmit>
	
	Reset_Pir_count();
     e98:	e8 d4       	rcall	.+2512   	; 0x186a <Reset_Pir_count>

	/* Get ultrasonic count */
	active_usscount = Get_Uss_Count(); 
     e9a:	1b d4       	rcall	.+2102   	; 0x16d2 <Get_Uss_Count>
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e8       	ldi	r25, 0x80	; 128
     ea4:	ab e3       	ldi	r26, 0x3B	; 59
     ea6:	b5 e4       	ldi	r27, 0x45	; 69
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
     eaa:	9c 8b       	std	Y+20, r25	; 0x14
     eac:	ad 8b       	std	Y+21, r26	; 0x15
     eae:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	4a e7       	ldi	r20, 0x7A	; 122
     eb6:	53 e4       	ldi	r21, 0x43	; 67
     eb8:	6b 89       	ldd	r22, Y+19	; 0x13
     eba:	7c 89       	ldd	r23, Y+20	; 0x14
     ebc:	8d 89       	ldd	r24, Y+21	; 0x15
     ebe:	9e 89       	ldd	r25, Y+22	; 0x16
     ec0:	09 d6       	rcall	.+3090   	; 0x1ad4 <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	8f 8b       	std	Y+23, r24	; 0x17
     ec8:	98 8f       	std	Y+24, r25	; 0x18
     eca:	a9 8f       	std	Y+25, r26	; 0x19
     ecc:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e8       	ldi	r20, 0x80	; 128
     ed4:	5f e3       	ldi	r21, 0x3F	; 63
     ed6:	6f 89       	ldd	r22, Y+23	; 0x17
     ed8:	78 8d       	ldd	r23, Y+24	; 0x18
     eda:	89 8d       	ldd	r24, Y+25	; 0x19
     edc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ede:	e9 d4       	rcall	.+2514   	; 0x18b2 <__cmpsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <Active_State+0x17a>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9c 8f       	std	Y+28, r25	; 0x1c
     eea:	8b 8f       	std	Y+27, r24	; 0x1b
     eec:	3b c0       	rjmp	.+118    	; 0xf64 <Active_State+0x1f0>
	else if (__tmp > 65535)
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	6f 89       	ldd	r22, Y+23	; 0x17
     ef8:	78 8d       	ldd	r23, Y+24	; 0x18
     efa:	89 8d       	ldd	r24, Y+25	; 0x19
     efc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     efe:	e6 d5       	rcall	.+3020   	; 0x1acc <__gesf2>
     f00:	18 16       	cp	r1, r24
     f02:	3c f5       	brge	.+78     	; 0xf52 <Active_State+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e2       	ldi	r20, 0x20	; 32
     f0a:	51 e4       	ldi	r21, 0x41	; 65
     f0c:	6b 89       	ldd	r22, Y+19	; 0x13
     f0e:	7c 89       	ldd	r23, Y+20	; 0x14
     f10:	8d 89       	ldd	r24, Y+21	; 0x15
     f12:	9e 89       	ldd	r25, Y+22	; 0x16
     f14:	df d5       	rcall	.+3006   	; 0x1ad4 <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	35 d5       	rcall	.+2666   	; 0x198a <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	9c 8f       	std	Y+28, r25	; 0x1c
     f26:	8b 8f       	std	Y+27, r24	; 0x1b
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <Active_State+0x1d4>
     f2a:	89 e1       	ldi	r24, 0x19	; 25
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9e 8f       	std	Y+30, r25	; 0x1e
     f30:	8d 8f       	std	Y+29, r24	; 0x1d
     f32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f34:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <Active_State+0x1c2>
     f3a:	9e 8f       	std	Y+30, r25	; 0x1e
     f3c:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	9c 8f       	std	Y+28, r25	; 0x1c
     f46:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	69 f7       	brne	.-38     	; 0xf2a <Active_State+0x1b6>
     f50:	13 c0       	rjmp	.+38     	; 0xf78 <Active_State+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f52:	6f 89       	ldd	r22, Y+23	; 0x17
     f54:	78 8d       	ldd	r23, Y+24	; 0x18
     f56:	89 8d       	ldd	r24, Y+25	; 0x19
     f58:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f5a:	17 d5       	rcall	.+2606   	; 0x198a <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9c 8f       	std	Y+28, r25	; 0x1c
     f62:	8b 8f       	std	Y+27, r24	; 0x1b
     f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f68:	98 a3       	std	Y+32, r25	; 0x20
     f6a:	8f 8f       	std	Y+31, r24	; 0x1f
     f6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f6e:	98 a1       	ldd	r25, Y+32	; 0x20
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <Active_State+0x1fc>
     f74:	98 a3       	std	Y+32, r25	; 0x20
     f76:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(3000);
	
	/* Get ultrasonic count */
	active_usscount = Get_Uss_Count(); 
     f78:	ac d3       	rcall	.+1880   	; 0x16d2 <Get_Uss_Count>
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
	/* Get pir count */
	active_pir_count = Get_Pir_count();
     f7e:	6a d4       	rcall	.+2260   	; 0x1854 <Get_Pir_count>
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check if Customer present in the room */
	if((active_pir_count >= threshold_pir_count) || (active_usscount < threshold_uss_count))
     f84:	80 91 60 00 	lds	r24, 0x0060
     f88:	90 91 61 00 	lds	r25, 0x0061
     f8c:	29 81       	ldd	r18, Y+1	; 0x01
     f8e:	3a 81       	ldd	r19, Y+2	; 0x02
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	48 f4       	brcc	.+18     	; 0xfa8 <Active_State+0x234>
     f96:	80 91 a0 00 	lds	r24, 0x00A0
     f9a:	90 91 a1 00 	lds	r25, 0x00A1
     f9e:	2b 81       	ldd	r18, Y+3	; 0x03
     fa0:	3c 81       	ldd	r19, Y+4	; 0x04
     fa2:	28 17       	cp	r18, r24
     fa4:	39 07       	cpc	r19, r25
     fa6:	20 f4       	brcc	.+8      	; 0xfb0 <Active_State+0x23c>
	{
		/* Do not change the state. Keep audio playing*/
		motascontroller_state = MOTAS_ACTIVE_STATE;
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	80 93 9f 00 	sts	0x009F, r24
     fae:	0f c0       	rjmp	.+30     	; 0xfce <Active_State+0x25a>
	}
	/*Customer has left the room */
	else
	{
		/* Stop playing music */
		Dfplayer_Cmd(CMD_STOP, 1);
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	86 e1       	ldi	r24, 0x16	; 22
     fb6:	3c db       	rcall	.-2440   	; 0x630 <Dfplayer_Cmd>
		
		/* Change the status of music player to false(Music not playing) */
		flag_player_status_g = False;
     fb8:	8e e9       	ldi	r24, 0x9E	; 158
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 81       	ld	r18, Z
     fc0:	2d 7f       	andi	r18, 0xFD	; 253
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18
		
		/* Change the state to standby state*/
		Reset_Pir_count();
     fc6:	51 d4       	rcall	.+2210   	; 0x186a <Reset_Pir_count>
		motascontroller_state = MOTAS_STANDBY_STATE;	
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	80 93 9f 00 	sts	0x009F, r24
	}
}
     fce:	a0 96       	adiw	r28, 0x20	; 32
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <Debugging_State>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void Debugging_State(void)
{
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	ae 97       	sbiw	r28, 0x2e	; 46
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
	uint16_t pir_count = 0;
     ff4:	1a 82       	std	Y+2, r1	; 0x02
     ff6:	19 82       	std	Y+1, r1	; 0x01
	uint16_t uss_count = 0;
     ff8:	1c 82       	std	Y+4, r1	; 0x04
     ffa:	1b 82       	std	Y+3, r1	; 0x03

	/* Yellow led light indicating start of Debugging mode */
	DebugLedTransmit(LED_ON ,LED_YELLOW);
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	9c da       	rcall	.-2760   	; 0x53a <DebugLedTransmit>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	aa ef       	ldi	r26, 0xFA	; 250
    1008:	b4 e4       	ldi	r27, 0x44	; 68
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	af 83       	std	Y+7, r26	; 0x07
    1010:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a e7       	ldi	r20, 0x7A	; 122
    1018:	53 e4       	ldi	r21, 0x43	; 67
    101a:	6d 81       	ldd	r22, Y+5	; 0x05
    101c:	7e 81       	ldd	r23, Y+6	; 0x06
    101e:	8f 81       	ldd	r24, Y+7	; 0x07
    1020:	98 85       	ldd	r25, Y+8	; 0x08
    1022:	58 d5       	rcall	.+2736   	; 0x1ad4 <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	89 87       	std	Y+9, r24	; 0x09
    102a:	9a 87       	std	Y+10, r25	; 0x0a
    102c:	ab 87       	std	Y+11, r26	; 0x0b
    102e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e8       	ldi	r20, 0x80	; 128
    1036:	5f e3       	ldi	r21, 0x3F	; 63
    1038:	69 85       	ldd	r22, Y+9	; 0x09
    103a:	7a 85       	ldd	r23, Y+10	; 0x0a
    103c:	8b 85       	ldd	r24, Y+11	; 0x0b
    103e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1040:	38 d4       	rcall	.+2160   	; 0x18b2 <__cmpsf2>
    1042:	88 23       	and	r24, r24
    1044:	2c f4       	brge	.+10     	; 0x1050 <Debugging_State+0x70>
		__ticks = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9e 87       	std	Y+14, r25	; 0x0e
    104c:	8d 87       	std	Y+13, r24	; 0x0d
    104e:	3b c0       	rjmp	.+118    	; 0x10c6 <Debugging_State+0xe6>
	else if (__tmp > 65535)
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	69 85       	ldd	r22, Y+9	; 0x09
    105a:	7a 85       	ldd	r23, Y+10	; 0x0a
    105c:	8b 85       	ldd	r24, Y+11	; 0x0b
    105e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1060:	35 d5       	rcall	.+2666   	; 0x1acc <__gesf2>
    1062:	18 16       	cp	r1, r24
    1064:	3c f5       	brge	.+78     	; 0x10b4 <Debugging_State+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e2       	ldi	r20, 0x20	; 32
    106c:	51 e4       	ldi	r21, 0x41	; 65
    106e:	6d 81       	ldd	r22, Y+5	; 0x05
    1070:	7e 81       	ldd	r23, Y+6	; 0x06
    1072:	8f 81       	ldd	r24, Y+7	; 0x07
    1074:	98 85       	ldd	r25, Y+8	; 0x08
    1076:	2e d5       	rcall	.+2652   	; 0x1ad4 <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	84 d4       	rcall	.+2312   	; 0x198a <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9e 87       	std	Y+14, r25	; 0x0e
    1088:	8d 87       	std	Y+13, r24	; 0x0d
    108a:	0f c0       	rjmp	.+30     	; 0x10aa <Debugging_State+0xca>
    108c:	89 e1       	ldi	r24, 0x19	; 25
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	98 8b       	std	Y+16, r25	; 0x10
    1092:	8f 87       	std	Y+15, r24	; 0x0f
    1094:	8f 85       	ldd	r24, Y+15	; 0x0f
    1096:	98 89       	ldd	r25, Y+16	; 0x10
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <Debugging_State+0xb8>
    109c:	98 8b       	std	Y+16, r25	; 0x10
    109e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	9e 87       	std	Y+14, r25	; 0x0e
    10a8:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	69 f7       	brne	.-38     	; 0x108c <Debugging_State+0xac>
    10b2:	13 c0       	rjmp	.+38     	; 0x10da <Debugging_State+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b4:	69 85       	ldd	r22, Y+9	; 0x09
    10b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    10b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    10bc:	66 d4       	rcall	.+2252   	; 0x198a <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9e 87       	std	Y+14, r25	; 0x0e
    10c4:	8d 87       	std	Y+13, r24	; 0x0d
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	9a 8b       	std	Y+18, r25	; 0x12
    10cc:	89 8b       	std	Y+17, r24	; 0x11
    10ce:	89 89       	ldd	r24, Y+17	; 0x11
    10d0:	9a 89       	ldd	r25, Y+18	; 0x12
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <Debugging_State+0xf2>
    10d6:	9a 8b       	std	Y+18, r25	; 0x12
    10d8:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(2000);
	
	/* Get the pir count */
	Reset_Pir_count();
    10da:	c7 d3       	rcall	.+1934   	; 0x186a <Reset_Pir_count>
	pir_count = Get_Pir_count();
    10dc:	bb d3       	rcall	.+1910   	; 0x1854 <Get_Pir_count>
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01

	/* Get the USS count */
	uss_count = Get_Uss_Count();
    10e2:	f7 d2       	rcall	.+1518   	; 0x16d2 <Get_Uss_Count>
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03

	/* Check if pir is triggered */
	if(pir_count > 1)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	91 05       	cpc	r25, r1
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <Debugging_State+0x114>
    10f2:	6f c0       	rjmp	.+222    	; 0x11d2 <Debugging_State+0x1f2>
	{
		/* Red led light indicating pir triggered */
		DebugLedTransmit(LED_ON, LED_RED);
    10f4:	62 e0       	ldi	r22, 0x02	; 2
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	20 da       	rcall	.-3008   	; 0x53a <DebugLedTransmit>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	aa ef       	ldi	r26, 0xFA	; 250
    1100:	b4 e4       	ldi	r27, 0x44	; 68
    1102:	8b 8b       	std	Y+19, r24	; 0x13
    1104:	9c 8b       	std	Y+20, r25	; 0x14
    1106:	ad 8b       	std	Y+21, r26	; 0x15
    1108:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a e7       	ldi	r20, 0x7A	; 122
    1110:	53 e4       	ldi	r21, 0x43	; 67
    1112:	6b 89       	ldd	r22, Y+19	; 0x13
    1114:	7c 89       	ldd	r23, Y+20	; 0x14
    1116:	8d 89       	ldd	r24, Y+21	; 0x15
    1118:	9e 89       	ldd	r25, Y+22	; 0x16
    111a:	dc d4       	rcall	.+2488   	; 0x1ad4 <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8f 8b       	std	Y+23, r24	; 0x17
    1122:	98 8f       	std	Y+24, r25	; 0x18
    1124:	a9 8f       	std	Y+25, r26	; 0x19
    1126:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	5f e3       	ldi	r21, 0x3F	; 63
    1130:	6f 89       	ldd	r22, Y+23	; 0x17
    1132:	78 8d       	ldd	r23, Y+24	; 0x18
    1134:	89 8d       	ldd	r24, Y+25	; 0x19
    1136:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1138:	bc d3       	rcall	.+1912   	; 0x18b2 <__cmpsf2>
    113a:	88 23       	and	r24, r24
    113c:	2c f4       	brge	.+10     	; 0x1148 <Debugging_State+0x168>
		__ticks = 1;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 8f       	std	Y+28, r25	; 0x1c
    1144:	8b 8f       	std	Y+27, r24	; 0x1b
    1146:	3b c0       	rjmp	.+118    	; 0x11be <Debugging_State+0x1de>
	else if (__tmp > 65535)
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	3f ef       	ldi	r19, 0xFF	; 255
    114c:	4f e7       	ldi	r20, 0x7F	; 127
    114e:	57 e4       	ldi	r21, 0x47	; 71
    1150:	6f 89       	ldd	r22, Y+23	; 0x17
    1152:	78 8d       	ldd	r23, Y+24	; 0x18
    1154:	89 8d       	ldd	r24, Y+25	; 0x19
    1156:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1158:	b9 d4       	rcall	.+2418   	; 0x1acc <__gesf2>
    115a:	18 16       	cp	r1, r24
    115c:	3c f5       	brge	.+78     	; 0x11ac <Debugging_State+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	6b 89       	ldd	r22, Y+19	; 0x13
    1168:	7c 89       	ldd	r23, Y+20	; 0x14
    116a:	8d 89       	ldd	r24, Y+21	; 0x15
    116c:	9e 89       	ldd	r25, Y+22	; 0x16
    116e:	b2 d4       	rcall	.+2404   	; 0x1ad4 <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	bc 01       	movw	r22, r24
    1176:	cd 01       	movw	r24, r26
    1178:	08 d4       	rcall	.+2064   	; 0x198a <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	9c 8f       	std	Y+28, r25	; 0x1c
    1180:	8b 8f       	std	Y+27, r24	; 0x1b
    1182:	0f c0       	rjmp	.+30     	; 0x11a2 <Debugging_State+0x1c2>
    1184:	89 e1       	ldi	r24, 0x19	; 25
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9e 8f       	std	Y+30, r25	; 0x1e
    118a:	8d 8f       	std	Y+29, r24	; 0x1d
    118c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    118e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <Debugging_State+0x1b0>
    1194:	9e 8f       	std	Y+30, r25	; 0x1e
    1196:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	9c 8f       	std	Y+28, r25	; 0x1c
    11a0:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	69 f7       	brne	.-38     	; 0x1184 <Debugging_State+0x1a4>
    11aa:	13 c0       	rjmp	.+38     	; 0x11d2 <Debugging_State+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ac:	6f 89       	ldd	r22, Y+23	; 0x17
    11ae:	78 8d       	ldd	r23, Y+24	; 0x18
    11b0:	89 8d       	ldd	r24, Y+25	; 0x19
    11b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11b4:	ea d3       	rcall	.+2004   	; 0x198a <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9c 8f       	std	Y+28, r25	; 0x1c
    11bc:	8b 8f       	std	Y+27, r24	; 0x1b
    11be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11c2:	98 a3       	std	Y+32, r25	; 0x20
    11c4:	8f 8f       	std	Y+31, r24	; 0x1f
    11c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11c8:	98 a1       	ldd	r25, Y+32	; 0x20
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <Debugging_State+0x1ea>
    11ce:	98 a3       	std	Y+32, r25	; 0x20
    11d0:	8f 8f       	std	Y+31, r24	; 0x1f
	}
	/* Check if USS is triggered */
	else if(uss_count > debug_threshold_uss_count);
	{
		/* Orange led light indicating uss triggered */
		DebugLedTransmit(LED_ON, LED_ORANGE);
    11d2:	63 e0       	ldi	r22, 0x03	; 3
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	b1 d9       	rcall	.-3230   	; 0x53a <DebugLedTransmit>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	aa ef       	ldi	r26, 0xFA	; 250
    11de:	b4 e4       	ldi	r27, 0x44	; 68
    11e0:	89 a3       	std	Y+33, r24	; 0x21
    11e2:	9a a3       	std	Y+34, r25	; 0x22
    11e4:	ab a3       	std	Y+35, r26	; 0x23
    11e6:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	53 e4       	ldi	r21, 0x43	; 67
    11f0:	69 a1       	ldd	r22, Y+33	; 0x21
    11f2:	7a a1       	ldd	r23, Y+34	; 0x22
    11f4:	8b a1       	ldd	r24, Y+35	; 0x23
    11f6:	9c a1       	ldd	r25, Y+36	; 0x24
    11f8:	6d d4       	rcall	.+2266   	; 0x1ad4 <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	8d a3       	std	Y+37, r24	; 0x25
    1200:	9e a3       	std	Y+38, r25	; 0x26
    1202:	af a3       	std	Y+39, r26	; 0x27
    1204:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e8       	ldi	r20, 0x80	; 128
    120c:	5f e3       	ldi	r21, 0x3F	; 63
    120e:	6d a1       	ldd	r22, Y+37	; 0x25
    1210:	7e a1       	ldd	r23, Y+38	; 0x26
    1212:	8f a1       	ldd	r24, Y+39	; 0x27
    1214:	98 a5       	ldd	r25, Y+40	; 0x28
    1216:	4d d3       	rcall	.+1690   	; 0x18b2 <__cmpsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <Debugging_State+0x246>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9a a7       	std	Y+42, r25	; 0x2a
    1222:	89 a7       	std	Y+41, r24	; 0x29
    1224:	3b c0       	rjmp	.+118    	; 0x129c <Debugging_State+0x2bc>
	else if (__tmp > 65535)
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	3f ef       	ldi	r19, 0xFF	; 255
    122a:	4f e7       	ldi	r20, 0x7F	; 127
    122c:	57 e4       	ldi	r21, 0x47	; 71
    122e:	6d a1       	ldd	r22, Y+37	; 0x25
    1230:	7e a1       	ldd	r23, Y+38	; 0x26
    1232:	8f a1       	ldd	r24, Y+39	; 0x27
    1234:	98 a5       	ldd	r25, Y+40	; 0x28
    1236:	4a d4       	rcall	.+2196   	; 0x1acc <__gesf2>
    1238:	18 16       	cp	r1, r24
    123a:	3c f5       	brge	.+78     	; 0x128a <Debugging_State+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e2       	ldi	r20, 0x20	; 32
    1242:	51 e4       	ldi	r21, 0x41	; 65
    1244:	69 a1       	ldd	r22, Y+33	; 0x21
    1246:	7a a1       	ldd	r23, Y+34	; 0x22
    1248:	8b a1       	ldd	r24, Y+35	; 0x23
    124a:	9c a1       	ldd	r25, Y+36	; 0x24
    124c:	43 d4       	rcall	.+2182   	; 0x1ad4 <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	99 d3       	rcall	.+1842   	; 0x198a <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	9a a7       	std	Y+42, r25	; 0x2a
    125e:	89 a7       	std	Y+41, r24	; 0x29
    1260:	0f c0       	rjmp	.+30     	; 0x1280 <Debugging_State+0x2a0>
    1262:	89 e1       	ldi	r24, 0x19	; 25
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9c a7       	std	Y+44, r25	; 0x2c
    1268:	8b a7       	std	Y+43, r24	; 0x2b
    126a:	8b a5       	ldd	r24, Y+43	; 0x2b
    126c:	9c a5       	ldd	r25, Y+44	; 0x2c
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <Debugging_State+0x28e>
    1272:	9c a7       	std	Y+44, r25	; 0x2c
    1274:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1276:	89 a5       	ldd	r24, Y+41	; 0x29
    1278:	9a a5       	ldd	r25, Y+42	; 0x2a
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	9a a7       	std	Y+42, r25	; 0x2a
    127e:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1280:	89 a5       	ldd	r24, Y+41	; 0x29
    1282:	9a a5       	ldd	r25, Y+42	; 0x2a
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	69 f7       	brne	.-38     	; 0x1262 <Debugging_State+0x282>
    1288:	13 c0       	rjmp	.+38     	; 0x12b0 <Debugging_State+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128a:	6d a1       	ldd	r22, Y+37	; 0x25
    128c:	7e a1       	ldd	r23, Y+38	; 0x26
    128e:	8f a1       	ldd	r24, Y+39	; 0x27
    1290:	98 a5       	ldd	r25, Y+40	; 0x28
    1292:	7b d3       	rcall	.+1782   	; 0x198a <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9a a7       	std	Y+42, r25	; 0x2a
    129a:	89 a7       	std	Y+41, r24	; 0x29
    129c:	89 a5       	ldd	r24, Y+41	; 0x29
    129e:	9a a5       	ldd	r25, Y+42	; 0x2a
    12a0:	9e a7       	std	Y+46, r25	; 0x2e
    12a2:	8d a7       	std	Y+45, r24	; 0x2d
    12a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    12a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <Debugging_State+0x2c8>
    12ac:	9e a7       	std	Y+46, r25	; 0x2e
    12ae:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(2000);
	}
}
    12b0:	ae 96       	adiw	r28, 0x2e	; 46
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <MotasController>:
* @author Faisal Khan
* @param none
* @date 29/05/2017
*/
void MotasController(void)
{
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
    12ca:	80 91 9f 00 	lds	r24, 0x009F
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	91 05       	cpc	r25, r1
    12d6:	a1 f0       	breq	.+40     	; 0x1300 <MotasController+0x3e>
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	34 f4       	brge	.+12     	; 0x12ea <MotasController+0x28>
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	59 f0       	breq	.+22     	; 0x12f8 <MotasController+0x36>
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	51 f0       	breq	.+20     	; 0x12fc <MotasController+0x3a>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
    12e8:	11 c0       	rjmp	.+34     	; 0x130c <MotasController+0x4a>
*/
void MotasController(void)
{
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	91 05       	cpc	r25, r1
    12ee:	51 f0       	breq	.+20     	; 0x1304 <MotasController+0x42>
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	91 05       	cpc	r25, r1
    12f4:	49 f0       	breq	.+18     	; 0x1308 <MotasController+0x46>
			Debugging_State();	
			break;

		default : 
			/*Do nothing*/
			break;	
    12f6:	0a c0       	rjmp	.+20     	; 0x130c <MotasController+0x4a>
	//TODO: Implement some timing delay if required 

	switch(motascontroller_state)
	{
		case MOTAS_INIT_STATE:
			Init_State();
    12f8:	e9 db       	rcall	.-2094   	; 0xacc <Init_State>
			break;	
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <MotasController+0x4a>

		case MOTAS_CALIBRATION_STATE:
			Calibration_State();
    12fc:	fc db       	rcall	.-2056   	; 0xaf6 <Calibration_State>
			break;	
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <MotasController+0x4a>

		case MOTAS_STANDBY_STATE:
			Standby_State();
    1300:	88 dc       	rcall	.-1776   	; 0xc12 <Standby_State>
			break;
    1302:	04 c0       	rjmp	.+8      	; 0x130c <MotasController+0x4a>

		case MOTAS_ACTIVE_STATE:
			Active_State();
    1304:	37 dd       	rcall	.-1426   	; 0xd74 <Active_State>
			break;
    1306:	02 c0       	rjmp	.+4      	; 0x130c <MotasController+0x4a>

		case MOTAS_DEBUGGING_STATE:		
			Debugging_State();	
    1308:	6b de       	rcall	.-810    	; 0xfe0 <Debugging_State>
			break;
    130a:	00 00       	nop
		default : 
			/*Do nothing*/
			break;	

	}
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	08 95       	ret

00001312 <__vector_1>:
#include <avr/interrupt.h>
#include "Peripheral_Drivers.h"
#include "debug_func.h"

ISR(PIR_INTERRUPT_VECT)
{
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	00 90 5f 00 	lds	r0, 0x005F
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count++;
    132a:	80 91 a5 00 	lds	r24, 0x00A5
    132e:	90 91 a6 00 	lds	r25, 0x00A6
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	90 93 a6 00 	sts	0x00A6, r25
    1338:	80 93 a5 00 	sts	0x00A5, r24
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	0f 90       	pop	r0
    1346:	00 92 5f 00 	sts	0x005F, r0
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__vector_2>:

ISR(USS_INTERRUPT_VECT)				
{
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	00 90 5f 00 	lds	r0, 0x005F
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t UssEdgeCount = 0;
	if (UssEdgeCount)		
    137c:	80 91 a2 00 	lds	r24, 0x00A2
    1380:	88 23       	and	r24, r24
    1382:	f1 f0       	breq	.+60     	; 0x13c0 <__vector_2+0x70>
	{
		DebugLedTransmit(LED_ON, LED_YELLOW);
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	d8 d8       	rcall	.-3664   	; 0x53a <DebugLedTransmit>
		Stop_Timer1();
    138a:	54 d2       	rcall	.+1192   	; 0x1834 <Stop_Timer1>
		UssPulseCount = TCNT1;		// Store the time duration of the echo pulse.
    138c:	8c e4       	ldi	r24, 0x4C	; 76
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	fc 01       	movw	r30, r24
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	90 93 a4 00 	sts	0x00A4, r25
    139a:	80 93 a3 00 	sts	0x00A3, r24
		TCNT1 = 0;
    139e:	8c e4       	ldi	r24, 0x4C	; 76
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	11 82       	std	Z+1, r1	; 0x01
    13a6:	10 82       	st	Z, r1
		UssEdgeCount = 0;
    13a8:	10 92 a2 00 	sts	0x00A2, r1
		MCUCR |= (1 << ISC10);												// Rising edge will trigger the next interrupt
    13ac:	85 e5       	ldi	r24, 0x55	; 85
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	25 e5       	ldi	r18, 0x55	; 85
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	f9 01       	movw	r30, r18
    13b6:	20 81       	ld	r18, Z
    13b8:	24 60       	ori	r18, 0x04	; 4
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18
    13be:	10 c0       	rjmp	.+32     	; 0x13e0 <__vector_2+0x90>
	}
	else 
	{
		DebugLedTransmit(LED_ON, LED_RED);
    13c0:	62 e0       	ldi	r22, 0x02	; 2
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	ba d8       	rcall	.-3724   	; 0x53a <DebugLedTransmit>
		Start_Timer1();
    13c6:	26 d2       	rcall	.+1100   	; 0x1814 <Start_Timer1>
		UssEdgeCount = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	80 93 a2 00 	sts	0x00A2, r24
		MCUCR &= ~(1 << ISC10);										// falling edge for INT0 enabled
    13ce:	85 e5       	ldi	r24, 0x55	; 85
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	25 e5       	ldi	r18, 0x55	; 85
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	f9 01       	movw	r30, r18
    13d8:	20 81       	ld	r18, Z
    13da:	2b 7f       	andi	r18, 0xFB	; 251
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
	}
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	00 92 5f 00 	sts	0x005F, r0
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <Trigger_Ultrasonic_Sensor>:

void Trigger_Ultrasonic_Sensor()									// Function tested for 10us trigger 
{
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	a0 97       	sbiw	r28, 0x20	; 32
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
	SETBIT(USS_PORT, USS_TRIGGER);
    141c:	82 e3       	ldi	r24, 0x32	; 50
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	22 e3       	ldi	r18, 0x32	; 50
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	f9 01       	movw	r30, r18
    1426:	20 81       	ld	r18, Z
    1428:	20 61       	ori	r18, 0x10	; 16
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e2       	ldi	r26, 0x20	; 32
    1434:	b1 e4       	ldi	r27, 0x41	; 65
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	ab 83       	std	Y+3, r26	; 0x03
    143c:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ; 
	__tmp = ((F_CPU) / 3e6) * __us;
    143e:	2b ea       	ldi	r18, 0xAB	; 171
    1440:	3a ea       	ldi	r19, 0xAA	; 170
    1442:	4a ea       	ldi	r20, 0xAA	; 170
    1444:	5e e3       	ldi	r21, 0x3E	; 62
    1446:	69 81       	ldd	r22, Y+1	; 0x01
    1448:	7a 81       	ldd	r23, Y+2	; 0x02
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	42 d3       	rcall	.+1668   	; 0x1ad4 <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	af 83       	std	Y+7, r26	; 0x07
    145a:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5e e3       	ldi	r21, 0x3E	; 62
    1464:	69 81       	ldd	r22, Y+1	; 0x01
    1466:	7a 81       	ldd	r23, Y+2	; 0x02
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	33 d3       	rcall	.+1638   	; 0x1ad4 <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	89 87       	std	Y+9, r24	; 0x09
    1474:	9a 87       	std	Y+10, r25	; 0x0a
    1476:	ab 87       	std	Y+11, r26	; 0x0b
    1478:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	6d 81       	ldd	r22, Y+5	; 0x05
    1484:	7e 81       	ldd	r23, Y+6	; 0x06
    1486:	8f 81       	ldd	r24, Y+7	; 0x07
    1488:	98 85       	ldd	r25, Y+8	; 0x08
    148a:	13 d2       	rcall	.+1062   	; 0x18b2 <__cmpsf2>
    148c:	88 23       	and	r24, r24
    148e:	1c f4       	brge	.+6      	; 0x1496 <Trigger_Ultrasonic_Sensor+0x8e>
		__ticks = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	8d 87       	std	Y+13, r24	; 0x0d
    1494:	a7 c0       	rjmp	.+334    	; 0x15e4 <Trigger_Ultrasonic_Sensor+0x1dc>
	else if (__tmp2 > 65535)
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	69 85       	ldd	r22, Y+9	; 0x09
    14a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    14a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a6:	12 d3       	rcall	.+1572   	; 0x1acc <__gesf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <Trigger_Ultrasonic_Sensor+0xa6>
    14ac:	74 c0       	rjmp	.+232    	; 0x1596 <Trigger_Ultrasonic_Sensor+0x18e>
	{
		_delay_ms(__us / 1000.0);
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a e7       	ldi	r20, 0x7A	; 122
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	69 81       	ldd	r22, Y+1	; 0x01
    14b8:	7a 81       	ldd	r23, Y+2	; 0x02
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	fd d1       	rcall	.+1018   	; 0x18ba <__divsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8e 87       	std	Y+14, r24	; 0x0e
    14c6:	9f 87       	std	Y+15, r25	; 0x0f
    14c8:	a8 8b       	std	Y+16, r26	; 0x10
    14ca:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	4a e7       	ldi	r20, 0x7A	; 122
    14d2:	53 e4       	ldi	r21, 0x43	; 67
    14d4:	6e 85       	ldd	r22, Y+14	; 0x0e
    14d6:	7f 85       	ldd	r23, Y+15	; 0x0f
    14d8:	88 89       	ldd	r24, Y+16	; 0x10
    14da:	99 89       	ldd	r25, Y+17	; 0x11
    14dc:	fb d2       	rcall	.+1526   	; 0x1ad4 <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8a 8b       	std	Y+18, r24	; 0x12
    14e4:	9b 8b       	std	Y+19, r25	; 0x13
    14e6:	ac 8b       	std	Y+20, r26	; 0x14
    14e8:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	6a 89       	ldd	r22, Y+18	; 0x12
    14f4:	7b 89       	ldd	r23, Y+19	; 0x13
    14f6:	8c 89       	ldd	r24, Y+20	; 0x14
    14f8:	9d 89       	ldd	r25, Y+21	; 0x15
    14fa:	db d1       	rcall	.+950    	; 0x18b2 <__cmpsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	2c f4       	brge	.+10     	; 0x150a <Trigger_Ultrasonic_Sensor+0x102>
		__ticks = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9f 8b       	std	Y+23, r25	; 0x17
    1506:	8e 8b       	std	Y+22, r24	; 0x16
    1508:	3b c0       	rjmp	.+118    	; 0x1580 <Trigger_Ultrasonic_Sensor+0x178>
	else if (__tmp > 65535)
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	6a 89       	ldd	r22, Y+18	; 0x12
    1514:	7b 89       	ldd	r23, Y+19	; 0x13
    1516:	8c 89       	ldd	r24, Y+20	; 0x14
    1518:	9d 89       	ldd	r25, Y+21	; 0x15
    151a:	d8 d2       	rcall	.+1456   	; 0x1acc <__gesf2>
    151c:	18 16       	cp	r1, r24
    151e:	3c f5       	brge	.+78     	; 0x156e <Trigger_Ultrasonic_Sensor+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e2       	ldi	r20, 0x20	; 32
    1526:	51 e4       	ldi	r21, 0x41	; 65
    1528:	6e 85       	ldd	r22, Y+14	; 0x0e
    152a:	7f 85       	ldd	r23, Y+15	; 0x0f
    152c:	88 89       	ldd	r24, Y+16	; 0x10
    152e:	99 89       	ldd	r25, Y+17	; 0x11
    1530:	d1 d2       	rcall	.+1442   	; 0x1ad4 <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	27 d2       	rcall	.+1102   	; 0x198a <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9f 8b       	std	Y+23, r25	; 0x17
    1542:	8e 8b       	std	Y+22, r24	; 0x16
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <Trigger_Ultrasonic_Sensor+0x15c>
    1546:	89 e1       	ldi	r24, 0x19	; 25
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	99 8f       	std	Y+25, r25	; 0x19
    154c:	88 8f       	std	Y+24, r24	; 0x18
    154e:	88 8d       	ldd	r24, Y+24	; 0x18
    1550:	99 8d       	ldd	r25, Y+25	; 0x19
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <Trigger_Ultrasonic_Sensor+0x14a>
    1556:	99 8f       	std	Y+25, r25	; 0x19
    1558:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8e 89       	ldd	r24, Y+22	; 0x16
    155c:	9f 89       	ldd	r25, Y+23	; 0x17
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9f 8b       	std	Y+23, r25	; 0x17
    1562:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8e 89       	ldd	r24, Y+22	; 0x16
    1566:	9f 89       	ldd	r25, Y+23	; 0x17
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <Trigger_Ultrasonic_Sensor+0x13e>
    156c:	3b c0       	rjmp	.+118    	; 0x15e4 <Trigger_Ultrasonic_Sensor+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6a 89       	ldd	r22, Y+18	; 0x12
    1570:	7b 89       	ldd	r23, Y+19	; 0x13
    1572:	8c 89       	ldd	r24, Y+20	; 0x14
    1574:	9d 89       	ldd	r25, Y+21	; 0x15
    1576:	09 d2       	rcall	.+1042   	; 0x198a <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9f 8b       	std	Y+23, r25	; 0x17
    157e:	8e 8b       	std	Y+22, r24	; 0x16
    1580:	8e 89       	ldd	r24, Y+22	; 0x16
    1582:	9f 89       	ldd	r25, Y+23	; 0x17
    1584:	9b 8f       	std	Y+27, r25	; 0x1b
    1586:	8a 8f       	std	Y+26, r24	; 0x1a
    1588:	8a 8d       	ldd	r24, Y+26	; 0x1a
    158a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <Trigger_Ultrasonic_Sensor+0x184>
    1590:	9b 8f       	std	Y+27, r25	; 0x1b
    1592:	8a 8f       	std	Y+26, r24	; 0x1a
    1594:	27 c0       	rjmp	.+78     	; 0x15e4 <Trigger_Ultrasonic_Sensor+0x1dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4f e7       	ldi	r20, 0x7F	; 127
    159c:	53 e4       	ldi	r21, 0x43	; 67
    159e:	6d 81       	ldd	r22, Y+5	; 0x05
    15a0:	7e 81       	ldd	r23, Y+6	; 0x06
    15a2:	8f 81       	ldd	r24, Y+7	; 0x07
    15a4:	98 85       	ldd	r25, Y+8	; 0x08
    15a6:	92 d2       	rcall	.+1316   	; 0x1acc <__gesf2>
    15a8:	18 16       	cp	r1, r24
    15aa:	a4 f4       	brge	.+40     	; 0x15d4 <Trigger_Ultrasonic_Sensor+0x1cc>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    15ac:	69 85       	ldd	r22, Y+9	; 0x09
    15ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    15b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b4:	ea d1       	rcall	.+980    	; 0x198a <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	9d 8f       	std	Y+29, r25	; 0x1d
    15bc:	8c 8f       	std	Y+28, r24	; 0x1c
    15be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15c2:	9f 8f       	std	Y+31, r25	; 0x1f
    15c4:	8e 8f       	std	Y+30, r24	; 0x1e
    15c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <Trigger_Ultrasonic_Sensor+0x1c2>
    15ce:	9f 8f       	std	Y+31, r25	; 0x1f
    15d0:	8e 8f       	std	Y+30, r24	; 0x1e
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <Trigger_Ultrasonic_Sensor+0x1e8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15d4:	6d 81       	ldd	r22, Y+5	; 0x05
    15d6:	7e 81       	ldd	r23, Y+6	; 0x06
    15d8:	8f 81       	ldd	r24, Y+7	; 0x07
    15da:	98 85       	ldd	r25, Y+8	; 0x08
    15dc:	d6 d1       	rcall	.+940    	; 0x198a <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	8d 87       	std	Y+13, r24	; 0x0d
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15e8:	88 a1       	ldd	r24, Y+32	; 0x20
    15ea:	8a 95       	dec	r24
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <Trigger_Ultrasonic_Sensor+0x1e2>
    15ee:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us(10);													// 10us Pulse as per datasheet of HC-SR04 Ultrasonic Sensor
	CLEARBIT(USS_PORT, USS_TRIGGER);
    15f0:	82 e3       	ldi	r24, 0x32	; 50
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	22 e3       	ldi	r18, 0x32	; 50
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	20 81       	ld	r18, Z
    15fc:	2f 7e       	andi	r18, 0xEF	; 239
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
}
    1602:	a0 96       	adiw	r28, 0x20	; 32
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <Init_Pir>:

void Init_Pir()
{
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
	CLEARBIT(PIR_INPUT_DIR_REG, PIR_INPUT_PIN);						// Set the pin direction as input
    161c:	81 e3       	ldi	r24, 0x31	; 49
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	21 e3       	ldi	r18, 0x31	; 49
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	f9 01       	movw	r30, r18
    1626:	20 81       	ld	r18, Z
    1628:	2b 7f       	andi	r18, 0xFB	; 251
    162a:	fc 01       	movw	r30, r24
    162c:	20 83       	st	Z, r18
	SETBIT(PIR_INPUT_PORT, PIR_INPUT_PIN);							// Setup the controllers internal Pull up resistor
    162e:	82 e3       	ldi	r24, 0x32	; 50
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	22 e3       	ldi	r18, 0x32	; 50
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	f9 01       	movw	r30, r18
    1638:	20 81       	ld	r18, Z
    163a:	24 60       	ori	r18, 0x04	; 4
    163c:	fc 01       	movw	r30, r24
    163e:	20 83       	st	Z, r18

	MCUCR |= (1 << ISC01) | (1 << ISC00);
    1640:	85 e5       	ldi	r24, 0x55	; 85
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	25 e5       	ldi	r18, 0x55	; 85
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	f9 01       	movw	r30, r18
    164a:	20 81       	ld	r18, Z
    164c:	23 60       	ori	r18, 0x03	; 3
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
	GICR |= (1 << INT0);
    1652:	8b e5       	ldi	r24, 0x5B	; 91
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	2b e5       	ldi	r18, 0x5B	; 91
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	f9 01       	movw	r30, r18
    165c:	20 81       	ld	r18, Z
    165e:	20 64       	ori	r18, 0x40	; 64
    1660:	fc 01       	movw	r30, r24
    1662:	20 83       	st	Z, r18
}
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <Init_Ultrasonic_Sensor>:

void Init_Ultrasonic_Sensor()
{
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
	SETBIT(USS_DIR_REG, USS_TRIGGER);								// Set the pin direction as output
    1672:	81 e3       	ldi	r24, 0x31	; 49
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	21 e3       	ldi	r18, 0x31	; 49
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	f9 01       	movw	r30, r18
    167c:	20 81       	ld	r18, Z
    167e:	20 61       	ori	r18, 0x10	; 16
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
	CLEARBIT(USS_PORT, USS_TRIGGER);								// Initial state of trigger is LOW
    1684:	82 e3       	ldi	r24, 0x32	; 50
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	22 e3       	ldi	r18, 0x32	; 50
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	f9 01       	movw	r30, r18
    168e:	20 81       	ld	r18, Z
    1690:	2f 7e       	andi	r18, 0xEF	; 239
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
	SETBIT(USS_PORT, USS_ECHO);										// Activate pull-up on ECHO pin.
    1696:	82 e3       	ldi	r24, 0x32	; 50
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	22 e3       	ldi	r18, 0x32	; 50
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	f9 01       	movw	r30, r18
    16a0:	20 81       	ld	r18, Z
    16a2:	28 60       	ori	r18, 0x08	; 8
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 83       	st	Z, r18
	
	MCUCR |= (1 << ISC11) | (1 << ISC10);							// Set the interrupt to trigger at the rising edge.
    16a8:	85 e5       	ldi	r24, 0x55	; 85
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	25 e5       	ldi	r18, 0x55	; 85
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	f9 01       	movw	r30, r18
    16b2:	20 81       	ld	r18, Z
    16b4:	2c 60       	ori	r18, 0x0C	; 12
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 83       	st	Z, r18
	GICR |= (1 << INT1);
    16ba:	8b e5       	ldi	r24, 0x5B	; 91
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	2b e5       	ldi	r18, 0x5B	; 91
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	f9 01       	movw	r30, r18
    16c4:	20 81       	ld	r18, Z
    16c6:	20 68       	ori	r18, 0x80	; 128
    16c8:	fc 01       	movw	r30, r24
    16ca:	20 83       	st	Z, r18
}
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <Get_Uss_Count>:
{
	CLEARBIT(PORTC, led_color);
}

uint16_t Get_Uss_Count()
{
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	2e 97       	sbiw	r28, 0x0e	; 14
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
	Trigger_Ultrasonic_Sensor();
    16e6:	90 de       	rcall	.-736    	; 0x1408 <Trigger_Ultrasonic_Sensor>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	aa e7       	ldi	r26, 0x7A	; 122
    16ee:	b4 e4       	ldi	r27, 0x44	; 68
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	ab 83       	std	Y+3, r26	; 0x03
    16f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a e7       	ldi	r20, 0x7A	; 122
    16fe:	53 e4       	ldi	r21, 0x43	; 67
    1700:	69 81       	ldd	r22, Y+1	; 0x01
    1702:	7a 81       	ldd	r23, Y+2	; 0x02
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	e5 d1       	rcall	.+970    	; 0x1ad4 <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	af 83       	std	Y+7, r26	; 0x07
    1714:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e8       	ldi	r20, 0x80	; 128
    171c:	5f e3       	ldi	r21, 0x3F	; 63
    171e:	6d 81       	ldd	r22, Y+5	; 0x05
    1720:	7e 81       	ldd	r23, Y+6	; 0x06
    1722:	8f 81       	ldd	r24, Y+7	; 0x07
    1724:	98 85       	ldd	r25, Y+8	; 0x08
    1726:	c5 d0       	rcall	.+394    	; 0x18b2 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <Get_Uss_Count+0x64>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9a 87       	std	Y+10, r25	; 0x0a
    1732:	89 87       	std	Y+9, r24	; 0x09
    1734:	3b c0       	rjmp	.+118    	; 0x17ac <Get_Uss_Count+0xda>
	else if (__tmp > 65535)
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	57 e4       	ldi	r21, 0x47	; 71
    173e:	6d 81       	ldd	r22, Y+5	; 0x05
    1740:	7e 81       	ldd	r23, Y+6	; 0x06
    1742:	8f 81       	ldd	r24, Y+7	; 0x07
    1744:	98 85       	ldd	r25, Y+8	; 0x08
    1746:	c2 d1       	rcall	.+900    	; 0x1acc <__gesf2>
    1748:	18 16       	cp	r1, r24
    174a:	3c f5       	brge	.+78     	; 0x179a <Get_Uss_Count+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	69 81       	ldd	r22, Y+1	; 0x01
    1756:	7a 81       	ldd	r23, Y+2	; 0x02
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	bb d1       	rcall	.+886    	; 0x1ad4 <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	11 d1       	rcall	.+546    	; 0x198a <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9a 87       	std	Y+10, r25	; 0x0a
    176e:	89 87       	std	Y+9, r24	; 0x09
    1770:	0f c0       	rjmp	.+30     	; 0x1790 <Get_Uss_Count+0xbe>
    1772:	89 e1       	ldi	r24, 0x19	; 25
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9c 87       	std	Y+12, r25	; 0x0c
    1778:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    177a:	8b 85       	ldd	r24, Y+11	; 0x0b
    177c:	9c 85       	ldd	r25, Y+12	; 0x0c
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <Get_Uss_Count+0xac>
    1782:	9c 87       	std	Y+12, r25	; 0x0c
    1784:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	9a 85       	ldd	r25, Y+10	; 0x0a
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	9a 87       	std	Y+10, r25	; 0x0a
    178e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	69 f7       	brne	.-38     	; 0x1772 <Get_Uss_Count+0xa0>
    1798:	13 c0       	rjmp	.+38     	; 0x17c0 <Get_Uss_Count+0xee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179a:	6d 81       	ldd	r22, Y+5	; 0x05
    179c:	7e 81       	ldd	r23, Y+6	; 0x06
    179e:	8f 81       	ldd	r24, Y+7	; 0x07
    17a0:	98 85       	ldd	r25, Y+8	; 0x08
    17a2:	f3 d0       	rcall	.+486    	; 0x198a <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9a 87       	std	Y+10, r25	; 0x0a
    17aa:	89 87       	std	Y+9, r24	; 0x09
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	9e 87       	std	Y+14, r25	; 0x0e
    17b2:	8d 87       	std	Y+13, r24	; 0x0d
    17b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <Get_Uss_Count+0xe6>
    17bc:	9e 87       	std	Y+14, r25	; 0x0e
    17be:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	#ifdef DEBUG_ON
	SendDebug("USS Triggered");
    17c0:	8d e6       	ldi	r24, 0x6D	; 109
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	c9 d4       	rcall	.+2450   	; 0x2158 <__data_load_end+0x564>
	SendDebug("USS count:");
    17c6:	8b e7       	ldi	r24, 0x7B	; 123
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	c6 d4       	rcall	.+2444   	; 0x2158 <__data_load_end+0x564>
	USART_Transmit_dec(UssPulseCount);
    17cc:	80 91 a3 00 	lds	r24, 0x00A3
    17d0:	90 91 a4 00 	lds	r25, 0x00A4
    17d4:	e2 d4       	rcall	.+2500   	; 0x219a <__data_load_end+0x5a6>
	USART_SendByte(0x0D);
    17d6:	8d e0       	ldi	r24, 0x0D	; 13
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a4 d4       	rcall	.+2376   	; 0x2124 <__data_load_end+0x530>
	USART_SendByte(0x0A);
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a1 d4       	rcall	.+2370   	; 0x2124 <__data_load_end+0x530>
	#endif
	return UssPulseCount;
    17e2:	80 91 a3 00 	lds	r24, 0x00A3
    17e6:	90 91 a4 00 	lds	r25, 0x00A4
}
    17ea:	2e 96       	adiw	r28, 0x0e	; 14
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <Init_Timer1>:

void Init_Timer1()
{
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1804:	8c e4       	ldi	r24, 0x4C	; 76
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	fc 01       	movw	r30, r24
    180a:	11 82       	std	Z+1, r1	; 0x01
    180c:	10 82       	st	Z, r1
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <Start_Timer1>:

void Start_Timer1()
{
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << CS10);		// No pre-scalar
    181c:	8e e4       	ldi	r24, 0x4E	; 78
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	2e e4       	ldi	r18, 0x4E	; 78
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	f9 01       	movw	r30, r18
    1826:	20 81       	ld	r18, Z
    1828:	21 60       	ori	r18, 0x01	; 1
    182a:	fc 01       	movw	r30, r24
    182c:	20 83       	st	Z, r18
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <Stop_Timer1>:

void Stop_Timer1()
{
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS10);
    183c:	8e e4       	ldi	r24, 0x4E	; 78
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	2e e4       	ldi	r18, 0x4E	; 78
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	f9 01       	movw	r30, r18
    1846:	20 81       	ld	r18, Z
    1848:	2e 7f       	andi	r18, 0xFE	; 254
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
}
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <Get_Pir_count>:

uint16_t Get_Pir_count()
{
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	return pir_trigger_count;
    185c:	80 91 a5 00 	lds	r24, 0x00A5
    1860:	90 91 a6 00 	lds	r25, 0x00A6
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <Reset_Pir_count>:

void Reset_Pir_count()
{
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	pir_trigger_count = 0;
    1872:	10 92 a6 00 	sts	0x00A6, r1
    1876:	10 92 a5 00 	sts	0x00A5, r1
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <Init_Gpio>:
	
	return 0;
}

void Init_Gpio()
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
	RELAY_PORT_DIR_REG |= (1 << RELAY_PIN);		// Set the relay pin as a output pin
    1888:	87 e3       	ldi	r24, 0x37	; 55
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	27 e3       	ldi	r18, 0x37	; 55
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	f9 01       	movw	r30, r18
    1892:	20 81       	ld	r18, Z
    1894:	21 60       	ori	r18, 0x01	; 1
    1896:	fc 01       	movw	r30, r24
    1898:	20 83       	st	Z, r18
	RELAY_PORT &= ~(1 << RELAY_PIN);			// Initialise relay in OFF state.
    189a:	88 e3       	ldi	r24, 0x38	; 56
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	28 e3       	ldi	r18, 0x38	; 56
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	f9 01       	movw	r30, r18
    18a4:	20 81       	ld	r18, Z
    18a6:	2e 7f       	andi	r18, 0xFE	; 254
    18a8:	fc 01       	movw	r30, r24
    18aa:	20 83       	st	Z, r18
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <__cmpsf2>:
    18b2:	97 d0       	rcall	.+302    	; 0x19e2 <__fp_cmp>
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <__cmpsf2+0x6>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	08 95       	ret

000018ba <__divsf3>:
    18ba:	0c d0       	rcall	.+24     	; 0x18d4 <__divsf3x>
    18bc:	cd c0       	rjmp	.+410    	; 0x1a58 <__fp_round>
    18be:	c5 d0       	rcall	.+394    	; 0x1a4a <__fp_pscB>
    18c0:	40 f0       	brcs	.+16     	; 0x18d2 <__divsf3+0x18>
    18c2:	bc d0       	rcall	.+376    	; 0x1a3c <__fp_pscA>
    18c4:	30 f0       	brcs	.+12     	; 0x18d2 <__divsf3+0x18>
    18c6:	21 f4       	brne	.+8      	; 0x18d0 <__divsf3+0x16>
    18c8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ca:	19 f0       	breq	.+6      	; 0x18d2 <__divsf3+0x18>
    18cc:	ae c0       	rjmp	.+348    	; 0x1a2a <__fp_inf>
    18ce:	51 11       	cpse	r21, r1
    18d0:	f7 c0       	rjmp	.+494    	; 0x1ac0 <__fp_szero>
    18d2:	b1 c0       	rjmp	.+354    	; 0x1a36 <__fp_nan>

000018d4 <__divsf3x>:
    18d4:	d2 d0       	rcall	.+420    	; 0x1a7a <__fp_split3>
    18d6:	98 f3       	brcs	.-26     	; 0x18be <__divsf3+0x4>

000018d8 <__divsf3_pse>:
    18d8:	99 23       	and	r25, r25
    18da:	c9 f3       	breq	.-14     	; 0x18ce <__divsf3+0x14>
    18dc:	55 23       	and	r21, r21
    18de:	b1 f3       	breq	.-20     	; 0x18cc <__divsf3+0x12>
    18e0:	95 1b       	sub	r25, r21
    18e2:	55 0b       	sbc	r21, r21
    18e4:	bb 27       	eor	r27, r27
    18e6:	aa 27       	eor	r26, r26
    18e8:	62 17       	cp	r22, r18
    18ea:	73 07       	cpc	r23, r19
    18ec:	84 07       	cpc	r24, r20
    18ee:	38 f0       	brcs	.+14     	; 0x18fe <__divsf3_pse+0x26>
    18f0:	9f 5f       	subi	r25, 0xFF	; 255
    18f2:	5f 4f       	sbci	r21, 0xFF	; 255
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	44 1f       	adc	r20, r20
    18fa:	aa 1f       	adc	r26, r26
    18fc:	a9 f3       	breq	.-22     	; 0x18e8 <__divsf3_pse+0x10>
    18fe:	33 d0       	rcall	.+102    	; 0x1966 <__divsf3_pse+0x8e>
    1900:	0e 2e       	mov	r0, r30
    1902:	3a f0       	brmi	.+14     	; 0x1912 <__divsf3_pse+0x3a>
    1904:	e0 e8       	ldi	r30, 0x80	; 128
    1906:	30 d0       	rcall	.+96     	; 0x1968 <__divsf3_pse+0x90>
    1908:	91 50       	subi	r25, 0x01	; 1
    190a:	50 40       	sbci	r21, 0x00	; 0
    190c:	e6 95       	lsr	r30
    190e:	00 1c       	adc	r0, r0
    1910:	ca f7       	brpl	.-14     	; 0x1904 <__divsf3_pse+0x2c>
    1912:	29 d0       	rcall	.+82     	; 0x1966 <__divsf3_pse+0x8e>
    1914:	fe 2f       	mov	r31, r30
    1916:	27 d0       	rcall	.+78     	; 0x1966 <__divsf3_pse+0x8e>
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	bb 1f       	adc	r27, r27
    1920:	26 17       	cp	r18, r22
    1922:	37 07       	cpc	r19, r23
    1924:	48 07       	cpc	r20, r24
    1926:	ab 07       	cpc	r26, r27
    1928:	b0 e8       	ldi	r27, 0x80	; 128
    192a:	09 f0       	breq	.+2      	; 0x192e <__divsf3_pse+0x56>
    192c:	bb 0b       	sbc	r27, r27
    192e:	80 2d       	mov	r24, r0
    1930:	bf 01       	movw	r22, r30
    1932:	ff 27       	eor	r31, r31
    1934:	93 58       	subi	r25, 0x83	; 131
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	2a f0       	brmi	.+10     	; 0x1944 <__divsf3_pse+0x6c>
    193a:	9e 3f       	cpi	r25, 0xFE	; 254
    193c:	51 05       	cpc	r21, r1
    193e:	68 f0       	brcs	.+26     	; 0x195a <__divsf3_pse+0x82>
    1940:	74 c0       	rjmp	.+232    	; 0x1a2a <__fp_inf>
    1942:	be c0       	rjmp	.+380    	; 0x1ac0 <__fp_szero>
    1944:	5f 3f       	cpi	r21, 0xFF	; 255
    1946:	ec f3       	brlt	.-6      	; 0x1942 <__divsf3_pse+0x6a>
    1948:	98 3e       	cpi	r25, 0xE8	; 232
    194a:	dc f3       	brlt	.-10     	; 0x1942 <__divsf3_pse+0x6a>
    194c:	86 95       	lsr	r24
    194e:	77 95       	ror	r23
    1950:	67 95       	ror	r22
    1952:	b7 95       	ror	r27
    1954:	f7 95       	ror	r31
    1956:	9f 5f       	subi	r25, 0xFF	; 255
    1958:	c9 f7       	brne	.-14     	; 0x194c <__divsf3_pse+0x74>
    195a:	88 0f       	add	r24, r24
    195c:	91 1d       	adc	r25, r1
    195e:	96 95       	lsr	r25
    1960:	87 95       	ror	r24
    1962:	97 f9       	bld	r25, 7
    1964:	08 95       	ret
    1966:	e1 e0       	ldi	r30, 0x01	; 1
    1968:	66 0f       	add	r22, r22
    196a:	77 1f       	adc	r23, r23
    196c:	88 1f       	adc	r24, r24
    196e:	bb 1f       	adc	r27, r27
    1970:	62 17       	cp	r22, r18
    1972:	73 07       	cpc	r23, r19
    1974:	84 07       	cpc	r24, r20
    1976:	ba 07       	cpc	r27, r26
    1978:	20 f0       	brcs	.+8      	; 0x1982 <__divsf3_pse+0xaa>
    197a:	62 1b       	sub	r22, r18
    197c:	73 0b       	sbc	r23, r19
    197e:	84 0b       	sbc	r24, r20
    1980:	ba 0b       	sbc	r27, r26
    1982:	ee 1f       	adc	r30, r30
    1984:	88 f7       	brcc	.-30     	; 0x1968 <__divsf3_pse+0x90>
    1986:	e0 95       	com	r30
    1988:	08 95       	ret

0000198a <__fixunssfsi>:
    198a:	7f d0       	rcall	.+254    	; 0x1a8a <__fp_splitA>
    198c:	88 f0       	brcs	.+34     	; 0x19b0 <__fixunssfsi+0x26>
    198e:	9f 57       	subi	r25, 0x7F	; 127
    1990:	90 f0       	brcs	.+36     	; 0x19b6 <__fixunssfsi+0x2c>
    1992:	b9 2f       	mov	r27, r25
    1994:	99 27       	eor	r25, r25
    1996:	b7 51       	subi	r27, 0x17	; 23
    1998:	a0 f0       	brcs	.+40     	; 0x19c2 <__fixunssfsi+0x38>
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <__fixunssfsi+0x46>
    199c:	66 0f       	add	r22, r22
    199e:	77 1f       	adc	r23, r23
    19a0:	88 1f       	adc	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	1a f0       	brmi	.+6      	; 0x19ac <__fixunssfsi+0x22>
    19a6:	ba 95       	dec	r27
    19a8:	c9 f7       	brne	.-14     	; 0x199c <__fixunssfsi+0x12>
    19aa:	12 c0       	rjmp	.+36     	; 0x19d0 <__fixunssfsi+0x46>
    19ac:	b1 30       	cpi	r27, 0x01	; 1
    19ae:	81 f0       	breq	.+32     	; 0x19d0 <__fixunssfsi+0x46>
    19b0:	86 d0       	rcall	.+268    	; 0x1abe <__fp_zero>
    19b2:	b1 e0       	ldi	r27, 0x01	; 1
    19b4:	08 95       	ret
    19b6:	83 c0       	rjmp	.+262    	; 0x1abe <__fp_zero>
    19b8:	67 2f       	mov	r22, r23
    19ba:	78 2f       	mov	r23, r24
    19bc:	88 27       	eor	r24, r24
    19be:	b8 5f       	subi	r27, 0xF8	; 248
    19c0:	39 f0       	breq	.+14     	; 0x19d0 <__fixunssfsi+0x46>
    19c2:	b9 3f       	cpi	r27, 0xF9	; 249
    19c4:	cc f3       	brlt	.-14     	; 0x19b8 <__fixunssfsi+0x2e>
    19c6:	86 95       	lsr	r24
    19c8:	77 95       	ror	r23
    19ca:	67 95       	ror	r22
    19cc:	b3 95       	inc	r27
    19ce:	d9 f7       	brne	.-10     	; 0x19c6 <__fixunssfsi+0x3c>
    19d0:	3e f4       	brtc	.+14     	; 0x19e0 <__fixunssfsi+0x56>
    19d2:	90 95       	com	r25
    19d4:	80 95       	com	r24
    19d6:	70 95       	com	r23
    19d8:	61 95       	neg	r22
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	08 95       	ret

000019e2 <__fp_cmp>:
    19e2:	99 0f       	add	r25, r25
    19e4:	00 08       	sbc	r0, r0
    19e6:	55 0f       	add	r21, r21
    19e8:	aa 0b       	sbc	r26, r26
    19ea:	e0 e8       	ldi	r30, 0x80	; 128
    19ec:	fe ef       	ldi	r31, 0xFE	; 254
    19ee:	16 16       	cp	r1, r22
    19f0:	17 06       	cpc	r1, r23
    19f2:	e8 07       	cpc	r30, r24
    19f4:	f9 07       	cpc	r31, r25
    19f6:	c0 f0       	brcs	.+48     	; 0x1a28 <__fp_cmp+0x46>
    19f8:	12 16       	cp	r1, r18
    19fa:	13 06       	cpc	r1, r19
    19fc:	e4 07       	cpc	r30, r20
    19fe:	f5 07       	cpc	r31, r21
    1a00:	98 f0       	brcs	.+38     	; 0x1a28 <__fp_cmp+0x46>
    1a02:	62 1b       	sub	r22, r18
    1a04:	73 0b       	sbc	r23, r19
    1a06:	84 0b       	sbc	r24, r20
    1a08:	95 0b       	sbc	r25, r21
    1a0a:	39 f4       	brne	.+14     	; 0x1a1a <__fp_cmp+0x38>
    1a0c:	0a 26       	eor	r0, r26
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <__fp_cmp+0x46>
    1a10:	23 2b       	or	r18, r19
    1a12:	24 2b       	or	r18, r20
    1a14:	25 2b       	or	r18, r21
    1a16:	21 f4       	brne	.+8      	; 0x1a20 <__fp_cmp+0x3e>
    1a18:	08 95       	ret
    1a1a:	0a 26       	eor	r0, r26
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <__fp_cmp+0x3e>
    1a1e:	a1 40       	sbci	r26, 0x01	; 1
    1a20:	a6 95       	lsr	r26
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	81 1d       	adc	r24, r1
    1a26:	81 1d       	adc	r24, r1
    1a28:	08 95       	ret

00001a2a <__fp_inf>:
    1a2a:	97 f9       	bld	r25, 7
    1a2c:	9f 67       	ori	r25, 0x7F	; 127
    1a2e:	80 e8       	ldi	r24, 0x80	; 128
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	08 95       	ret

00001a36 <__fp_nan>:
    1a36:	9f ef       	ldi	r25, 0xFF	; 255
    1a38:	80 ec       	ldi	r24, 0xC0	; 192
    1a3a:	08 95       	ret

00001a3c <__fp_pscA>:
    1a3c:	00 24       	eor	r0, r0
    1a3e:	0a 94       	dec	r0
    1a40:	16 16       	cp	r1, r22
    1a42:	17 06       	cpc	r1, r23
    1a44:	18 06       	cpc	r1, r24
    1a46:	09 06       	cpc	r0, r25
    1a48:	08 95       	ret

00001a4a <__fp_pscB>:
    1a4a:	00 24       	eor	r0, r0
    1a4c:	0a 94       	dec	r0
    1a4e:	12 16       	cp	r1, r18
    1a50:	13 06       	cpc	r1, r19
    1a52:	14 06       	cpc	r1, r20
    1a54:	05 06       	cpc	r0, r21
    1a56:	08 95       	ret

00001a58 <__fp_round>:
    1a58:	09 2e       	mov	r0, r25
    1a5a:	03 94       	inc	r0
    1a5c:	00 0c       	add	r0, r0
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <__fp_round+0xc>
    1a60:	88 23       	and	r24, r24
    1a62:	52 f0       	brmi	.+20     	; 0x1a78 <__fp_round+0x20>
    1a64:	bb 0f       	add	r27, r27
    1a66:	40 f4       	brcc	.+16     	; 0x1a78 <__fp_round+0x20>
    1a68:	bf 2b       	or	r27, r31
    1a6a:	11 f4       	brne	.+4      	; 0x1a70 <__fp_round+0x18>
    1a6c:	60 ff       	sbrs	r22, 0
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <__fp_round+0x20>
    1a70:	6f 5f       	subi	r22, 0xFF	; 255
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	8f 4f       	sbci	r24, 0xFF	; 255
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	08 95       	ret

00001a7a <__fp_split3>:
    1a7a:	57 fd       	sbrc	r21, 7
    1a7c:	90 58       	subi	r25, 0x80	; 128
    1a7e:	44 0f       	add	r20, r20
    1a80:	55 1f       	adc	r21, r21
    1a82:	59 f0       	breq	.+22     	; 0x1a9a <__fp_splitA+0x10>
    1a84:	5f 3f       	cpi	r21, 0xFF	; 255
    1a86:	71 f0       	breq	.+28     	; 0x1aa4 <__fp_splitA+0x1a>
    1a88:	47 95       	ror	r20

00001a8a <__fp_splitA>:
    1a8a:	88 0f       	add	r24, r24
    1a8c:	97 fb       	bst	r25, 7
    1a8e:	99 1f       	adc	r25, r25
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <__fp_splitA+0x20>
    1a92:	9f 3f       	cpi	r25, 0xFF	; 255
    1a94:	79 f0       	breq	.+30     	; 0x1ab4 <__fp_splitA+0x2a>
    1a96:	87 95       	ror	r24
    1a98:	08 95       	ret
    1a9a:	12 16       	cp	r1, r18
    1a9c:	13 06       	cpc	r1, r19
    1a9e:	14 06       	cpc	r1, r20
    1aa0:	55 1f       	adc	r21, r21
    1aa2:	f2 cf       	rjmp	.-28     	; 0x1a88 <__fp_split3+0xe>
    1aa4:	46 95       	lsr	r20
    1aa6:	f1 df       	rcall	.-30     	; 0x1a8a <__fp_splitA>
    1aa8:	08 c0       	rjmp	.+16     	; 0x1aba <__fp_splitA+0x30>
    1aaa:	16 16       	cp	r1, r22
    1aac:	17 06       	cpc	r1, r23
    1aae:	18 06       	cpc	r1, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	f1 cf       	rjmp	.-30     	; 0x1a96 <__fp_splitA+0xc>
    1ab4:	86 95       	lsr	r24
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	61 05       	cpc	r22, r1
    1aba:	08 94       	sec
    1abc:	08 95       	ret

00001abe <__fp_zero>:
    1abe:	e8 94       	clt

00001ac0 <__fp_szero>:
    1ac0:	bb 27       	eor	r27, r27
    1ac2:	66 27       	eor	r22, r22
    1ac4:	77 27       	eor	r23, r23
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	97 f9       	bld	r25, 7
    1aca:	08 95       	ret

00001acc <__gesf2>:
    1acc:	8a df       	rcall	.-236    	; 0x19e2 <__fp_cmp>
    1ace:	08 f4       	brcc	.+2      	; 0x1ad2 <__gesf2+0x6>
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	08 95       	ret

00001ad4 <__mulsf3>:
    1ad4:	0b d0       	rcall	.+22     	; 0x1aec <__mulsf3x>
    1ad6:	c0 cf       	rjmp	.-128    	; 0x1a58 <__fp_round>
    1ad8:	b1 df       	rcall	.-158    	; 0x1a3c <__fp_pscA>
    1ada:	28 f0       	brcs	.+10     	; 0x1ae6 <__mulsf3+0x12>
    1adc:	b6 df       	rcall	.-148    	; 0x1a4a <__fp_pscB>
    1ade:	18 f0       	brcs	.+6      	; 0x1ae6 <__mulsf3+0x12>
    1ae0:	95 23       	and	r25, r21
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <__mulsf3+0x12>
    1ae4:	a2 cf       	rjmp	.-188    	; 0x1a2a <__fp_inf>
    1ae6:	a7 cf       	rjmp	.-178    	; 0x1a36 <__fp_nan>
    1ae8:	11 24       	eor	r1, r1
    1aea:	ea cf       	rjmp	.-44     	; 0x1ac0 <__fp_szero>

00001aec <__mulsf3x>:
    1aec:	c6 df       	rcall	.-116    	; 0x1a7a <__fp_split3>
    1aee:	a0 f3       	brcs	.-24     	; 0x1ad8 <__mulsf3+0x4>

00001af0 <__mulsf3_pse>:
    1af0:	95 9f       	mul	r25, r21
    1af2:	d1 f3       	breq	.-12     	; 0x1ae8 <__mulsf3+0x14>
    1af4:	95 0f       	add	r25, r21
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	55 1f       	adc	r21, r21
    1afa:	62 9f       	mul	r22, r18
    1afc:	f0 01       	movw	r30, r0
    1afe:	72 9f       	mul	r23, r18
    1b00:	bb 27       	eor	r27, r27
    1b02:	f0 0d       	add	r31, r0
    1b04:	b1 1d       	adc	r27, r1
    1b06:	63 9f       	mul	r22, r19
    1b08:	aa 27       	eor	r26, r26
    1b0a:	f0 0d       	add	r31, r0
    1b0c:	b1 1d       	adc	r27, r1
    1b0e:	aa 1f       	adc	r26, r26
    1b10:	64 9f       	mul	r22, r20
    1b12:	66 27       	eor	r22, r22
    1b14:	b0 0d       	add	r27, r0
    1b16:	a1 1d       	adc	r26, r1
    1b18:	66 1f       	adc	r22, r22
    1b1a:	82 9f       	mul	r24, r18
    1b1c:	22 27       	eor	r18, r18
    1b1e:	b0 0d       	add	r27, r0
    1b20:	a1 1d       	adc	r26, r1
    1b22:	62 1f       	adc	r22, r18
    1b24:	73 9f       	mul	r23, r19
    1b26:	b0 0d       	add	r27, r0
    1b28:	a1 1d       	adc	r26, r1
    1b2a:	62 1f       	adc	r22, r18
    1b2c:	83 9f       	mul	r24, r19
    1b2e:	a0 0d       	add	r26, r0
    1b30:	61 1d       	adc	r22, r1
    1b32:	22 1f       	adc	r18, r18
    1b34:	74 9f       	mul	r23, r20
    1b36:	33 27       	eor	r19, r19
    1b38:	a0 0d       	add	r26, r0
    1b3a:	61 1d       	adc	r22, r1
    1b3c:	23 1f       	adc	r18, r19
    1b3e:	84 9f       	mul	r24, r20
    1b40:	60 0d       	add	r22, r0
    1b42:	21 1d       	adc	r18, r1
    1b44:	82 2f       	mov	r24, r18
    1b46:	76 2f       	mov	r23, r22
    1b48:	6a 2f       	mov	r22, r26
    1b4a:	11 24       	eor	r1, r1
    1b4c:	9f 57       	subi	r25, 0x7F	; 127
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	8a f0       	brmi	.+34     	; 0x1b74 <__mulsf3_pse+0x84>
    1b52:	e1 f0       	breq	.+56     	; 0x1b8c <__mulsf3_pse+0x9c>
    1b54:	88 23       	and	r24, r24
    1b56:	4a f0       	brmi	.+18     	; 0x1b6a <__mulsf3_pse+0x7a>
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	66 1f       	adc	r22, r22
    1b60:	77 1f       	adc	r23, r23
    1b62:	88 1f       	adc	r24, r24
    1b64:	91 50       	subi	r25, 0x01	; 1
    1b66:	50 40       	sbci	r21, 0x00	; 0
    1b68:	a9 f7       	brne	.-22     	; 0x1b54 <__mulsf3_pse+0x64>
    1b6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	70 f0       	brcs	.+28     	; 0x1b8c <__mulsf3_pse+0x9c>
    1b70:	5c cf       	rjmp	.-328    	; 0x1a2a <__fp_inf>
    1b72:	a6 cf       	rjmp	.-180    	; 0x1ac0 <__fp_szero>
    1b74:	5f 3f       	cpi	r21, 0xFF	; 255
    1b76:	ec f3       	brlt	.-6      	; 0x1b72 <__mulsf3_pse+0x82>
    1b78:	98 3e       	cpi	r25, 0xE8	; 232
    1b7a:	dc f3       	brlt	.-10     	; 0x1b72 <__mulsf3_pse+0x82>
    1b7c:	86 95       	lsr	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	b7 95       	ror	r27
    1b84:	f7 95       	ror	r31
    1b86:	e7 95       	ror	r30
    1b88:	9f 5f       	subi	r25, 0xFF	; 255
    1b8a:	c1 f7       	brne	.-16     	; 0x1b7c <__mulsf3_pse+0x8c>
    1b8c:	fe 2b       	or	r31, r30
    1b8e:	88 0f       	add	r24, r24
    1b90:	91 1d       	adc	r25, r1
    1b92:	96 95       	lsr	r25
    1b94:	87 95       	ror	r24
    1b96:	97 f9       	bld	r25, 7
    1b98:	08 95       	ret

00001b9a <__umulhisi3>:
    1b9a:	a2 9f       	mul	r26, r18
    1b9c:	b0 01       	movw	r22, r0
    1b9e:	b3 9f       	mul	r27, r19
    1ba0:	c0 01       	movw	r24, r0
    1ba2:	a3 9f       	mul	r26, r19
    1ba4:	01 d0       	rcall	.+2      	; 0x1ba8 <__umulhisi3+0xe>
    1ba6:	b2 9f       	mul	r27, r18
    1ba8:	70 0d       	add	r23, r0
    1baa:	81 1d       	adc	r24, r1
    1bac:	11 24       	eor	r1, r1
    1bae:	91 1d       	adc	r25, r1
    1bb0:	08 95       	ret

00001bb2 <_exit>:
    1bb2:	f8 94       	cli

00001bb4 <__stop_program>:
    1bb4:	ff cf       	rjmp	.-2      	; 0x1bb4 <__stop_program>
